name: Main

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - jack/gha

jobs:
  scenario-tests:
    runs-on: ubuntu-20.04
    env:
      GAIA_REPO: /home/runner/work/GaiaPlatform/GaiaPlatform
      CC: /usr/bin/clang-10
      CPP: /usr/bin/clang-cpp-10
      CXX: /usr/bin/clang++-10
      LDFLAGS: "-B/usr/lib/llvm-10/bin/ -fuse-ld=lld"
      LANG: en_US.UTF-8
      LC_CTYPE: en_US.UTF-8
      LC_ALL: en_US.UTF-8
    steps:
      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Setup Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Install PipEnv
        uses: dschep/install-pipenv-action@v1
        with:
          version: 2021.5.29

      - name: Install Required Applications
        run: |
          sudo apt-get update && sudo apt-get install -y clang-10 clang-format-10 clang-tidy-10 debhelper flatbuffers-compiler libcap-dev openjdk-8-jdk python3-dev rpm libelf-dev libdwarf-dev zlib1g-dev flex m4 apt-transport-https ca-certificates gnupg lsb-release software-properties-common wget libc++-10-dev libc++abi-10-dev lld-10 build-essential libacl1-dev libcap-dev lsof groff libtool-bin quilt ca-certificates curl gnupg libpq-dev locales lsb-release python3-pip ssl-cert python3 python3-dev python3-pip build-essential

      - name: Install Required Python Packages
        run: |
          python3.8 -m pip install --user atools argcomplete pytest

      - name: Install Required Third Party Git Repositories
        run: |
          cd $GAIA_REPO/third_party/production/backward
          git clone -c advice.detachedHead=false --depth 1 --branch v1.5 https://github.com/bombela/backward-cpp.git
          rm -rf */.git
          cd $GAIA_REPO/third_party/production/daemonize
          git clone -c advice.detachedHead=false --depth 1 --branch release-1.7.8 https://github.com/bmc/daemonize.git
          rm -rf */.git
          cd $GAIA_REPO/third_party/production/libexplain
          git clone -c advice.detachedHead=false --depth 1 --branch "debian/1.4.D001-10" https://salsa.debian.org/debian/libexplain
          rm -rf */.git
          cd $GAIA_REPO/third_party/production/pybind11
          git clone -c advice.detachedHead=false --depth 1 --branch v2.5.0 https://github.com/pybind/pybind11.git
          rm -rf */.git
          cd $GAIA_REPO/third_party/production/cpptoml
          git clone -c advice.detachedHead=false --depth 1 --branch v0.1.1 https://github.com/skystrife/cpptoml.git
          rm -rf */.git
          cd $GAIA_REPO/third_party/production/tabulate
          git clone -c advice.detachedHead=false --depth 1 --branch v1.3 https://github.com/p-ranav/tabulate
          rm -rf */.git
          cd $GAIA_REPO/third_party/production/liburing
          git clone -c advice.detachedHead=false --depth 1 --branch liburing-2.0 https://github.com/axboe/liburing.git
          rm -rf */.git
          cd $GAIA_REPO/third_party/production/CPackDebHelper
          git clone -c advice.detachedHead=false --depth 1 https://github.com/ABruines/CPackDebHelper.git
          rm -rf */.git

      - name: Install Required Third Party Web Packages
        run: |
          cd $GAIA_REPO/third_party/production/bison
          wget http://ftp.gnu.org/gnu/bison/bison-3.5.tar.gz

      - name: Execute Pre-Build Actions
        run: |
          cd $GAIA_REPO/third_party/production/cmake
          sudo update-alternatives --install "/usr/bin/clang" "clang" "/usr/bin/clang-10" 10
          sudo update-alternatives --install "/usr/bin/clang++" "clang++" "/usr/bin/clang++-10" 10
          sudo update-alternatives --install "/usr/bin/ld.lld" "ld.lld" "/usr/bin/ld.lld-10" 10

          sudo update-alternatives --install "/usr/bin/cc" "cc" "$CC" 50
          sudo update-alternatives --install "/usr/bin/c++" "c++" "$CXX" 50
          sudo update-alternatives --install "/usr/bin/cpp" "cpp" "$CPP" 50

          cd $GAIA_REPO/production
          sudo update-alternatives --install "/usr/bin/clang-format" "clang-format" "/usr/bin/clang-format-10" 10
          sudo update-alternatives --install "/usr/bin/clang-tidy" "clang-tidy" "/usr/bin/clang-tidy-10" 10
          sudo mkdir -p /var/lib/gaia/db
          sudo chmod -R 666 /var/lib/gaia/db

      - name: $GAIA_REPO/third_party/production/cmake
        run: |
          cd $GAIA_REPO/third_party/production/cmake
          sudo bash -c "wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null"
          sudo bash -c "echo \"deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main\" | tee /etc/apt/sources.list.d/kitware.list"
          sudo bash -c "apt-get update"
          sudo bash -c "DEBIAN_FRONTEND=noninteractive apt-get install -y     cmake     cmake-data"
          sudo bash -c "apt-get clean"
          sudo bash -c "rm /etc/apt/sources.list.d/kitware.list >/dev/null"
          sudo bash -c "rm /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null"

      - name: $GAIA_REPO/third_party/production/daemonize
        run: |
          cd $GAIA_REPO/third_party/production/daemonize
          echo "cd daemonize || exit 1" >> daemonize.sh
          echo "env > start.env || exit 1" >> daemonize.sh
          echo "export > start.export || exit 1" >> daemonize.sh
          echo "CC=$CC CPP=$CPP CXX=$CXX LDFLAGS=\"$LDFLAGS\" CPPFLAGS='-fPIC' ./configure || exit 1" >> daemonize.sh
          echo "CC=$CC CPP=$CPP CXX=$CXX LDFLAGS=\"$LDFLAGS\" VERBOSE=1 make -j$(nproc) || exit 1" >> daemonize.sh
          echo "CC=$CC CPP=$CPP CXX=$CXX LDFLAGS=\"$LDFLAGS\" VERBOSE=1 make install || exit 1" >> daemonize.sh
          echo "env > end.env || exit 1" >> daemonize.sh
          echo "export > end.export || exit 1" >> daemonize.sh
          echo "echo Differences in ENV follow: || exit 1" >> daemonize.sh
          echo "diff start.env end.env || exit 1" >> daemonize.sh
          echo "echo Differences in EXPORT follow: || exit 1" >> daemonize.sh
          echo "diff start.export end.export || exit 1" >> daemonize.sh
          chmod +x daemonize.sh
          sudo ./daemonize.sh

      - name: $GAIA_REPO/third_party/production/postgresql
        run: |
          cd $GAIA_REPO/third_party/production/postgresql
          echo "env > start.env || exit 1" > postgresql.sh
          echo "export > start.export || exit 1" >> postgresql.sh
          echo "curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - || exit 1" >> postgresql.sh
          echo "echo \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" | tee /etc/apt/sources.list.d/pgdg.list || exit 1" >> postgresql.sh
          echo "apt-get update -y || exit 1" >> postgresql.sh
          echo "DEBIAN_FRONTEND=noninteractive apt-get install -y     postgresql-12     postgresql-12-dbgsym     postgresql-client-12     postgresql-client-12-dbgsym     postgresql-contrib-12     postgresql-server-dev-12 || exit 1" >> postgresql.sh
          echo "apt-get clean || exit 1" >> postgresql.sh
          echo "rm /etc/apt/sources.list.d/pgdg.list || exit 1" >> postgresql.sh
          echo "python3 -m pip install psycopg2 || exit 1" >> postgresql.sh
          echo "locale-gen en_US.UTF-8 || exit 1" >> postgresql.sh
          echo "mkdir -p /etc/postgresql/ssl || exit 1" >> postgresql.sh
          echo "cp -p -R /etc/ssl/private /etc/postgresql/ssl || exit 1" >> postgresql.sh
          echo "sed -i \"s/\/etc\/ssl\/private/\/etc\/postgresql\/ssl\/private/g\" /etc/postgresql/12/main/postgresql.conf || exit 1" >> postgresql.sh
          echo "sed -i '/^local/ s/peer/trust/' /etc/postgresql/12/main/pg_hba.conf || exit 1" >> postgresql.sh
          echo "env > end.env || exit 1" >> postgresql.sh
          echo "export > end.export || exit 1" >> postgresql.sh
          echo "echo Differences in ENV follow: || exit 1" >> postgresql.sh
          echo "diff start.env end.env || exit 1" >> postgresql.sh
          echo "echo Differences in EXPORT follow: || exit 1" >> postgresql.sh
          echo "diff start.export end.export || exit 1" >> postgresql.sh
          chmod +x postgresql.sh
          sudo ./postgresql.sh

          which pg_config
          pg_config --includedir
          pg_config --includedir-server
          ls -la /usr/lib/postgresql/
          sudo rm -rf /usr/lib/postgresql/14
          ls -la /usr/lib/postgresql/
          pg_config --includedir-server

      - name: $GAIA_REPO/third_party/production/liburing
        run: |
          cd $GAIA_REPO/third_party/production/liburing
          cd liburing
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" CPPFLAGS='-fPIC' ./configure"
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" VERBOSE=1 make -j$(nproc)"
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" VERBOSE=1 make install"

      - name: $GAIA_REPO/third_party/production/backward
        run: |
          cd $GAIA_REPO/third_party/production/backward
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" cmake backward-cpp"
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" VERBOSE=1 make -j$(nproc)"
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" VERBOSE=1 make install"

      - name: $GAIA_REPO/third_party/production/bison
        run: |
          cd $GAIA_REPO/third_party/production/bison
          sudo bash -c "tar -zxvf bison-3.5.tar.gz"
          cd bison-3.5
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" CPPFLAGS='-fPIC' ./configure"
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" VERBOSE=1 make -j$(nproc)"
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" VERBOSE=1 make install"

      # - name: $GAIA_REPO/third_party/production/pybind11
      #   run: |
      #     cd $GAIA_REPO/third_party/production/pybind11
      #     /usr/bin/python3.8 -m pip install pytest
      #     /usr/bin/python3.8 -c "import pytest; print(pytest.__version__)"
      #     sudo bash -c "cmake pybind11"
      #     sudo bash -c "make -j$(nproc)"
      #     sudo bash -c "make install"
      #     sudo bash -c "rm -rf *"

      - name: $GAIA_REPO/third_party/production/cpptoml
        run: |
          cd $GAIA_REPO/third_party/production/cpptoml
          cd cpptoml
          sudo bash -c "rm -fr build/"
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" cmake -H. -Bbuild  -DCMAKE_BUILD_TYPE=Release                    -DCPPTOML_BUILD_EXAMPLES=OFF                    -DENABLE_LIBCXX=OFF"
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" cmake --build build --target install"

      - name: $GAIA_REPO/third_party/production/tabulate
        run: |
          cd $GAIA_REPO/third_party/production/tabulate
          cd tabulate
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=Release"
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" cmake --build build --target install"

      - name: $GAIA_REPO/third_party/production/CPackDebHelper
        run: |
          cd $GAIA_REPO/third_party/production/CPackDebHelper
          sudo bash -c "mkdir -p /usr/local/lib/cmake/CPackDebHelper"
          sudo bash -c "cp CPackDebHelper/cmake/*.cmake /usr/local/lib/cmake/CPackDebHelper/"

      - name: $GAIA_REPO/third_party/production/libexplain
        run: |
          cd $GAIA_REPO/third_party/production/libexplain
          cd libexplain
          sudo bash -c "QUILT_PATCHES=debian/patches quilt push -a"
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" CPPFLAGS='-fPIC' ./configure --prefix=/usr"
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" VERBOSE=1 make -j$(nproc)"
          sudo bash -c "CC=/usr/bin/clang-10 CPP=/usr/bin/clang-cpp-10 CXX=/usr/bin/clang++-10 LDFLAGS=\"-B/usr/lib/llvm-10/bin/ -fuse-ld=lld\" VERBOSE=1 make install"

      - name: $GAIA_REPO/production
        run: |
          echo "CC=$CC CPP=$CPP CXX=$CXX LDFLAGS=\"$LDFLAGS\" cmake --log-level=VERBOSE -Wno-dev -DCMAKE_MODULE_PATH=/usr/local/lib/cmake/CPackDebHelper -DBUILD_GAIA_RELEASE=ON  -G \"Unix Makefiles\" $GAIA_REPO/production || exit 1" >> production.sh
          echo "cat CMakeCache.txt || exit 1" >> production.sh
          echo "CC=$CC CPP=$CPP CXX=$CXX LDFLAGS=\"$LDFLAGS\" LSAN_OPTIONS=detect_leaks=0 VERBOSE=1 make -j$(nproc) || exit 1" >> production.sh
          echo "cd /build/production/db/core"
          echo "make install"
          chmod +x production.sh
          sudo ./production.sh
          echo ls -la /
          sudo ls -la /
          echo ls -la /home
          sudo ls -la /home
          echo ls -la /home/runner
          sudo ls -la /home/runner
          echo ls -la /home/runner/work
          sudo ls -la /home/runner/work
          echo ls -la /home/runner/work/GaiaPlatform
          sudo ls -la /home/runner/work/GaiaPlatform
          echo find . -name gaia_db_server
          sudo find . -name gaia_db_server

      - name: Upload Build Directory
        uses: actions/upload-artifact@v2
        with:
          name: Build
          path: /home/runner/work/
      - name: Upload CMakeCache.txt
        uses: actions/upload-artifact@v2
        with:
          name: Debug
          path: CMakeCache.txt
      - name: Done
        run: |
          echo "Done"
      # - name: Sync With Repository
