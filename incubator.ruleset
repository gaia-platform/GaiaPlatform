/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

#include <atomic>
#include <algorithm>

using namespace std;

extern atomic<int> g_timestamp;

extern atomic<int> g_rule_1_tracker;
extern atomic<int> g_rule_2_tracker;
extern atomic<int> g_rule_3_tracker;

constexpr float c_fan_speed_limit = 5000.0;
constexpr float c_fan_speed_increment = 500.0;
constexpr float c_fan_threshold = 0.7f;

ruleset incubator_ruleset
{
    // Rule 1:  keep the temperature with the range of the minimum and
    // maximum limits of the incubator.
    OnUpdate(sensor.value, incubator.max_temp, incubator.min_temp)
    {
        if (!incubator.is_on)
        {
            return;
        }

        if (sensor.value >= incubator.max_temp)
        {
            A:actuator.value = min(c_fan_speed_limit, A.value + c_fan_speed_increment);
            actuator.timestamp = g_timestamp;
        }
        else if (sensor.value <= incubator.min_temp)
        {
            A:actuator.value = max(0.0f, A.value - (2*c_fan_speed_increment));
            actuator.timestamp   = g_timestamp;
        }
        g_rule_1_tracker++;
    }

    // Rule 2:  Turn off all the fans if the incubator is powered down.
    {
        if (!@incubator.is_on)
        {
            actuator.value = 0;
            actuator.timestamp = g_timestamp;
        }
        g_rule_2_tracker++;
    }

    // Rule 3:  If the fan is at 70% of its limit and the temperature is still too hot then
    // set the fan to its maximum speed.
    OnUpdate(actuator.value)
    {
        if (actuator.value == c_fan_speed_limit)
        {
            return;
        }

        if (actuator.value > c_fan_threshold * c_fan_speed_limit && sensor.value > incubator.max_temp)
        {
            actuator.value = c_fan_speed_limit;
        }
        g_rule_3_tracker++;
    }
}
