BasedOnStyle: LLVM
UseCRLF: false
UseTab: Never
IndentWidth: 4
ColumnLimit: 0
# The following configuration encodes the BreakBeforeBraces Allman style
# but for BeforeLambdaBody to allow one-liner lambdas.
# See discussion here about customizing BreakBeforeBraces: https://reviews.llvm.org/D94906#2505095.
BreakBeforeBraces: Custom
BraceWrapping:
  AfterCaseLabel:  true
  AfterClass:      true
  AfterControlStatement: Always
  AfterEnum:       true
  AfterFunction:   true
  AfterNamespace:  true
  AfterObjCDeclaration: true
  AfterStruct:     true
  AfterUnion:      true
  AfterExternBlock: true
  BeforeCatch:     true
  BeforeElse:      true
  BeforeLambdaBody: false
  BeforeWhile:     false
  IndentBraces:    false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true

# Force pointers to the type for C++.
DerivePointerAlignment: false
PointerAlignment: Left

# Align public/final/protected on the left.
AccessModifierOffset: -4

# From clang-format-11 there are more fine grained options for this setting.
AlignOperands: DontAlign
BreakBeforeBinaryOperators: All
BreakBeforeTernaryOperators: true

AllowAllConstructorInitializersOnNextLine: true
ConstructorInitializerAllOnOneLineOrOnePerLine: true
BreakConstructorInitializers: BeforeComma
ConstructorInitializerIndentWidth: 4

AllowShortFunctionsOnASingleLine: None
# Merge lambda into a single line if argument of a function.
AllowShortLambdasOnASingleLine: Inline
# (clang-format-13) Align lambda body relative to the indentation level of the outer scope the lambda signature resides in.
# LambdaBodyIndentation: OuterScope

# If false, all arguments will either be all on the same line or will have one line each.
BinPackArguments: true
BinPackParameters: true
AlignAfterOpenBracket: AlwaysBreak
AllowAllArgumentsOnNextLine: true
AllowAllParametersOfDeclarationOnNextLine: true

# Merge multiple #include blocks together and sort as one. Then split into groups based on category priority:
# 1. Associated file header (XYZ.hpp)
# 2. C system headers. (Priority: 1-2)
# 3. C++ standard library headers (Priority: 5)
# 4. Third party library headers (Priority: 10)
# 5. Other project headers (Priority: 20-23 + 30)
# Note this could break the code, read: https://stackoverflow.com/questions/37927553/can-clang-format-break-my-code
IncludeBlocks: Regroup
IncludeCategories:
  # Public internal Gaia headers.
  - Regex: 'gaia\/internal\/'
    Priority: 20
    SortPriority: 21
  # Public Gaia headers.
  - Regex: 'gaia\/'
    Priority: 21
    SortPriority: 20
  # Internal Gaia headers.
  - Regex: 'gaia_internal\/'
    Priority: 22
  # Internal Gaia spdlog headers.
  - Regex: 'gaia_spdlog\/'
    Priority: 23
  # Internal Gaia spdlog headers.
  - Regex: 'gaia_spdlog_setup\/'
    Priority: 23
  # Third-party headers.
  - Regex: '[flatbuffers|gtest|libexplain|llvm|pybind11|rocksdb|spdlog|tabulate]\/'
    Priority: 10
    SortPriority: 10
  - Regex: 'backward'
    Priority: 10
    SortPriority: 11
  - Regex: 'cpptoml'
    Priority: 10
    SortPriority: 12
  - Regex: 'liburing'
    Priority: 10
    SortPriority: 13
  - Regex: 'json\.hpp'
    Priority: 10
    SortPriority: 14
  # C system headers.
  - Regex: '^<.*\.h>'
    Priority: 1
  - Regex: 'cassert|cctype|cerrno|cfenv|cfloat|cinttypes|climits|clocale|cmath|csetjmp|csignal|cstdarg|cstddef|cstdint|cstdio|cstdlib|cstring|ctime|cuchar|cwchar|cwctype'
    Priority: 2
  # C++ library headers.
  - Regex: '^<.*'
    Priority: 5
  # Component-only headers.
  - Regex: '.*'
    Priority: 30

KeepEmptyLinesAtTheStartOfBlocks: true
SpaceAfterCStyleCast: false
ContinuationIndentWidth: 4
AlignTrailingComments: false
