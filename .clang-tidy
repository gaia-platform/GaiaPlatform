Checks: '-*,
readability-identifier-naming,
google-readability-namespace-comments,
cppcoreguidelines-avoid-magic-numbers,
google-build-using-namespace
'

FormatStyle: file

CheckOptions:
  #  - { key: readability-identifier-naming.ClassSuffix,           value: _t } can't do this because of exceptions
  - { key: readability-identifier-naming.PrivateMemberPrefix,   value: m_ }
  - { key: readability-identifier-naming.StructSuffix,          value: _t }
  - { key: readability-identifier-naming.GlobalConstantPrefix,  value: c_ }
  - { key: readability-identifier-naming.ConstantPrefix,        value: c_ }
  - { key: readability-identifier-naming.GlobalVariablePrefix,  value: g_ }
  - { key: readability-identifier-naming.AbstractClassCase,     value: lower_case }
  - { key: readability-identifier-naming.ClassCase,             value: lower_case }
  - { key: readability-identifier-naming.ClassConstantCase,     value: lower_case }
  - { key: readability-identifier-naming.ClassMemberCase,       value: lower_case }
  - { key: readability-identifier-naming.ClassMethodCase,       value: lower_case }
  - { key: readability-identifier-naming.ConstantCase,          value: lower_case }
  - { key: readability-identifier-naming.ConstexprFunctionCase, value: lower_case }
  - { key: readability-identifier-naming.ConstexprMethodCase,   value: lower_case }
  - { key: readability-identifier-naming.ConstexprVariableCase, value: lower_case }
  - { key: readability-identifier-naming.EnumCase,              value: lower_case }
  - { key: readability-identifier-naming.EnumConstantCase,      value: lower_case }
  - { key: readability-identifier-naming.FunctionCase,          value: lower_case }
  - { key: readability-identifier-naming.GlobalConstantCase,    value: lower_case }
  - { key: readability-identifier-naming.GlobalFunctionCase,    value: lower_case }
  - { key: readability-identifier-naming.GlobalVariableCase,    value: lower_case }
  - { key: readability-identifier-naming.InlineNamespaceCase,   value: lower_case }
  - { key: readability-identifier-naming.LocalConstantCase,     value: lower_case }
  - { key: readability-identifier-naming.LocalVariableCase,     value: lower_case }
  - { key: readability-identifier-naming.MemberCase,            value: lower_case }
  - { key: readability-identifier-naming.ConstantMemberCase,    value: lower_case }
  - { key: readability-identifier-naming.PublicMemberCase,      value: lower_case }
  - { key: readability-identifier-naming.MethodCase,            value: lower_case }
  - { key: readability-identifier-naming.NamespaceCase,         value: lower_case }
  - { key: readability-identifier-naming.ParameterCase,         value: lower_case }
  - { key: readability-identifier-naming.ConstantParameterCase, value: lower_case }
  - { key: readability-identifier-naming.ParameterPackCase,     value: lower_case }
  - { key: readability-identifier-naming.PureFunctionCase,      value: lower_case }
  - { key: readability-identifier-naming.PureMethodCase,        value: lower_case }
  - { key: readability-identifier-naming.StaticConstantCase,    value: lower_case }
  - { key: readability-identifier-naming.StaticVariableCase,    value: lower_case }
  - { key: readability-identifier-naming.StructCase,            value: lower_case }
  - { key: readability-identifier-naming.TemplateParameterCase, value: lower_case }
  - { key: readability-identifier-naming.TemplateTemplateParameterCase, value: lower_case }
  - { key: readability-identifier-naming.TemplateUsingCase,     value: lower_case }
  - { key: readability-identifier-naming.TypeTemplateParameterCase, value: lower_case }
  - { key: readability-identifier-naming.TypedefCase,           value: lower_case }
  - { key: readability-identifier-naming.UnionCase,             value: lower_case }
  - { key: readability-identifier-naming.UsingCase,             value: lower_case }
  - { key: readability-identifier-naming.ValueTemplateParameterCase, value: lower_case }
  - { key: readability-identifier-naming.VariableCase,          value: lower_case }
  - { key: readability-identifier-naming.VirtualMethodCase,     value: lower_case }


#Checks: 'cppcoreguidelines-*,
#performance-*,
#performance-*,
#modernize-*,
#google-*,
#misc-*,
#cert-*,
#readability-*,
#clang-analyzer-*,
#-performance-unnecessary-value-param,
#-modernize-use-trailing-return-type,
#-google-runtime-references,
#-misc-non-private-member-variables-in-classes,
#-readability-braces-around-statements,
#-google-readability-braces-around-statements,
#-cppcoreguidelines-avoid-magic-numbers,
#-readability-magic-numbers,
#-readability-magic-numbers,
#-cppcoreguidelines-pro-type-vararg,
#-cppcoreguidelines-pro-bounds-pointer-arithmetic,
#-cppcoreguidelines-avoid-c-arrays,
#-modernize-avoid-c-arrays,
#-cppcoreguidelines-pro-bounds-array-to-pointer-decay,
#-readability-named-parameter,
#-cert-env33-c
#'
#
#
#WarningsAsErrors: ''
#HeaderFilterRegex: '*spdlog/[^f].*'
#AnalyzeTemporaryDtors: false
#FormatStyle:     none
#
#CheckOptions:
#  - key:             google-readability-braces-around-statements.ShortStatementLines
#    value:           '1'
#  - key:             google-readability-function-size.StatementThreshold
#    value:           '800'
#  - key:             google-readability-namespace-comments.ShortNamespaceLines
#    value:           '10'
#  - key:             google-readability-namespace-comments.SpacesBeforeComments
#    value:           '2'
#  - key:             modernize-loop-convert.MaxCopySize
#    value:           '16'
#  - key:             modernize-loop-convert.MinConfidence
#    value:           reasonable
#  - key:             modernize-loop-convert.NamingStyle
#    value:           CamelCase
#  - key:             modernize-pass-by-value.IncludeStyle
#    value:           llvm
#  - key:             modernize-replace-auto-ptr.IncludeStyle
#    value:           llvm
#  - key:             modernize-use-nullptr.NullMacros
#    value:           'NULL'
