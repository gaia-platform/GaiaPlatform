// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RECORD_FLATBUFFERS_RECORD_H_
#define FLATBUFFERS_GENERATED_RECORD_FLATBUFFERS_RECORD_H_

#include "flatbuffers/flatbuffers.h"

namespace Flatbuffers {
namespace Record {

struct Record;

struct Record FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PREFIX_DATA = 4,
    VT_DATA = 6,
    VT_SUFFIX_DATA = 8
  };
  uint64_t prefix_data() const {
    return GetField<uint64_t>(VT_PREFIX_DATA, 0);
  }
  uint64_t data() const {
    return GetField<uint64_t>(VT_DATA, 15);
  }
  uint64_t suffix_data() const {
    return GetField<uint64_t>(VT_SUFFIX_DATA, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PREFIX_DATA) &&
           VerifyField<uint64_t>(verifier, VT_DATA) &&
           VerifyField<uint64_t>(verifier, VT_SUFFIX_DATA) &&
           verifier.EndTable();
  }
};

struct RecordBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_prefix_data(uint64_t prefix_data) {
    fbb_.AddElement<uint64_t>(Record::VT_PREFIX_DATA, prefix_data, 0);
  }
  void add_data(uint64_t data) {
    fbb_.AddElement<uint64_t>(Record::VT_DATA, data, 15);
  }
  void add_suffix_data(uint64_t suffix_data) {
    fbb_.AddElement<uint64_t>(Record::VT_SUFFIX_DATA, suffix_data, 0);
  }
  explicit RecordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RecordBuilder &operator=(const RecordBuilder &);
  flatbuffers::Offset<Record> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Record>(end);
    return o;
  }
};

inline flatbuffers::Offset<Record> CreateRecord(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t prefix_data = 0,
    uint64_t data = 15,
    uint64_t suffix_data = 0) {
  RecordBuilder builder_(_fbb);
  builder_.add_suffix_data(suffix_data);
  builder_.add_data(data);
  builder_.add_prefix_data(prefix_data);
  return builder_.Finish();
}

inline const Flatbuffers::Record::Record *GetRecord(const void *buf) {
  return flatbuffers::GetRoot<Flatbuffers::Record::Record>(buf);
}

inline const Flatbuffers::Record::Record *GetSizePrefixedRecord(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Flatbuffers::Record::Record>(buf);
}

inline bool VerifyRecordBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Flatbuffers::Record::Record>(nullptr);
}

inline bool VerifySizePrefixedRecordBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Flatbuffers::Record::Record>(nullptr);
}

inline void FinishRecordBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Flatbuffers::Record::Record> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRecordBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Flatbuffers::Record::Record> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Record
}  // namespace Flatbuffers

#endif  // FLATBUFFERS_GENERATED_RECORD_FLATBUFFERS_RECORD_H_
