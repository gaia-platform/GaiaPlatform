/**
 * Gaia School
 * School management system REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * FacilityApi.h
 *
 *
 */

#ifndef FacilityApi_H_
#define FacilityApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "Building.h"
#include "Facescan.h"
#include "Room.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class FacilityApi {
public:
  FacilityApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~FacilityApi() {}
  void init();

  const std::string base = "/v2";

private:
  void setupRoutes();

  void add_building_handler(const Pistache::Rest::Request &request,
                            Pistache::Http::ResponseWriter response);
  void add_facescan_handler(const Pistache::Rest::Request &request,
                            Pistache::Http::ResponseWriter response);
  void add_room_handler(const Pistache::Rest::Request &request,
                        Pistache::Http::ResponseWriter response);
  void delete_building_handler(const Pistache::Rest::Request &request,
                               Pistache::Http::ResponseWriter response);
  void delete_room_handler(const Pistache::Rest::Request &request,
                           Pistache::Http::ResponseWriter response);
  void get_building_by_id_handler(const Pistache::Rest::Request &request,
                                  Pistache::Http::ResponseWriter response);
  void get_room_by_id_handler(const Pistache::Rest::Request &request,
                              Pistache::Http::ResponseWriter response);
  void list_buildings_handler(const Pistache::Rest::Request &request,
                              Pistache::Http::ResponseWriter response);
  void
  list_facescan_at_building_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);
  void list_rooms_handler(const Pistache::Rest::Request &request,
                          Pistache::Http::ResponseWriter response);
  void update_building_handler(const Pistache::Rest::Request &request,
                               Pistache::Http::ResponseWriter response);
  void update_room_handler(const Pistache::Rest::Request &request,
                           Pistache::Http::ResponseWriter response);
  void facility_api_default_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Add a new building
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="building">Building that needs to be added to the
  /// school</param>
  virtual void add_building(const Building &building,
                            Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Add a new facescan
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="facescan">Facescan that needs to be added to the
  /// school</param>
  virtual void add_facescan(const Facescan &facescan,
                            Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Add a new room
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="room">Room that needs to be added to the school</param>
  virtual void add_room(const Room &room,
                        Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Remove a building
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="buildingId">Id of the building to delete</param>
  virtual void delete_building(const int64_t &buildingId,
                               Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Remove a room
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="roomId">Id of the room to delete</param>
  virtual void delete_room(const int64_t &roomId,
                           Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Find a building by ID
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="buildingId">ID of building to return</param>
  virtual void get_building_by_id(const int64_t &buildingId,
                                  Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Find a room by ID
  /// </summary>
  /// <remarks>
  /// Returns a single room
  /// </remarks>
  /// <param name="roomId">ID of room to return</param>
  virtual void get_room_by_id(const int64_t &roomId,
                              Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// List all buildings
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  virtual void list_buildings(Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// List all face scanned at a building
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="buildingId">ID of building to return</param>
  virtual void
  list_facescan_at_building(const int64_t &buildingId,
                            Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// List all rooms
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  virtual void list_rooms(Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Update an existing building
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="building">Building that needs to be added to the
  /// school</param>
  virtual void update_building(const Building &building,
                               Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Update an existing room
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="room">Room that needs to be added to the school</param>
  virtual void update_room(const Room &room,
                           Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* FacilityApi_H_ */
