/**
 * Gaia School
 * School management system REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PersonnelApi.h
 *
 *
 */

#ifndef PersonnelApi_H_
#define PersonnelApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include "Person.h"
#include "Student.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class PersonnelApi {
public:
  PersonnelApi(std::shared_ptr<Pistache::Rest::Router>);
  virtual ~PersonnelApi() {}
  void init();

  const std::string base = "/v2";

private:
  void setupRoutes();

  void add_person_handler(const Pistache::Rest::Request &request,
                          Pistache::Http::ResponseWriter response);
  void delete_student_handler(const Pistache::Rest::Request &request,
                              Pistache::Http::ResponseWriter response);
  void find_people_by_role_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response);
  void get_student_by_id_handler(const Pistache::Rest::Request &request,
                                 Pistache::Http::ResponseWriter response);
  void list_people_handler(const Pistache::Rest::Request &request,
                           Pistache::Http::ResponseWriter response);
  void update_person_handler(const Pistache::Rest::Request &request,
                             Pistache::Http::ResponseWriter response);
  void personnel_api_default_handler(const Pistache::Rest::Request &request,
                                     Pistache::Http::ResponseWriter response);

  std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Register a new person
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="person">Person that needs to be added to the school</param>
  virtual void add_person(const Person &person,
                          Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Remove a student and its parents
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="studentId">Id of the student to delete</param>
  virtual void delete_student(const int64_t &studentId,
                              Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Find people by role
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="role"></param>
  virtual void
  find_people_by_role(const Pistache::Optional<std::string> &role,
                      Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Find a student by ID
  /// </summary>
  /// <remarks>
  /// Returns a single student
  /// </remarks>
  /// <param name="studentId">ID of student to return</param>
  virtual void get_student_by_id(const int64_t &studentId,
                                 Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// List all persons
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  virtual void list_people(Pistache::Http::ResponseWriter &response) = 0;

  /// <summary>
  /// Update an existing person
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="person">Person that needs to be added to the school</param>
  virtual void update_person(const Person &person,
                             Pistache::Http::ResponseWriter &response) = 0;
};

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org

#endif /* PersonnelApi_H_ */
