/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

// Automatically generated by the Gaia Data Classes code generator.
// Do not modify.

#include <iterator>

#ifndef GAIA_GENERATED_school_H_
#define GAIA_GENERATED_school_H_

#include "gaia/direct_access/edc_object.hpp"
#include "school_generated.h"
#include "gaia/direct_access/edc_iterators.hpp"

namespace gaia {
namespace school {

// The initial size of the flatbuffer builder buffer.
constexpr int c_flatbuffer_builder_size = 128;

// Constants contained in the registration object.
constexpr uint32_t c_gaia_type_registration = 11u;
constexpr int c_parent_student_student = 0;
constexpr int c_next_student_registration = 1;
constexpr int c_parent_event_event = 2;
constexpr int c_next_event_registration = 3;
constexpr int c_num_registration_ptrs = 4;

// Constants contained in the event object.
constexpr uint32_t c_gaia_type_event = 10u;
constexpr int c_parent_teacher_staff = 0;
constexpr int c_next_teacher_event = 1;
constexpr int c_parent_venue_room = 2;
constexpr int c_next_venue_event = 3;
constexpr int c_first_event_registration = 4;
constexpr int c_num_event_ptrs = 5;

// Constants contained in the room object.
constexpr uint32_t c_gaia_type_room = 9u;
constexpr int c_parent_building_building = 0;
constexpr int c_next_building_room = 1;
constexpr int c_first_venue_event = 2;
constexpr int c_num_room_ptrs = 3;

// Constants contained in the face_scan object.
constexpr uint32_t c_gaia_type_face_scan = 8u;
constexpr int c_parent_location_building = 0;
constexpr int c_next_location_face_scan = 1;
constexpr int c_parent_owner_person = 2;
constexpr int c_next_owner_face_scan = 3;
constexpr int c_parent_stranger_owner_stranger = 4;
constexpr int c_next_stranger_owner_face_scan = 5;
constexpr int c_num_face_scan_ptrs = 6;

// Constants contained in the custody object.
constexpr uint32_t c_gaia_type_custody = 7u;
constexpr int c_parent_custodian_parent = 0;
constexpr int c_next_custodian_custody = 1;
constexpr int c_parent_child_student = 2;
constexpr int c_next_child_custody = 3;
constexpr int c_num_custody_ptrs = 4;

// Constants contained in the student object.
constexpr uint32_t c_gaia_type_student = 6u;
constexpr int c_parent_student_identity_person = 0;
constexpr int c_next_student_identity_student = 1;
constexpr int c_first_child_custody = 2;
constexpr int c_first_student_registration = 3;
constexpr int c_num_student_ptrs = 4;

// Constants contained in the parent object.
constexpr uint32_t c_gaia_type_parent = 5u;
constexpr int c_parent_parent_identity_person = 0;
constexpr int c_next_parent_identity_parent = 1;
constexpr int c_first_custodian_custody = 2;
constexpr int c_num_parent_ptrs = 3;

// Constants contained in the staff object.
constexpr uint32_t c_gaia_type_staff = 4u;
constexpr int c_parent_staff_identity_person = 0;
constexpr int c_next_staff_identity_staff = 1;
constexpr int c_first_teacher_event = 2;
constexpr int c_num_staff_ptrs = 3;

// Constants contained in the building object.
constexpr uint32_t c_gaia_type_building = 3u;
constexpr int c_first_location_face_scan = 0;
constexpr int c_first_building_room = 1;
constexpr int c_num_building_ptrs = 2;

// Constants contained in the stranger object.
constexpr uint32_t c_gaia_type_stranger = 2u;
constexpr int c_first_stranger_owner_face_scan = 0;
constexpr int c_num_stranger_ptrs = 1;

// Constants contained in the person object.
constexpr uint32_t c_gaia_type_person = 1u;
constexpr int c_first_staff_identity_staff = 0;
constexpr int c_first_parent_identity_parent = 1;
constexpr int c_first_student_identity_student = 2;
constexpr int c_first_owner_face_scan = 3;
constexpr int c_num_person_ptrs = 4;

struct registration_t;
struct event_t;
struct room_t;
struct face_scan_t;
struct custody_t;
struct student_t;
struct parent_t;
struct staff_t;
struct building_t;
struct stranger_t;
struct person_t;

typedef gaia::direct_access::reference_chain_container_t<person_t, staff_t, c_parent_staff_identity_person, c_first_staff_identity_staff, c_next_staff_identity_staff> staff_identity_staff_list_t;
typedef gaia::direct_access::reference_chain_container_t<person_t, parent_t, c_parent_parent_identity_person, c_first_parent_identity_parent, c_next_parent_identity_parent> parent_identity_parent_list_t;
typedef gaia::direct_access::reference_chain_container_t<person_t, student_t, c_parent_student_identity_person, c_first_student_identity_student, c_next_student_identity_student> student_identity_student_list_t;
typedef gaia::direct_access::reference_chain_container_t<person_t, face_scan_t, c_parent_owner_person, c_first_owner_face_scan, c_next_owner_face_scan> owner_face_scan_list_t;
typedef gaia::direct_access::gaia_writer_t<c_gaia_type_person, person_t, person, personT, c_num_person_ptrs> person_writer;
struct person_t : public gaia::direct_access::gaia_object_t<c_gaia_type_person, person_t, person, personT, c_num_person_ptrs> {
    person_t() : gaia_object_t("person_t") {}
    const char* first_name() const {return GET_STR(first_name);}
    const char* last_name() const {return GET_STR(last_name);}
    uint32_t birthdate() const {return GET(birthdate);}
    uint64_t face_signature() const {return GET(face_signature);}
    using gaia_object_t::insert_row;
    static gaia::common::gaia_id_t insert_row(const char* first_name, const char* last_name, uint32_t birthdate, uint64_t face_signature) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(CreatepersonDirect(b, first_name, last_name, birthdate, face_signature));
        return gaia_object_t::insert_row(b);
    }
    static gaia::direct_access::gaia_container_t<c_gaia_type_person, person_t>& list() {
        static gaia::direct_access::gaia_container_t<c_gaia_type_person, person_t> list;
        return list;
    }
    staff_identity_staff_list_t staff_identity_staff_list() {
        return staff_identity_staff_list_t(gaia_id());
    }
    parent_identity_parent_list_t parent_identity_parent_list() {
        return parent_identity_parent_list_t(gaia_id());
    }
    student_identity_student_list_t student_identity_student_list() {
        return student_identity_student_list_t(gaia_id());
    }
    owner_face_scan_list_t owner_face_scan_list() {
        return owner_face_scan_list_t(gaia_id());
    }
private:
    friend struct gaia_object_t<c_gaia_type_person, person_t, person, personT, c_num_person_ptrs>;
    explicit person_t(gaia::common::gaia_id_t id) : gaia_object_t(id, "person_t") {}
};

typedef gaia::direct_access::reference_chain_container_t<stranger_t, face_scan_t, c_parent_stranger_owner_stranger, c_first_stranger_owner_face_scan, c_next_stranger_owner_face_scan> stranger_owner_face_scan_list_t;
typedef gaia::direct_access::gaia_writer_t<c_gaia_type_stranger, stranger_t, stranger, strangerT, c_num_stranger_ptrs> stranger_writer;
struct stranger_t : public gaia::direct_access::gaia_object_t<c_gaia_type_stranger, stranger_t, stranger, strangerT, c_num_stranger_ptrs> {
    stranger_t() : gaia_object_t("stranger_t") {}
    uint32_t first_scan() const {return GET(first_scan);}
    uint64_t face_signature() const {return GET(face_signature);}
    uint32_t scan_count() const {return GET(scan_count);}
    using gaia_object_t::insert_row;
    static gaia::common::gaia_id_t insert_row(uint32_t first_scan, uint64_t face_signature, uint32_t scan_count) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(Createstranger(b, first_scan, face_signature, scan_count));
        return gaia_object_t::insert_row(b);
    }
    static gaia::direct_access::gaia_container_t<c_gaia_type_stranger, stranger_t>& list() {
        static gaia::direct_access::gaia_container_t<c_gaia_type_stranger, stranger_t> list;
        return list;
    }
    stranger_owner_face_scan_list_t stranger_owner_face_scan_list() {
        return stranger_owner_face_scan_list_t(gaia_id());
    }
private:
    friend struct gaia_object_t<c_gaia_type_stranger, stranger_t, stranger, strangerT, c_num_stranger_ptrs>;
    explicit stranger_t(gaia::common::gaia_id_t id) : gaia_object_t(id, "stranger_t") {}
};

typedef gaia::direct_access::reference_chain_container_t<building_t, face_scan_t, c_parent_location_building, c_first_location_face_scan, c_next_location_face_scan> location_face_scan_list_t;
typedef gaia::direct_access::reference_chain_container_t<building_t, room_t, c_parent_building_building, c_first_building_room, c_next_building_room> building_room_list_t;
typedef gaia::direct_access::gaia_writer_t<c_gaia_type_building, building_t, building, buildingT, c_num_building_ptrs> building_writer;
struct building_t : public gaia::direct_access::gaia_object_t<c_gaia_type_building, building_t, building, buildingT, c_num_building_ptrs> {
    building_t() : gaia_object_t("building_t") {}
    const char* name() const {return GET_STR(name);}
    bool door_closed() const {return GET(door_closed);}
    using gaia_object_t::insert_row;
    static gaia::common::gaia_id_t insert_row(const char* name, bool door_closed) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(CreatebuildingDirect(b, name, door_closed));
        return gaia_object_t::insert_row(b);
    }
    static gaia::direct_access::gaia_container_t<c_gaia_type_building, building_t>& list() {
        static gaia::direct_access::gaia_container_t<c_gaia_type_building, building_t> list;
        return list;
    }
    location_face_scan_list_t location_face_scan_list() {
        return location_face_scan_list_t(gaia_id());
    }
    building_room_list_t building_room_list() {
        return building_room_list_t(gaia_id());
    }
private:
    friend struct gaia_object_t<c_gaia_type_building, building_t, building, buildingT, c_num_building_ptrs>;
    explicit building_t(gaia::common::gaia_id_t id) : gaia_object_t(id, "building_t") {}
};

typedef gaia::direct_access::reference_chain_container_t<staff_t, event_t, c_parent_teacher_staff, c_first_teacher_event, c_next_teacher_event> teacher_event_list_t;
typedef gaia::direct_access::gaia_writer_t<c_gaia_type_staff, staff_t, staff, staffT, c_num_staff_ptrs> staff_writer;
struct staff_t : public gaia::direct_access::gaia_object_t<c_gaia_type_staff, staff_t, staff, staffT, c_num_staff_ptrs> {
    staff_t() : gaia_object_t("staff_t") {}
    uint32_t hired_date() const {return GET(hired_date);}
    using gaia_object_t::insert_row;
    static gaia::common::gaia_id_t insert_row(uint32_t hired_date) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(Createstaff(b, hired_date));
        return gaia_object_t::insert_row(b);
    }
    person_t staff_identity_person() {
        return person_t::get(this->references()[c_parent_staff_identity_person]);
    }
    static gaia::direct_access::gaia_container_t<c_gaia_type_staff, staff_t>& list() {
        static gaia::direct_access::gaia_container_t<c_gaia_type_staff, staff_t> list;
        return list;
    }
    teacher_event_list_t teacher_event_list() {
        return teacher_event_list_t(gaia_id());
    }
private:
    friend struct gaia_object_t<c_gaia_type_staff, staff_t, staff, staffT, c_num_staff_ptrs>;
    explicit staff_t(gaia::common::gaia_id_t id) : gaia_object_t(id, "staff_t") {}
};

typedef gaia::direct_access::reference_chain_container_t<parent_t, custody_t, c_parent_custodian_parent, c_first_custodian_custody, c_next_custodian_custody> custodian_custody_list_t;
typedef gaia::direct_access::gaia_writer_t<c_gaia_type_parent, parent_t, parent, parentT, c_num_parent_ptrs> parent_writer;
struct parent_t : public gaia::direct_access::gaia_object_t<c_gaia_type_parent, parent_t, parent, parentT, c_num_parent_ptrs> {
    parent_t() : gaia_object_t("parent_t") {}
    using gaia_object_t::insert_row;
    static gaia::common::gaia_id_t insert_row() {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(Createparent(b));
        return gaia_object_t::insert_row(b);
    }
    person_t parent_identity_person() {
        return person_t::get(this->references()[c_parent_parent_identity_person]);
    }
    static gaia::direct_access::gaia_container_t<c_gaia_type_parent, parent_t>& list() {
        static gaia::direct_access::gaia_container_t<c_gaia_type_parent, parent_t> list;
        return list;
    }
    custodian_custody_list_t custodian_custody_list() {
        return custodian_custody_list_t(gaia_id());
    }
private:
    friend struct gaia_object_t<c_gaia_type_parent, parent_t, parent, parentT, c_num_parent_ptrs>;
    explicit parent_t(gaia::common::gaia_id_t id) : gaia_object_t(id, "parent_t") {}
};

typedef gaia::direct_access::reference_chain_container_t<student_t, custody_t, c_parent_child_student, c_first_child_custody, c_next_child_custody> child_custody_list_t;
typedef gaia::direct_access::reference_chain_container_t<student_t, registration_t, c_parent_student_student, c_first_student_registration, c_next_student_registration> student_registration_list_t;
typedef gaia::direct_access::gaia_writer_t<c_gaia_type_student, student_t, student, studentT, c_num_student_ptrs> student_writer;
struct student_t : public gaia::direct_access::gaia_object_t<c_gaia_type_student, student_t, student, studentT, c_num_student_ptrs> {
    student_t() : gaia_object_t("student_t") {}
    using gaia_object_t::insert_row;
    static gaia::common::gaia_id_t insert_row() {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(Createstudent(b));
        return gaia_object_t::insert_row(b);
    }
    person_t student_identity_person() {
        return person_t::get(this->references()[c_parent_student_identity_person]);
    }
    static gaia::direct_access::gaia_container_t<c_gaia_type_student, student_t>& list() {
        static gaia::direct_access::gaia_container_t<c_gaia_type_student, student_t> list;
        return list;
    }
    child_custody_list_t child_custody_list() {
        return child_custody_list_t(gaia_id());
    }
    student_registration_list_t student_registration_list() {
        return student_registration_list_t(gaia_id());
    }
private:
    friend struct gaia_object_t<c_gaia_type_student, student_t, student, studentT, c_num_student_ptrs>;
    explicit student_t(gaia::common::gaia_id_t id) : gaia_object_t(id, "student_t") {}
};

typedef gaia::direct_access::gaia_writer_t<c_gaia_type_custody, custody_t, custody, custodyT, c_num_custody_ptrs> custody_writer;
struct custody_t : public gaia::direct_access::gaia_object_t<c_gaia_type_custody, custody_t, custody, custodyT, c_num_custody_ptrs> {
    custody_t() : gaia_object_t("custody_t") {}
    uint8_t relationship() const {return GET(relationship);}
    using gaia_object_t::insert_row;
    static gaia::common::gaia_id_t insert_row(uint8_t relationship) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(Createcustody(b, relationship));
        return gaia_object_t::insert_row(b);
    }
    parent_t custodian_parent() {
        return parent_t::get(this->references()[c_parent_custodian_parent]);
    }
    student_t child_student() {
        return student_t::get(this->references()[c_parent_child_student]);
    }
    static gaia::direct_access::gaia_container_t<c_gaia_type_custody, custody_t>& list() {
        static gaia::direct_access::gaia_container_t<c_gaia_type_custody, custody_t> list;
        return list;
    }
private:
    friend struct gaia_object_t<c_gaia_type_custody, custody_t, custody, custodyT, c_num_custody_ptrs>;
    explicit custody_t(gaia::common::gaia_id_t id) : gaia_object_t(id, "custody_t") {}
};

typedef gaia::direct_access::gaia_writer_t<c_gaia_type_face_scan, face_scan_t, face_scan, face_scanT, c_num_face_scan_ptrs> face_scan_writer;
struct face_scan_t : public gaia::direct_access::gaia_object_t<c_gaia_type_face_scan, face_scan_t, face_scan, face_scanT, c_num_face_scan_ptrs> {
    face_scan_t() : gaia_object_t("face_scan_t") {}
    uint64_t signature() const {return GET(signature);}
    uint32_t time() const {return GET(time);}
    bool recognized() const {return GET(recognized);}
    using gaia_object_t::insert_row;
    static gaia::common::gaia_id_t insert_row(uint64_t signature, uint32_t time, bool recognized) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(Createface_scan(b, signature, time, recognized));
        return gaia_object_t::insert_row(b);
    }
    building_t location_building() {
        return building_t::get(this->references()[c_parent_location_building]);
    }
    person_t owner_person() {
        return person_t::get(this->references()[c_parent_owner_person]);
    }
    stranger_t stranger_owner_stranger() {
        return stranger_t::get(this->references()[c_parent_stranger_owner_stranger]);
    }
    static gaia::direct_access::gaia_container_t<c_gaia_type_face_scan, face_scan_t>& list() {
        static gaia::direct_access::gaia_container_t<c_gaia_type_face_scan, face_scan_t> list;
        return list;
    }
private:
    friend struct gaia_object_t<c_gaia_type_face_scan, face_scan_t, face_scan, face_scanT, c_num_face_scan_ptrs>;
    explicit face_scan_t(gaia::common::gaia_id_t id) : gaia_object_t(id, "face_scan_t") {}
};

typedef gaia::direct_access::reference_chain_container_t<room_t, event_t, c_parent_venue_room, c_first_venue_event, c_next_venue_event> venue_event_list_t;
typedef gaia::direct_access::gaia_writer_t<c_gaia_type_room, room_t, room, roomT, c_num_room_ptrs> room_writer;
struct room_t : public gaia::direct_access::gaia_object_t<c_gaia_type_room, room_t, room, roomT, c_num_room_ptrs> {
    room_t() : gaia_object_t("room_t") {}
    const char* name() const {return GET_STR(name);}
    const char* number() const {return GET_STR(number);}
    const char* floor() const {return GET_STR(floor);}
    uint32_t capacity() const {return GET(capacity);}
    using gaia_object_t::insert_row;
    static gaia::common::gaia_id_t insert_row(const char* name, const char* number, const char* floor, uint32_t capacity) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(CreateroomDirect(b, name, number, floor, capacity));
        return gaia_object_t::insert_row(b);
    }
    building_t building_building() {
        return building_t::get(this->references()[c_parent_building_building]);
    }
    static gaia::direct_access::gaia_container_t<c_gaia_type_room, room_t>& list() {
        static gaia::direct_access::gaia_container_t<c_gaia_type_room, room_t> list;
        return list;
    }
    venue_event_list_t venue_event_list() {
        return venue_event_list_t(gaia_id());
    }
private:
    friend struct gaia_object_t<c_gaia_type_room, room_t, room, roomT, c_num_room_ptrs>;
    explicit room_t(gaia::common::gaia_id_t id) : gaia_object_t(id, "room_t") {}
};

typedef gaia::direct_access::reference_chain_container_t<event_t, registration_t, c_parent_event_event, c_first_event_registration, c_next_event_registration> event_registration_list_t;
typedef gaia::direct_access::gaia_writer_t<c_gaia_type_event, event_t, event, eventT, c_num_event_ptrs> event_writer;
struct event_t : public gaia::direct_access::gaia_object_t<c_gaia_type_event, event_t, event, eventT, c_num_event_ptrs> {
    event_t() : gaia_object_t("event_t") {}
    const char* name() const {return GET_STR(name);}
    uint32_t start_time() const {return GET(start_time);}
    uint32_t end_time() const {return GET(end_time);}
    using gaia_object_t::insert_row;
    static gaia::common::gaia_id_t insert_row(const char* name, uint32_t start_time, uint32_t end_time) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(CreateeventDirect(b, name, start_time, end_time));
        return gaia_object_t::insert_row(b);
    }
    staff_t teacher_staff() {
        return staff_t::get(this->references()[c_parent_teacher_staff]);
    }
    room_t venue_room() {
        return room_t::get(this->references()[c_parent_venue_room]);
    }
    static gaia::direct_access::gaia_container_t<c_gaia_type_event, event_t>& list() {
        static gaia::direct_access::gaia_container_t<c_gaia_type_event, event_t> list;
        return list;
    }
    event_registration_list_t event_registration_list() {
        return event_registration_list_t(gaia_id());
    }
private:
    friend struct gaia_object_t<c_gaia_type_event, event_t, event, eventT, c_num_event_ptrs>;
    explicit event_t(gaia::common::gaia_id_t id) : gaia_object_t(id, "event_t") {}
};

typedef gaia::direct_access::gaia_writer_t<c_gaia_type_registration, registration_t, registration, registrationT, c_num_registration_ptrs> registration_writer;
struct registration_t : public gaia::direct_access::gaia_object_t<c_gaia_type_registration, registration_t, registration, registrationT, c_num_registration_ptrs> {
    registration_t() : gaia_object_t("registration_t") {}
    uint32_t time() const {return GET(time);}
    using gaia_object_t::insert_row;
    static gaia::common::gaia_id_t insert_row(uint32_t time) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(Createregistration(b, time));
        return gaia_object_t::insert_row(b);
    }
    student_t student_student() {
        return student_t::get(this->references()[c_parent_student_student]);
    }
    event_t event_event() {
        return event_t::get(this->references()[c_parent_event_event]);
    }
    static gaia::direct_access::gaia_container_t<c_gaia_type_registration, registration_t>& list() {
        static gaia::direct_access::gaia_container_t<c_gaia_type_registration, registration_t> list;
        return list;
    }
private:
    friend struct gaia_object_t<c_gaia_type_registration, registration_t, registration, registrationT, c_num_registration_ptrs>;
    explicit registration_t(gaia::common::gaia_id_t id) : gaia_object_t(id, "registration_t") {}
};

}  // namespace school
}  // namespace gaia

#endif  // GAIA_GENERATED_school_H_

