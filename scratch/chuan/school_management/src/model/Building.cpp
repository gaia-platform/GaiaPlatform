/**
 * Gaia School
 * School management system REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Building.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Building::Building() {
  m_Id = 0L;
  m_IdIsSet = false;
  m_Name = "";
  m_NameIsSet = false;
  m_Open = false;
  m_OpenIsSet = false;
  m_RoomsIsSet = false;
}

Building::~Building() {}

void Building::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const Building &o) {
  j = nlohmann::json();
  if (o.idIsSet())
    j["id"] = o.m_Id;
  if (o.nameIsSet())
    j["name"] = o.m_Name;
  if (o.openIsSet())
    j["open"] = o.m_Open;
  if (o.roomsIsSet() || !o.m_Rooms.empty())
    j["rooms"] = o.m_Rooms;
}

void from_json(const nlohmann::json &j, Building &o) {
  if (j.find("id") != j.end()) {
    j.at("id").get_to(o.m_Id);
    o.m_IdIsSet = true;
  }
  if (j.find("name") != j.end()) {
    j.at("name").get_to(o.m_Name);
    o.m_NameIsSet = true;
  }
  if (j.find("open") != j.end()) {
    j.at("open").get_to(o.m_Open);
    o.m_OpenIsSet = true;
  }
  if (j.find("rooms") != j.end()) {
    j.at("rooms").get_to(o.m_Rooms);
    o.m_RoomsIsSet = true;
  }
}

int64_t Building::getId() const { return m_Id; }
void Building::setId(int64_t const value) {
  m_Id = value;
  m_IdIsSet = true;
}
bool Building::idIsSet() const { return m_IdIsSet; }
void Building::unsetId() { m_IdIsSet = false; }
std::string Building::getName() const { return m_Name; }
void Building::setName(std::string const &value) {
  m_Name = value;
  m_NameIsSet = true;
}
bool Building::nameIsSet() const { return m_NameIsSet; }
void Building::unsetName() { m_NameIsSet = false; }
bool Building::isOpen() const { return m_Open; }
void Building::setOpen(bool const value) {
  m_Open = value;
  m_OpenIsSet = true;
}
bool Building::openIsSet() const { return m_OpenIsSet; }
void Building::unsetOpen() { m_OpenIsSet = false; }
std::vector<Room> &Building::getRooms() { return m_Rooms; }
void Building::setRooms(std::vector<Room> const &value) {
  m_Rooms = value;
  m_RoomsIsSet = true;
}
bool Building::roomsIsSet() const { return m_RoomsIsSet; }
void Building::unsetRooms() { m_RoomsIsSet = false; }

} // namespace model
} // namespace server
} // namespace openapitools
} // namespace org
