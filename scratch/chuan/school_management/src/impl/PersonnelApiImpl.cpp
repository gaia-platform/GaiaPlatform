/**
 * Gaia School
 * School management system REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PersonnelApiImpl.h"

#include "gaia/common.hpp"
#include "gaia/direct_access/auto_transaction.hpp"
#include "gaia/exception.hpp"
#include "gaia_school.h"

#include "scope_guard.hpp"

#include <chrono>
#include <random>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

enum class CustodianChildRelationship : uint8_t {
  unknown = 0,
  mother = 1,
  father = 2,
};

PersonnelApiImpl::PersonnelApiImpl(std::shared_ptr<Pistache::Rest::Router> rtr)
    : PersonnelApi(rtr) {}

void PersonnelApiImpl::add_person(const Person &person,
                                  Pistache::Http::ResponseWriter &response) {
  gaia::db::begin_session();
  auto db_session_cleanup =
      sg::make_scope_guard([]() { gaia::db::end_session(); });
  response.headers().add<Pistache::Http::Header::ContentType>(
      MIME(Application, Json));
  nlohmann::json j;
  auto personId = gaia::common::c_invalid_gaia_id;
  {
    gaia::direct_access::auto_transaction_t txn;
    gaia::school::person_writer writer;
    if (person.firstNameIsSet()) {
      writer.first_name = person.getFirstName().c_str();
    }
    if (person.lastNameIsSet()) {
      writer.last_name = person.getLastName().c_str();
    }
    if (person.birthdateIsSet()) {
      writer.birthdate = person.getBirthdate();
    }
    if (person.faceSignatureIsSet()) {
      writer.face_signature = person.getFaceSignature();
    } else {
      std::default_random_engine generator(
          std::chrono::system_clock::now().time_since_epoch().count());
      std::uniform_int_distribution<int32_t> distribution;
      writer.face_signature = distribution(generator);
    }
    personId = writer.insert_row();
    if (!person.roleIsSet()) {
      j["what"] = "No role.";
      response.send(Pistache::Http::Code::Bad_Request, j.dump());
      return;
    }
    if (person.getRole() == "staff") {
      gaia::school::staff_writer staffWriter;
      if (person.hiredDateIsSet()) {
        staffWriter.hired_date = person.getHiredDate();
      }
      auto staffId = staffWriter.insert_row();
      gaia::school::person_t::get(personId).staff_identity_staff_list().insert(
          staffId);
      j["staffId"] = staffId;
    } else if (person.getRole() == "student") {
      gaia::school::student_writer studentWriter;
      auto studentId = studentWriter.insert_row();
      gaia::school::person_t::get(personId)
          .student_identity_student_list()
          .insert(studentId);
      j["studentId"] = studentId;
    } else if (person.getRole() == "parent") {
      if (!person.studentIdIsSet()) {
        j["what"] = "No student id.";
        response.send(Pistache::Http::Code::Bad_Request, j.dump());
        return;
      }
      try {
        auto child = gaia::school::student_t::get(person.getStudentId());

        gaia::school::parent_writer parentWriter;
        auto parentId = parentWriter.insert_row();
        gaia::school::person_t::get(personId)
            .parent_identity_parent_list()
            .insert(parentId);

        gaia::school::custody_writer custodyWriter;
        if (person.getRelationshipToStudent() == "father") {
          custodyWriter.relationship =
              static_cast<uint8_t>(CustodianChildRelationship::father);
        } else if (person.getRelationshipToStudent() == "mother") {
          custodyWriter.relationship =
              static_cast<uint8_t>(CustodianChildRelationship::mother);
        } else {
          custodyWriter.relationship =
              static_cast<uint8_t>(CustodianChildRelationship::unknown);
        }
        auto custodyId = custodyWriter.insert_row();
        gaia::school::parent_t::get(parentId).custodian_custody_list().insert(
            custodyId);
        child.child_custody_list().insert(custodyId);

        j["parentId"] = parentId;
        j["custodyId"] = custodyId;
      } catch (const gaia::common::gaia_exception &e) {
        j["what"] = e.what();
        response.send(Pistache::Http::Code::Bad_Request, j.dump());
        return;
      }
    } else {
      j["what"] = "Invalid role: " + person.getRole() + ".";
      response.send(Pistache::Http::Code::Bad_Request, j.dump());
      return;
    }
    txn.commit();
  }
  j["id"] = personId;
  response.send(Pistache::Http::Code::Ok, j.dump());
}

void PersonnelApiImpl::delete_student(
    const int64_t &studentId, Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

void PersonnelApiImpl::find_people_by_role(
    const Pistache::Optional<std::string> &role,
    Pistache::Http::ResponseWriter &response) {
  response.headers().add<Pistache::Http::Header::ContentType>(
      MIME(Application, Json));
  nlohmann::json j;
  if (role.isEmpty()) {
    j["what"] = "No role.";
    response.send(Pistache::Http::Code::Bad_Request, j.dump());
    return;
  }
  gaia::db::begin_session();
  auto db_session_cleanup =
      sg::make_scope_guard([]() { gaia::db::end_session(); });
  {
    gaia::direct_access::auto_transaction_t txn;
    if (role.get() == "staff") {
      for (auto &staff : gaia::school::staff_t::list()) {
        Person p;
        p.setStaffId(staff.gaia_id());
        p.setId(staff.staff_identity_person().gaia_id());
        p.setFirstName(staff.staff_identity_person().first_name());
        p.setLastName(staff.staff_identity_person().last_name());
        p.setBirthdate(staff.staff_identity_person().birthdate());
        p.setFaceSignature(staff.staff_identity_person().face_signature());
        p.setHiredDate(staff.hired_date());
        j.push_back(p);
      }
    } else if (role.get() == "student") {
      for (auto &student : gaia::school::student_t::list()) {
        Person p;
        p.setStudentId(student.gaia_id());
        p.setId(student.student_identity_person().gaia_id());
        p.setFirstName(student.student_identity_person().first_name());
        p.setLastName(student.student_identity_person().last_name());
        p.setBirthdate(student.student_identity_person().birthdate());
        p.setFaceSignature(student.student_identity_person().face_signature());
        j.push_back(p);
      }
    } else if (role.get() == "parent") {
      for (auto &parent : gaia::school::parent_t::list()) {
        Person p;
        p.setParentId(parent.gaia_id());
        p.setId(parent.parent_identity_person().gaia_id());
        p.setFirstName(parent.parent_identity_person().first_name());
        p.setLastName(parent.parent_identity_person().last_name());
        p.setBirthdate(parent.parent_identity_person().birthdate());
        p.setFaceSignature(parent.parent_identity_person().face_signature());
        j.push_back(p);
      }
    } else {
      j["what"] = "Invalid role: " + role.get() + ".";
      response.send(Pistache::Http::Code::Bad_Request, j.dump());
      return;
    }
    txn.commit();
  }
  response.send(Pistache::Http::Code::Ok, j.dump());
}

void PersonnelApiImpl::get_student_by_id(
    const int64_t &studentId, Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

void PersonnelApiImpl::list_people(Pistache::Http::ResponseWriter &response) {
  gaia::db::begin_session();
  auto db_session_cleanup =
      sg::make_scope_guard([]() { gaia::db::end_session(); });
  nlohmann::json j;
  {
    gaia::direct_access::auto_transaction_t txn;
    for (auto &person : gaia::school::person_t::list()) {
      Person p;
      p.setId(person.gaia_id());
      p.setFirstName(person.first_name());
      p.setLastName(person.last_name());
      p.setBirthdate(person.birthdate());
      p.setFaceSignature(person.face_signature());
      j.push_back(p);
    }
    txn.commit();
  }
  response.headers().add<Pistache::Http::Header::ContentType>(
      MIME(Application, Json));
  response.send(Pistache::Http::Code::Ok, j.dump());
}

void PersonnelApiImpl::update_person(const Person &person,
                                     Pistache::Http::ResponseWriter &response) {
  response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
