/**
 * Gaia School
 * School management system REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PersonnelApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

PersonnelApi::PersonnelApi(std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void PersonnelApi::init() { setupRoutes(); }

void PersonnelApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Post(*router, base + "/person",
               Routes::bind(&PersonnelApi::add_person_handler, this));
  Routes::Delete(*router, base + "/student/:studentId",
                 Routes::bind(&PersonnelApi::delete_student_handler, this));
  Routes::Get(*router, base + "/people/findByRole",
              Routes::bind(&PersonnelApi::find_people_by_role_handler, this));
  Routes::Get(*router, base + "/student/:studentId",
              Routes::bind(&PersonnelApi::get_student_by_id_handler, this));
  Routes::Get(*router, base + "/people",
              Routes::bind(&PersonnelApi::list_people_handler, this));
  Routes::Put(*router, base + "/person",
              Routes::bind(&PersonnelApi::update_person_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&PersonnelApi::personnel_api_default_handler, this));
}

void PersonnelApi::add_person_handler(const Pistache::Rest::Request &request,
                                      Pistache::Http::ResponseWriter response) {

  // Getting the body param

  Person person;

  try {
    nlohmann::json::parse(request.body()).get_to(person);
    this->add_person(person, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void PersonnelApi::delete_student_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto studentId = request.param(":studentId").as<int64_t>();

  try {
    this->delete_student(studentId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void PersonnelApi::find_people_by_role_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {

  // Getting the query params
  auto roleQuery = request.query().get("role");
  Pistache::Optional<std::string> role;
  if (!roleQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(roleQuery.get(), valueQuery_instance)) {
      role = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->find_people_by_role(role, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void PersonnelApi::get_student_by_id_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto studentId = request.param(":studentId").as<int64_t>();

  try {
    this->get_student_by_id(studentId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void PersonnelApi::list_people_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {

  try {
    this->list_people(response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void PersonnelApi::update_person_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {

  // Getting the body param

  Person person;

  try {
    nlohmann::json::parse(request.body()).get_to(person);
    this->update_person(person, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void PersonnelApi::personnel_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
