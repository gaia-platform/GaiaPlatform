/**
 * Gaia School
 * School management system REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EventApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

EventApi::EventApi(std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void EventApi::init() { setupRoutes(); }

void EventApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Post(*router, base + "/event",
               Routes::bind(&EventApi::add_event_handler, this));
  Routes::Post(*router, base + "/event/:eventId/participant",
               Routes::bind(&EventApi::add_event_participant_handler, this));
  Routes::Delete(*router, base + "/event/:eventId",
                 Routes::bind(&EventApi::delete_event_handler, this));
  Routes::Delete(*router, base + "/event/:eventId/participant/:studentId",
                 Routes::bind(&EventApi::drop_event_participant_handler, this));
  Routes::Get(*router, base + "/event/:eventId",
              Routes::bind(&EventApi::get_event_by_id_handler, this));
  Routes::Get(*router, base + "/event/:eventId/participant",
              Routes::bind(&EventApi::list_event_participant_handler, this));
  Routes::Get(*router, base + "/events",
              Routes::bind(&EventApi::list_events_handler, this));
  Routes::Put(*router, base + "/event",
              Routes::bind(&EventApi::update_event_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&EventApi::event_api_default_handler, this));
}

void EventApi::add_event_handler(const Pistache::Rest::Request &request,
                                 Pistache::Http::ResponseWriter response) {

  // Getting the body param

  Event event;

  try {
    nlohmann::json::parse(request.body()).get_to(event);
    this->add_event(event, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void EventApi::add_event_participant_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto eventId = request.param(":eventId").as<int64_t>();

  // Getting the body param
  std::vector<int64_t> requestBody;

  try {
    nlohmann::json::parse(request.body()).get_to(requestBody);
    this->add_event_participant(eventId, requestBody, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void EventApi::delete_event_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto eventId = request.param(":eventId").as<int64_t>();

  try {
    this->delete_event(eventId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void EventApi::drop_event_participant_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto eventId = request.param(":eventId").as<int64_t>();
  auto studentId = request.param(":studentId").as<int64_t>();

  try {
    this->drop_event_participant(eventId, studentId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void EventApi::get_event_by_id_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto eventId = request.param(":eventId").as<int64_t>();

  try {
    this->get_event_by_id(eventId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void EventApi::list_event_participant_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto eventId = request.param(":eventId").as<int64_t>();

  try {
    this->list_event_participant(eventId, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void EventApi::list_events_handler(const Pistache::Rest::Request &,
                                   Pistache::Http::ResponseWriter response) {

  try {
    this->list_events(response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void EventApi::update_event_handler(const Pistache::Rest::Request &request,
                                    Pistache::Http::ResponseWriter response) {

  // Getting the body param

  Event event;

  try {
    nlohmann::json::parse(request.body()).get_to(event);
    this->update_event(event, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void EventApi::event_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace api
} // namespace server
} // namespace openapitools
} // namespace org
