1) not knowing where to host the SDK
2) docker file that created our SDK, the environment
3) set machine your up for it.

Stay away from gdev (do not recommend using).
Not used in most recent version of Docker.
See reference, go into production gdev docker file

Run commands are useful
Absolutely stay away from multistage self

Look at Wayne's PR
PR 395

Put downloads in [web section], gdev will pull down tools to do that (wget)
How to avoid caching the SDK?  Purge cache,
1) text of docker file changes (so change the url): pass in arg to docker file which requires you pass in to docker build, you can pass in version number of SDK, and we upgrade the version
2) docker has a build context, subtree of folders under that are a build context, docker will hash group of files in docker file and the hash changes.

Cameron:  In gdev, I use wget and I installed it?  I don't think I had to do that 
With Docker, still common to get file from web:  called Add (look at add command), 

Wayne:  used docker file generated by Simone.  "It just works".  Different than what gdev generated.
- clang
- cmake
- python 
- tar

What Wayne does:
- mount volume into container
- apt install SDK
- go from there

How to do this in the teamcity environment
- Docker run
- And another using ssh, for IDEs and remote debugging.

Mounts files in ctest, gdev, flags enabled, ctest
ctest command build stage in TC and do same thing on my own computer.
log-level DEBUG

don't use the cache - look at no_cache, docker build, flag for no_cache
use sh for CMD
use sh for teamcity build
mount drives to copy results

docker build --no-cache

TeamCity
- add trigger when build completes
- ensure build fails on incubator or hellow
- add back snapshot dependency between GaiaRelease and SDK
- add ubuntu_18i

--mounts, created on the host
-- outputs get put on host


==== hack flag to parse output of incubator
{
    # Input expects the values of the following columns:
    #
    # 1:sched 2:invoc 3:pend 4:aband 5:retry 6:excep
    # Example: 32 32 0 0 0 0
    #
    # These are extracted from the gaia_stats_log file in three steps:
    # 1) tail: get the last data row written to the stats file.
    # 2) tr: sqeeze all the spaces into a single space (compress the columns)
    # 3) cut: extract the 6 columns above where the delimeter between columns is a space.
    # Example:  tail -n 1 gaia_stats.log | tr -s ' ' ' ' | cut -d ' ' -f 8-13
    #
    # Check the following:
    # 1) At least one rule was scheduled (Example: 32)
    # 2) The number of rules scheduled was equal to the number of rules invoked
    # 3) No rules were pending, abandoned, retried, or threw an exception.
    #
    # If all of these checks succeed, then print SUCCESS. Otherwise, print FAILED.
    #
    if ($1 != 0 && $2 == $1 && $3 == 0 && $4 == 0 && $5 == 0 && $6 == 0 )
        printf "SUCCESS\n"
    else
        printf "FAILED\n"
}