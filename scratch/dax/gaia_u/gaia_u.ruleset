#include <string.h>
#include "rule_helpers.hpp"
#include "data/data_helpers.hpp"

ruleset event_planner
{
    // Create an Event.
    // Requires:  Room <- register later?
    //  Requires: Building
    // Requires:  Staff <- register later
    //  Requires: Person
    {
        event_planner::log("Rule 1");
        if (Buildings.LastOperation == INSERT)
        {
            auto building = gaia::gaia_u::Buildings_t::get(Buildings.gaia_id());
            //my_func(building);
        }
    }

    {
        event_planner::log("Rule 2");
        if (DoorLocked)
        {
            DoorLocked = false;
        }
    }

    //
    // Cancel event involves removing the event from the Staff_t.Teacher_Events_list()
    // and the Rooms_Events_list.
    // Note that this is not currently possible if the event has any reference defined
    //
    {
        event_planner::log("Rule 3");
        if (Events.LastOperation == DELETE)
        {
            event_planner::cancel_event(Events.gaia_id());
        }
    }

    // When a new room is added then adjust the restricted capacity
    // according to the restriction
    {
        event_planner::log("Rule 4");
        if (Rooms.LastOperation == INSERT)
        {
            RestrictedCapacity = @Capacity * (PercentFull / 100.0);
        }
    }

    // If a restriction to PercentFull changes, then update all the rooms Restricted Capacity
    // capacity.
    {
        event_planner::log("Rule 5");
        RestrictedCapacity = @Capacity * (PercentFull / 100.0);
    }

    // Overall algorithm.
    // 1) restriction changes
    // 2) capacity changes for every room
    // 3) for each room, see what events it is booked for
    // 4) if the new capacity is less than the enrollment, attempt to change the location
    // 4.a) update the event and registrations
    // 5) if you cannot change the location, then change the date
    // 5.a) update the event and registrations

    // If the room capacity has changed and is less than the enrollment then remove the room
    {
        event_planner::log("Rule 6");
        // GAIAPLAT-546:  should not have to annotate non-active fields with '@'
        if (RestrictedCapacity < @Enrolled)
        {
            char buffer[128];
            sprintf(buffer, "Event '%s' has '%u' enrollments but the restricted capacity is '%u'.  Attempting to change location.",
                @Events.Name, @Enrolled, RestrictedCapacity);
            
            event_planner::log(buffer);
            //printf("DBG:  Setting ChangeLocation for event '%s'\n", @Events.Name);
            ChangeLocation = true;
        }
    }

    // If we needto change the location, go find a room that meets the
    // following criteria:
    // - RestrictedCapacity >= number of students enrolled in the event
    // - It is not already booked for another event
    //
    // Search for room in the same building first and then
    // expand to other rooms if required.
     {
        char buffer[128];
        event_planner::log("Rule 7");
        if (!ChangeLocation)
        {
            event_planner::log("!ChangeLocation", @Events.Name);
            return;
        }

        ChangeLocation = false;

        // If the room can hold the number of students enrolled then
        // then is no need find another room.
        if (@RestrictedCapacity >= @Enrolled)
        {
            event_planner::log("@RestrictedCapacity >= @Enrolled", @Events.Name);
            return;
        }

        sprintf(buffer,"ChangeLocation:  Event '%s' needs a new location because room '%s' doesn't have the capacity.",
            @Events.Name, @RoomName);
        event_planner::log(buffer);

        // Try to find a room that works in the same building
        auto event = gaia::gaia_u::Events_t::get(Events.gaia_id());
        auto this_room = event.Room_Rooms();
        gaia::gaia_u::Buildings_t this_building;

        // We may find a room that meets the capacity requirements but it is not
        // available on the date we need.  Remember this so that we can reschedule
        // the event to the room and then reschedule the event to a date when the
        // room is available.
        gaia::gaia_u::Rooms_t candidate_room;

        // Search for a room in the same building.
        if (this_room)
        {
            this_building = this_room.Buildings();
            for (auto& room : this_building.Rooms_list())
            {
                if (room == this_room)
                {
                    continue;
                }

                if (room.RestrictedCapacity() >= @Enrolled)
                {
                    if (event_planner::is_room_available(event, room))
                    {
                        event_planner::move_event_room(event, this_room, room);
                        // We are done!
                        return;
                    }

                    if (!candidate_room)
                    {
                        candidate_room = room;
                    }
                }
            }
        }

        // Couldn't find a room in the same building so look in other buildings.
        // Even if we found a candidate_room above we may find one that is available.
        for (auto building : gaia::gaia_u::Buildings_t::list())
        {
            if (building == this_building)
            {
                continue;
            }

            for (auto& room : building.Rooms_list())
            {
                if (room.RestrictedCapacity() >= @Enrolled)
                {
                    if (event_planner::is_room_available(event, room))
                    {
                        event_planner::move_event_room(event, this_room, room);
                        // We are done!
                        return;
                    }
                    if (!candidate_room)
                    {
                        candidate_room = room;
                    }
                }
            }
        }

        // If we have a candidate room it means we found a room that can fit the capacity
        // but not on the date we need.  Go ahead and move the room and then change the date.
        if (candidate_room)
        {
            event_planner::log("Found a room for event but need to reschedule ...", @Events.Name);
            event_planner::move_event_room(event, this_room, candidate_room);
            ChangeDate = true;
        }
        else
        {
            event_planner::log("Could not find a room for event.  Need to drop enrollments ...", @Events.Name);
            DropEnrollments = true;
        }
    }

    {
        char buffer[128];
        event_planner::log("Rule 8");
        if (!ChangeDate)
        {
            return;
        }

        ChangeDate = false;
        time_t old_date = @Date;
        auto date_info = localtime(&old_date);
        auto event = gaia::gaia_u::Events_t::get(Events.gaia_id());
        auto this_room = event.Room_Rooms();
              
        // Just pick the next week day until there is no conflict
        while (true)
        {
            date_info->tm_mday++;
            time_t new_date =  mktime(date_info);
            if (event_planner::is_room_available(new_date, this_room))
            {
                sprintf(buffer, "Changing date for event '%s' from '%s' to '%s'", @Events.Name,
                    event_planner::convert_date(@Date).c_str(),
                    event_planner::convert_date(new_date).c_str());
                event_planner::log(buffer);
                Date = new_date;
                break;
            }
        }
    }

    // A new date was set so we need to update the regsistration infomration
    // 
    {
        event_planner::log("Rule 9");
        if (Date != 0)
        {
            printf("[Date] %s\n", @Events.Name);
            // Date changed so send email to students who have registered for the event.
        }
    }

    // We don't have a room anywhere on campus that can fit the number of enrollments so
    // we need to stop dropping enrollments
    {
        char buffer[128];
        event_planner::log("Rule 10");
        // Send out notifications to all those who have registered
        if (!DropEnrollments)
        {
            return;
        }
        DropEnrollments = false;
        event_planner::log("DropEnrollments", @Events.Name);

        // If the room size can accomadate the number of students enrolled
        // then we are done.
        if (@Enrolled <= @RestrictedCapacity)
        {
            return;
        }

        sprintf(buffer, "Dropping number of enrollments for event '%s' from '%u' to '%u'",
            @Events.Name, @Enrolled, @RestrictedCapacity);
        event_planner::log(buffer);

        // Drop the enrollments to match the capacity we have.
        Enrolled = @RestrictedCapacity;

        // Drop registrations on a first come, first serve basis.
        {
        }
    }

}
