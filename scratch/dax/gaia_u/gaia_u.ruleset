#include <string.h>
#include "rule_helpers.hpp"

ruleset event_planner
{
    // Create an Event.
    // Requires:  Room <- register later?
    //  Requires: Building
    // Requires:  Staff <- register later
    //  Requires: Person
    {
        if (Buildings.LastOperation == INSERT)
        {
            auto building = gaia::gaia_u::Buildings_t::get(Buildings.gaia_id());
            //my_func(building);
        }
    }

    {
        if (DoorLocked)
        {
            DoorLocked = false;
        }
    }

    //
    // Cancel event involves removing the event from the Staff_t.Teacher_Events_list()
    // and the Rooms_Events_list.
    // Note that this is not currently possible if the event has any reference defined
    //
    {
        if (Events.LastOperation == DELETE)
        {
            event_planner::cancel_event(Events.gaia_id());
        }
    }

    // When a new room is added then adjust the restricted capacity
    // according to the restriction
    {
        if (Rooms.LastOperation == INSERT)
        {
            auto restrictions = gaia::gaia_u::Restrictions_t::get_first();
            float percent = restrictions.PercentFull() / 100.0;
            RestrictedCapacity = Capacity * percent;
        }
    }

    // If a restriction changes, then update all the rooms
    // capacity.
    {
        for (auto room : gaia::gaia_u::Rooms_t::list())
        {
            auto w = room.writer();
            w.RestrictedCapacity = w.Capacity * (static_cast<float>(PercentFull) / 100.0);
            w.update_row();
        }
    }

    // Overall algorithm.
    // 1) restriction changes
    // 2) capacity changes for every room
    // 3) for each room, see what events it is booked for
    // 4) if the new capacity exceeds enrollment, attempt to change the location
    // 4.a) update the event and registrations
    // 5) if you cannot change the location, then change the data
    // 5.a) update the event and registrations

    // If the room capacity has changed
    {
        // GAIAPLAT-546:  should not have to annotate non-active fields with '@'
        if (RestrictedCapacity < @Enrolled)
        {
            printf("Room '%s' cannot support Event '%s'\n", @RoomName, @Name);
            printf("Event '%s' has '%u' enrollments but the restricted capcacity is '%u'\n",
                @Name, @Enrolled, RestrictedCapacity);
            
            // This room cannot accomodate this event. We need to remove the room from the 
            // event.
            auto event = gaia::gaia_u::Events_t::get(Events.gaia_id());
            event.Room_Rooms().Room_Events_list().erase(event);
        }
    }

    // Now follow up with moving rooms around, schedule conflicts, etc
}
