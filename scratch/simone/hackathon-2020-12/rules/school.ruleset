#include <iostream>

#include <gaia/rules/rules.hpp>
#include <gaia/stream/Stream.h>
#include <gaia/stream/StreamOperators.h>
#include <gaia/logger.hpp>
#include "gaia_school.h"
#include "person_type.h"

using namespace std;
using namespace gaia::common;
using namespace stream;
using namespace stream::op;
using namespace gaia::school;

#ifdef __JETBRAINS_IDE__
#define ruleset void
#define school_ruleset school_ruleset()

#endif

ruleset school_ruleset
{
    // students register to event
    {
        gaia_log::app().debug("[rule-{}] {}", 1, "-----");

        if (registration.LastOperation == INSERT)
        {
            auto reg_obj = registration_t::get(registration.gaia_id());
            auto event_obj = events_t::get(events.gaia_id());
            auto student_obj = students_t::get(students.gaia_id());

            int num_participants = reg_obj.event_events().event_registration_list().stream()
                | count();

            if (num_participants > @rooms.capacity)
            {
                gaia_log::app().info("[rule-{}] {} is full {}, registration rejected!", 1, @room_name, @first_name);

                student_obj.reg_student_registration_list().erase(reg_obj);
                event_obj.event_registration_list().erase(reg_obj);
                reg_obj.delete_row();
            }
            else
            {
                gaia_log::app().info("[rule-{}] Registration of {} accepted!", 1 , @first_name, @last_name);
            }
        }
    }

    // Person enters building
    {
        gaia_log::app().debug("[rule-{}] {}", 2, "-----");

        if (face_scan_log.LastOperation == INSERT)
        {
            gaia_log::app().info("[rule-{}] {} camera scanned face with id: {}", 2, @building_name, @scan_signature);

            try
            {
                auto person = persons_t::stream()
                    | filter(persons_t::fn::face_signature == scan_signature)
                    | first();

                gaia_log::app().info("[rule-{}] Person recognized as: {} {}", 2, person.first_name(), person.last_name());

                person.singature_id_face_scan_log_list().insert(face_scan_log.gaia_id());
                face_scan_log.person_type = person.person_type();
            }
            catch (stream::EmptyStreamException&)
            {
                gaia_log::app().info("[rule-{}] Person is unknown", 2);
                face_scan_log.person_type = person_type::stranger;
            }
        }
    }

    // Handle student entering the building
    {
        gaia_log::app().debug("[rule-{}] {}", 3, "-----");

        if (face_scan_log.person_type == person_type::student)
        {
            auto scan_obj = face_scan_log_t::get(face_scan_log.gaia_id());
            auto student_obj = scan_obj.singature_id_persons().student_person_students_list().stream() | first();

            vector<events_t> events_in_building = scan_obj.building_log_buildings().stream()
                | flat_map(buildings_t::fn::building_rooms_list)
                | flat_map(rooms_t::fn::room_events_list)
                | to_vector();

            vector<events_t> registered_events;

            for (auto& event : events_in_building)
            {
                int registered_to_event = event.event_registration_list().stream()
                    | map_(registration_t::fn::reg_student_students)
                    | filter([&](students_t& s) { return s == student_obj; })
                    | count();

                if (registered_to_event)
                {
                    registered_events.push_back(event);
                }
            }

            if (registered_events.empty())
            {
                gaia_log::app().info("[rule-{}] {} {} is not registered to any event, not opening the door.", 3, @persons.first_name, @persons.last_name);
                return;
            }

            stringstream strstream;
            for (auto& event : registered_events)
            {
                strstream << event.name() << ", ";
            }

            gaia_log::app().info("[rule-{}] Student {} {}  is registered to: {} ", 3, @persons.first_name, @persons.last_name, strstream.str());

            gaia_log::app().info("[rule-{}] Unlocking door for: {} {}", 3,  @persons.first_name, @persons.last_name);
            buildings.door_closed = false;
        }
    }

    // Handle staff entering the building
    {
        gaia_log::app().debug("[rule-{}] {}", 4, "-----");

        if (face_scan_log.person_type == person_type::staff)
        {
            gaia_log::app().info("[rule-{}] Unlocking door for staff member: {} {} ", 4, @persons.first_name, @persons.last_name);
            buildings.door_closed = false;
        }
    }

    // Handle parent entering the building
    {
        gaia_log::app().debug("[rule-{}] {}", 5, "-----");

        if (face_scan_log.person_type == person_type::parent)
        {
            gaia_log::app().info(
                    "[rule-{}] Not allowing parent {} {} into the building 'cus I'm not in the mood of writing the logic for it",
                    5, @persons.first_name, @persons.last_name);
            buildings.door_closed = false;
        }
    }

    // Handling strangers
    {
        gaia_log::app().debug("[rule-{}] {}", 6, "-----");

        if (face_scan_log.person_type == person_type::stranger)
        {
            // manually retrieve the scan log because it is impossible to do so via declarative code
            auto scan_log = face_scan_log_t::stream()
                | filter(face_scan_log_t::fn::scan_signature == scan_signature)
                | first();

            auto strangers = strangers_t::stream()
                | filter([&](strangers_t s) { return s.face_scan_face_scan_log() == scan_log; })
                | to_vector();

            if (strangers.empty())
            {
                gaia_log::app().info("[rule-{}] It is the first time that this stranger approaches the building {}", 6, @building_name);
                gaia_id_t stranger_id = strangers_t::insert_row(1);
                scan_log.face_scan_strangers_list().insert(stranger_id);
            }
            else
            {
                auto writer = strangers[0].writer();
                writer.scan_count = strangers[0].scan_count() + 1;
                writer.update_row();
                gaia_log::app().info("[rule-{}] It is the {} time that this stranger approaches the building", 6, strangers[0].scan_count(), @building_name);
            }
        }
    }

    // Call the police if a stranger tries entering the building more than 3 times (these could be further split in multiple rules)
    {
        gaia_log::app().debug("[rule-{}] {}", 7, "-----");

        if (strangers.scan_count <= 2)
        {
            gaia_log::app().info("[rule-{}] Keeping door closed!", 7);
        }

        if (@strangers.scan_count <= 3)
        {
            gaia_log::app().info("[rule-{}] Stranger tried to enter the building {} times, calling the police...", 7, strangers.scan_count);
        }

        if (@strangers.scan_count > 3)
        {
            gaia_log::app().info("[rule-{}] This sucker is really persistent, calling the Avengers...", 7);
        }
    }

    // Closing building door after it has been opened.
    {
        gaia_log::app().debug("[rule-{}] {}", 8, "-----");

        if (!buildings.door_closed)
        {
            gaia_log::app().info("[rule-{}] Closing {} door", 8, @buildings.building_name);
            buildings.door_closed = true;
        }
    }
}
