// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CAMERADEMO_CAMERADEMO_H_
#define FLATBUFFERS_GENERATED_CAMERADEMO_CAMERADEMO_H_

#include "flatbuffers/flatbuffers.h"

namespace CameraDemo {

struct camera_image;
struct camera_imageBuilder;
struct camera_imageT;

struct object;
struct objectBuilder;
struct objectT;

inline const flatbuffers::TypeTable *camera_imageTypeTable();

inline const flatbuffers::TypeTable *objectTypeTable();

struct camera_imageT : public flatbuffers::NativeTable {
  typedef camera_image TableType;
  gaia::common::nullable_string_t file_name;
  camera_imageT() {
  }
};

struct camera_image FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef camera_imageT NativeTableType;
  typedef camera_imageBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return camera_imageTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILE_NAME = 4
  };
  const flatbuffers::String *file_name() const {
    return GetPointer<const flatbuffers::String *>(VT_FILE_NAME);
  }
  flatbuffers::String *mutable_file_name() {
    return GetPointer<flatbuffers::String *>(VT_FILE_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FILE_NAME) &&
           verifier.VerifyString(file_name()) &&
           verifier.EndTable();
  }
  camera_imageT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(camera_imageT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<camera_image> Pack(flatbuffers::FlatBufferBuilder &_fbb, const camera_imageT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct camera_imageBuilder {
  typedef camera_image Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_file_name(flatbuffers::Offset<flatbuffers::String> file_name) {
    fbb_.AddOffset(camera_image::VT_FILE_NAME, file_name);
  }
  explicit camera_imageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  camera_imageBuilder &operator=(const camera_imageBuilder &);
  flatbuffers::Offset<camera_image> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<camera_image>(end);
    return o;
  }
};

inline flatbuffers::Offset<camera_image> Createcamera_image(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> file_name = 0) {
  camera_imageBuilder builder_(_fbb);
  builder_.add_file_name(file_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<camera_image> Createcamera_imageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *file_name = nullptr) {
  auto file_name__ = file_name ? _fbb.CreateString(file_name) : 0;
  return CameraDemo::Createcamera_image(
      _fbb,
      file_name__);
}

flatbuffers::Offset<camera_image> Createcamera_image(flatbuffers::FlatBufferBuilder &_fbb, const camera_imageT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct objectT : public flatbuffers::NativeTable {
  typedef object TableType;
  gaia::common::nullable_string_t class_;
  objectT() {
  }
};

struct object FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef objectT NativeTableType;
  typedef objectBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return objectTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLASS_ = 4
  };
  const flatbuffers::String *class_() const {
    return GetPointer<const flatbuffers::String *>(VT_CLASS_);
  }
  flatbuffers::String *mutable_class_() {
    return GetPointer<flatbuffers::String *>(VT_CLASS_);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLASS_) &&
           verifier.VerifyString(class_()) &&
           verifier.EndTable();
  }
  objectT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(objectT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<object> Pack(flatbuffers::FlatBufferBuilder &_fbb, const objectT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct objectBuilder {
  typedef object Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_class_(flatbuffers::Offset<flatbuffers::String> class_) {
    fbb_.AddOffset(object::VT_CLASS_, class_);
  }
  explicit objectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  objectBuilder &operator=(const objectBuilder &);
  flatbuffers::Offset<object> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<object>(end);
    return o;
  }
};

inline flatbuffers::Offset<object> Createobject(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> class_ = 0) {
  objectBuilder builder_(_fbb);
  builder_.add_class_(class_);
  return builder_.Finish();
}

inline flatbuffers::Offset<object> CreateobjectDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *class_ = nullptr) {
  auto class___ = class_ ? _fbb.CreateString(class_) : 0;
  return CameraDemo::Createobject(
      _fbb,
      class___);
}

flatbuffers::Offset<object> Createobject(flatbuffers::FlatBufferBuilder &_fbb, const objectT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline camera_imageT *camera_image::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<CameraDemo::camera_imageT> _o = flatbuffers::unique_ptr<CameraDemo::camera_imageT>(new camera_imageT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void camera_image::UnPackTo(camera_imageT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = file_name(); if (_e) _o->file_name = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
}

inline flatbuffers::Offset<camera_image> camera_image::Pack(flatbuffers::FlatBufferBuilder &_fbb, const camera_imageT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return Createcamera_image(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<camera_image> Createcamera_image(flatbuffers::FlatBufferBuilder &_fbb, const camera_imageT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const camera_imageT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _file_name = _o->file_name.empty() ? 0 : _fbb.CreateString(_o->file_name);
  return CameraDemo::Createcamera_image(
      _fbb,
      _file_name);
}

inline objectT *object::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  flatbuffers::unique_ptr<CameraDemo::objectT> _o = flatbuffers::unique_ptr<CameraDemo::objectT>(new objectT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void object::UnPackTo(objectT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = class_(); if (_e) _o->class_ = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
}

inline flatbuffers::Offset<object> object::Pack(flatbuffers::FlatBufferBuilder &_fbb, const objectT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return Createobject(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<object> Createobject(flatbuffers::FlatBufferBuilder &_fbb, const objectT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const objectT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _class_ = _o->class_.empty() ? 0 : _fbb.CreateString(_o->class_);
  return CameraDemo::Createobject(
      _fbb,
      _class_);
}

inline const flatbuffers::TypeTable *camera_imageTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "file_name"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *objectTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "class_"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace CameraDemo

#endif  // FLATBUFFERS_GENERATED_CAMERADEMO_CAMERADEMO_H_
