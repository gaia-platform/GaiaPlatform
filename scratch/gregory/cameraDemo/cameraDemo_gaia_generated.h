// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAIA_CAMERADEMO_CAMERADEMO_H_
#define FLATBUFFERS_GENERATED_GAIA_CAMERADEMO_CAMERADEMO_H_

#include "gaia_object.hpp"
#include "cameraDemo_generated.h"
#include "events.hpp"

using namespace std;
using namespace gaia::common;

namespace CameraDemo {

struct Camera_image : public gaia_object_t<2000,Camera_image,camera_image,camera_imageT>{
Camera_image() : gaia_object_t("Camera_image") {};
const char * file_name () const { return GET_STR(file_name);}
const char * file_name_original () const { return GET_STR_ORIGINAL(file_name);}
void set_file_name(const char * val)
{
SET(file_name, val);
}
void update_row(){
gaia_object_t::update_row();
gaia::rules::log_database_event(this, gaia::rules::event_type_t::row_update, gaia::rules::event_mode_t::immediate);
}
void insert_row(){
gaia_object_t::insert_row();
gaia::rules::log_database_event(this, gaia::rules::event_type_t::row_insert, gaia::rules::event_mode_t::immediate);
}
void delete_row(){
gaia::rules::log_database_event(this, gaia::rules::event_type_t::row_delete, gaia::rules::event_mode_t::immediate);
gaia_object_t::delete_row();
}
static gaia_id_t insert_row (const char * file_name_val){
flatbuffers::FlatBufferBuilder b(128);
b.Finish(Createcamera_imageDirect(b, file_name_val));
return gaia_object_t::insert_row(b);
}
private:
friend struct gaia_object_t<2000,Camera_image,camera_image,camera_imageT>;
Camera_image(gaia_id_t id) : gaia_object_t(id, "Camera_image") {}
};

struct Object : public gaia_object_t<2001,Object,object,objectT>{
Object() : gaia_object_t("Object") {};
const char * class_ () const { return GET_STR(class_);}
const char * class__original () const { return GET_STR_ORIGINAL(class_);}
void set_class_(const char * val)
{
SET(class_, val);
}
void update_row(){
gaia_object_t::update_row();
gaia::rules::log_database_event(this, gaia::rules::event_type_t::row_update, gaia::rules::event_mode_t::immediate);
}
void insert_row(){
gaia_object_t::insert_row();
gaia::rules::log_database_event(this, gaia::rules::event_type_t::row_insert, gaia::rules::event_mode_t::immediate);
}
void delete_row(){
gaia::rules::log_database_event(this, gaia::rules::event_type_t::row_delete, gaia::rules::event_mode_t::immediate);
gaia_object_t::delete_row();
}
static gaia_id_t insert_row (const char * class__val){
flatbuffers::FlatBufferBuilder b(128);
b.Finish(CreateobjectDirect(b, class__val));
return gaia_object_t::insert_row(b);
}
private:
friend struct gaia_object_t<2001,Object,object,objectT>;
Object(gaia_id_t id) : gaia_object_t(id, "Object") {}
};

}  // namespace CameraDemo

#endif  // FLATBUFFERS_GENERATED_GAIA_CAMERADEMO_CAMERADEMO_H_
