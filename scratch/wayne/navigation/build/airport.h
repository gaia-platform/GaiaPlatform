/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

// automatically generated by the FlatBuffers compiler, do not modify

#include <iterator>

#ifndef FLATBUFFERS_GENERATED_GAIA_AIRPORT_GAIA_AIRPORT_H_
#define FLATBUFFERS_GENERATED_GAIA_AIRPORT_GAIA_AIRPORT_H_

#include "gaia_object.hpp"
#include "airport_generated.h"
#include "gaia_iterators.hpp"

using namespace std;
using namespace gaia::common;


namespace gaia {
namespace airport {

// NOTE: the names of these constants are not fixed with this pattern. Care must be taken
//       to not use naming conventions that may cause collision with flatbuffer field names.

// in Flight
const int c_first_segment = 0;
const int c_num_flight_ptrs = 1;

// in Segment
const int c_first_trip_segment = 0;
const int c_parent_flight = 1;
const int c_next_segment = 2;
const int c_parent_src_airport = 3;
const int c_next_src_segment = 4;
const int c_parent_dst_airport = 5;
const int c_next_dst_segment = 6;
const int c_num_segment_ptrs = 7;

// in Airport
const int c_first_src_segment = 0;
const int c_first_dst_segment = 1;
const int c_num_airport_ptrs = 2;

// in Trip_segment
const int c_next_trip_segment = 0;
const int c_parent_segment = 1;
const int c_num_trip_segment_ptrs = 2;

struct Flight;
struct Airport;
struct Segment;
struct Trip_segment;

struct Flight : public gaia_object_t<1,Flight,flight,flightT>{
    Flight() : gaia_object_t("Flight",c_num_flight_ptrs) {segment_list.set_outer(this);}
    int32_t number () const {return GET_CURRENT(number);}
    int32_t number_original () const {return GET_ORIGINAL(number);}
    void set_number(int32_t val) {SET(number, val);}
    int32_t miles_flown () const {return GET_CURRENT(miles_flown);}
    int32_t miles_flown_original () const {return GET_ORIGINAL(miles_flown);}
    void set_miles_flown(int32_t val) {SET(miles_flown, val);}
    static Flight* insert_row (int32_t number_val,int32_t miles_flown_val){
        flatbuffers::FlatBufferBuilder b(128);
        b.Finish(Createflight(b, number_val,miles_flown_val));
        return gaia_object_t::insert_row(b, c_num_flight_ptrs);
    }
    void insert_row() {
        gaia_object_t::insert_row(c_num_flight_ptrs);
    }

    static gaia_container_t<Flight>& flight_table(){
        static gaia_container_t<Flight> flight_table;
        return flight_table;
    }

    reference_chain_container_t<Flight,Segment,c_parent_flight,c_first_segment,c_next_segment> segment_list;
private:
    friend struct gaia_object_t<1,Flight,flight,flightT>;
    friend struct Segment;
    Flight(gaia_id_t id) : gaia_object_t(id, "Flight") {segment_list.set_outer(this);}
};

struct Airport : public gaia_object_t<2,Airport,airport,airportT>{
    Airport() : gaia_object_t("Airport",c_num_airport_ptrs) {
        src_segment_list.set_outer(this);
        dst_segment_list.set_outer(this);
    }
    const char* name () const {return GET_STR(name);}
    const char* name_original () const {return GET_STR_ORIGINAL(name);}
    void set_name(const char* val) {SET(name, val);}
    const char* city () const {return GET_STR(city);}
    const char* city_original () const {return GET_STR_ORIGINAL(city);}
    void set_city(const char* val) {SET(city, val);}
    const char* iata () const {return GET_STR(iata);}
    const char* iata_original () const {return GET_STR_ORIGINAL(iata);}
    void set_iata(const char* val) {SET(iata, val);}
    static Airport* insert_row (const char* name_val, const char* city_val,const char* iata_val){
        flatbuffers::FlatBufferBuilder b(128);
        b.Finish(CreateairportDirect(b, name_val,city_val,iata_val));
        return gaia_object_t::insert_row(b, c_num_airport_ptrs);
    }
    void insert_row() {
        gaia_object_t::insert_row(c_num_airport_ptrs);
    }

    static gaia_container_t<Airport>& airport_table() {
        static gaia_container_t<Airport> airport_table;
        return airport_table;
    }

    reference_chain_container_t<Airport,Segment,c_parent_src_airport,c_first_src_segment,c_next_src_segment> src_segment_list;
    reference_chain_container_t<Airport,Segment,c_parent_dst_airport,c_first_dst_segment,c_next_dst_segment> dst_segment_list;
private:
    friend struct gaia_object_t<2,Airport,airport,airportT>;
    Airport(gaia_id_t id) : gaia_object_t(id, "Airport") {
        src_segment_list.set_outer(this);
        dst_segment_list.set_outer(this);
    }
};

struct Segment : public gaia_object_t<3,Segment,segment,segmentT>{
    Segment() : gaia_object_t("Segment",c_num_segment_ptrs) {trip_segment_list.set_outer(this);};
    int32_t id () const {return GET_CURRENT(id);}
    int32_t id_original () const {return GET_ORIGINAL(id);}
    void    set_id(int32_t val) {SET(id, val);}
    int32_t miles () const {return GET_CURRENT(miles);}
    int32_t miles_original () const {return GET_ORIGINAL(miles);}
    void    set_miles(int32_t val) {SET(miles, val);}
    int32_t status () const {return GET_CURRENT(status);}
    int32_t status_original () const {return GET_ORIGINAL(status);}
    void    set_status(int32_t val) {SET(status, val);}
    int32_t luggage_weight () const {return GET_CURRENT(luggage_weight);}
    int32_t luggage_weight_original () const {return GET_ORIGINAL(luggage_weight);}
    void    set_luggage_weight(int32_t val) {SET(luggage_weight, val);}
    static Segment* insert_row (int32_t id_val,int32_t miles_val,int32_t status_val, int32_t luggage_weight_val){
        flatbuffers::FlatBufferBuilder b(128);
        b.Finish(Createsegment(b, id_val,miles_val,status_val,luggage_weight_val));
        return gaia_object_t::insert_row(b, c_num_segment_ptrs);
    }
    void insert_row() {
        gaia_object_t::insert_row(c_num_segment_ptrs);
    }
    Airport* src_airport_owner() {
        Airport* pp = Airport::get_row_by_id(this->m_references[c_parent_src_airport]);
        return pp;
    }
    Airport* dst_airport_owner() {
        Airport* pp = Airport::get_row_by_id(this->m_references[c_parent_dst_airport]);
        return pp;
    }
    Flight* flight_owner() {
        Flight* pp = Flight::get_row_by_id(this->m_references[c_parent_flight]);
        return pp;
    }
    static gaia_container_t<Segment>& segment_table() {
        static gaia_container_t<Segment> segment_table;
        return segment_table;
    }

    reference_chain_container_t<Segment,Trip_segment,c_parent_segment,c_first_trip_segment,c_next_trip_segment> trip_segment_list;
private:
    friend struct gaia_object_t<3,Segment,segment,segmentT>;
    Segment(gaia_id_t id) : gaia_object_t(id, "Segment") {trip_segment_list.set_outer(this);}
};

struct Trip_segment : public gaia_object_t<4,Trip_segment,trip_segment,trip_segmentT>{
    Trip_segment() : gaia_object_t("Trip_segment",c_num_trip_segment_ptrs) {};
    const char* who () const {return GET_STR(who);}
    const char* who_original () const {return GET_STR_ORIGINAL(who);}
    void set_who(const char* val) {SET(who, val);}
    static Trip_segment* insert_row (const char* who_val){
        flatbuffers::FlatBufferBuilder b(128);
        b.Finish(Createtrip_segmentDirect(b, who_val));
        return gaia_object_t::insert_row(b, c_num_trip_segment_ptrs);
    }
    void insert_row() {
        gaia_object_t::insert_row(c_num_trip_segment_ptrs);
    }
    Segment* segment_owner() {
        Segment* pp = Segment::get_row_by_id(this->m_references[c_parent_segment]);
        return pp;
    }
    static gaia_container_t<Trip_segment>& trip_segment_table() {
        static gaia_container_t<Trip_segment> trip_segment_table;
        return trip_segment_table;
    }
private:
    friend struct gaia_object_t<4,Trip_segment,trip_segment,trip_segmentT>;
    Trip_segment(gaia_id_t id) : gaia_object_t(id, "Trip_segment") {}
};

}  // namespace airport
}  // namespace gaia

#endif  // FLATBUFFERS_GENERATED_GAIA_AIRPORT_GAIA_AIRPORT_H_
