#############################################
# Copyright (c) Gaia Platform LLC
# All rights reserved.
#############################################

project(sdk)

set(TEMP_PACKAGE_FOLDER "${CMAKE_CURRENT_BINARY_DIR}/tmp")
set(PGSQL_PACKAGE_FOLDER "${TEMP_PACKAGE_FOLDER}/opt/gaia/lib/pgsql_ext")
set(GAIA_PACKAGE_VERSION "0.1.0")
set(GAIA_DEB_PACKAGE_NAME "gaia_${GAIA_PACKAGE_VERSION}_amd64.deb")
set(GAIA_LIBRARY_NAME "libgaia.so.${GAIA_PACKAGE_VERSION}")

include(gaia)

file(WRITE ${CMAKE_BINARY_DIR}/sdk_dummy.c "")

# TODO: Replace dummy source with object libraries.
add_library(gaia SHARED ${CMAKE_BINARY_DIR}/sdk_dummy.c)
set(SDK_LINK_LIBRARIES
  -Wl,--whole-archive
  gaia_system
  -Wl,--no-whole-archive
)

target_link_libraries(gaia PRIVATE
  ${SDK_LINK_LIBRARIES}
)

install(TARGETS gaia DESTINATION ${CMAKE_INSTALL_LIBDIR})

#
# Ensure this test only includes public headers and links to the gaia shared library.
#
set(SDK_TEST_INCLUDES
  ${GAIA_INC}
  ${FLATBUFFERS_INC}
  ${GAIA_GENERATED_SCHEMAS}
)

configure_file("${GAIA_CONFIG}" "${PROJECT_BINARY_DIR}/gaia.conf")
configure_file("${GAIA_LOG_CONFIG}" "${PROJECT_BINARY_DIR}/gaia_log.conf")
add_gtest(test_sdk "tests/test_sdk.cpp" "${SDK_TEST_INCLUDES}" "rt;gaia" "generate_addr_book_headers")


# Set CPack variables required for building a DEB/RPM package.
#
# See:
# https://cmake.org/cmake/help/v3.17/module/CPack.html#variables-common-to-all-cpack-generators
# https://cmake.org/cmake/help/v3.17/cpack_gen/deb.html#variables-specific-to-cpack-debian-deb-generator
# https://cmake.org/cmake/help/v3.17/cpack_gen/rpm.html#variables-specific-to-cpack-rpm-generator
#
# Required. DEB and RPM both need this.
set(CPACK_PACKAGE_CONTACT  "info@gaiaplatform.io")
# Optional.
set(CPACK_PACKAGE_VENDOR "Gaia Platform")
# Optional.
set(CPACK_PACKAGE_HOMEPAGE_URL "https://www.gaiaplatform.io/")
# Optional. Default to current PROJECT_NAME which is "sdk".
set(CPACK_PACKAGE_NAME "gaia")
# Optional. Default to "/usr".
set(CPACK_PACKAGING_INSTALL_PREFIX "/opt/gaia")
# Optional. Default to "0.1.1".
set(CPACK_PACKAGE_VERSION_MAJOR "0.1.0")
# Optional. Default to "1".
set(CPACK_PACKAGE_VERSION_MINOR "0")

# DEB specific section
#
# Required. Default to 'dpkg --print-architecture' output on build machine.
set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE amd64)
# Optional.
set(CPACK_DEBIAN_PACKAGE_DESCRIPTION "Gaia Platform SDK")
# Optional. Default has neither version nor architecture in file name.
set(CPACK_DEBIAN_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}.deb)
# Optional. Our shared lib has no dependencies.
set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS OFF)

# RPM specific section
#
# Required. Default to 'uname -m' output on build machine.
set(CPACK_RPM_PACKAGE_ARCHITECTURE amd64)
# Optional.
set(CPACK_RPM_PACKAGE_DESCRIPTION "Gaia Platform SDK")
# Optional. Default has neither version nor architecture in file name.
set(CPACK_RPM_FILE_NAME ${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}.rpm)


# Set CPackDebHelper variables:
#
# Required. The directory that contains the files listed in CPACK_DEBHELPER_INPUT
set(CPACK_DEBHELPER_INPUT_DIR "${PROJECT_SOURCE_DIR}/debian")
# Required. List of input files that require processing by the debhelpers. All
# of these must have the '.in' extention because they are first processed by
# configure_file().
set(CPACK_DEBHELPER_INPUT
  control.in
  changelog.in
  service.in
  links.in
)
# Optional. List of debhelpers to run.
# If left unset the default list of debhelpers is executed.
set(CPACK_DEBHELPER_RUN
  dh_install dh_installdirs dh_installchangelogs
  dh_installdocs dh_installsystemd
  dh_usrlocal dh_link dh_dwz dh_compress dh_fixperms)
# Optional. Let the debhelpers generate the debian/control file (instead of CPack)
set(CPACK_DEBHELPER_GENCONTROL ON)
# Optional. Run the debhelpers in verbose mode.
set(CPACK_DEBHELPER_VERBOSE ON)

# Build rpm
set(CPACK_GENERATOR "RPM")

# Load the CPackDebHelper module, this will:
#
#   - Add "DEB" to the CPACK_GENERATOR variable.
#
#   - Parse the files in CPACK_DEBHELPER_INPUT with configure_file().
#
#   - Set the CPACK_DEBIAN_INSTALL_SCRIPT variable to
#     ${CMAKE_CURRENT_LIST_DIR}/CPackDebHelperInstall.cmake.
#
#   - Set CPACK_PROJECT_CONFIG_FILE variable to
#     ${CMAKE_CURRENT_LIST_DIR}/CPackDebHelperConfig.cmake.
#
# When the 'make package' command is executed CPackDebHelper will:
#
#   - Run the debhelpers specified in CPACK_DEBHELPER_RUN.
#
#   - Add the generated files in the 'debian' directory to
#     CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA.
#
#   - Copy all other files generated by debhelper to the packaging area.
#
include(CPackDebHelper)
message(CHECK_START "Looking for debhelper")
if(CPACK_DEBHELPER_FATALITY)
  message(CHECK_FAIL "not found")
else()
  message(CHECK_PASS "found")
endif()
# Load the CPack module.
include(CPack)

# Place flatbuffer headers.
install(FILES ${FLATBUFFERS_INC}/flatbuffers/flatbuffers.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/flatbuffers)
install(FILES ${FLATBUFFERS_INC}/flatbuffers/base.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/flatbuffers)
install(FILES ${FLATBUFFERS_INC}/flatbuffers/stl_emulation.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/flatbuffers)

# Place gaia headers.
install(DIRECTORY ${GAIA_INC}/gaia DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

# Place gaia configs
install(FILES ${GAIA_REPO}/production/gaia.conf DESTINATION ${CMAKE_INSTALL_SYSCONFDIR})
install(FILES ${GAIA_REPO}/production/gaia_log.conf DESTINATION ${CMAKE_INSTALL_SYSCONFDIR})

# Place incubator examples
install(FILES ${GAIA_REPO}/demos/incubator/gaia.conf DESTINATION examples/incubator_demo)
install(FILES ${GAIA_REPO}/demos/incubator/gaia_log.conf DESTINATION examples/incubator_demo)
install(FILES ${GAIA_REPO}/demos/incubator/incubator.ddl DESTINATION examples/incubator_demo)
install(FILES ${GAIA_REPO}/demos/incubator/incubator.ruleset DESTINATION examples/incubator_demo)
install(FILES ${GAIA_REPO}/demos/incubator/main.cpp DESTINATION examples/incubator_demo)
install(FILES ${GAIA_REPO}/demos/incubator/README.md DESTINATION examples/incubator_demo)
install(FILES ${PROJECT_SOURCE_DIR}/CMakeLists-incubator.txt DESTINATION examples/incubator_demo RENAME CMakeLists.txt)
