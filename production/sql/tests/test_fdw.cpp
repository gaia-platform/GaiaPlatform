/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

#include "gtest/gtest.h"

#include "catalog.hpp"
#include "db_test_base.hpp"
#include "file.hpp"

using namespace std;

using namespace gaia::db;
using namespace gaia::catalog;
using namespace gaia::catalog::ddl;

class fdw_test : public db_test_base_t
{
protected:
    static void SetUpTestSuite()
    {
        airlines_table_fields.emplace_back(make_unique<data_field_def_t>("al_id", data_type_t::e_int32, 1));
        airlines_table_fields.emplace_back(make_unique<data_field_def_t>("name", data_type_t::e_string, 1));
        airlines_table_fields.emplace_back(make_unique<data_field_def_t>("alias", data_type_t::e_string, 1));
        airlines_table_fields.emplace_back(make_unique<data_field_def_t>("iata", data_type_t::e_string, 1));
        airlines_table_fields.emplace_back(make_unique<data_field_def_t>("icao", data_type_t::e_string, 1));
        airlines_table_fields.emplace_back(make_unique<data_field_def_t>("callsign", data_type_t::e_string, 1));
        airlines_table_fields.emplace_back(make_unique<data_field_def_t>("country", data_type_t::e_string, 1));
        airlines_table_fields.emplace_back(make_unique<data_field_def_t>("active", data_type_t::e_string, 1));

        airports_table_fields.emplace_back(make_unique<data_field_def_t>("ap_id", data_type_t::e_int32, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("name", data_type_t::e_string, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("city", data_type_t::e_string, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("country", data_type_t::e_string, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("iata", data_type_t::e_string, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("icao", data_type_t::e_string, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("latitude", data_type_t::e_double, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("longitude", data_type_t::e_double, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("altitude", data_type_t::e_int16, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("timezone", data_type_t::e_float, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("dst", data_type_t::e_string, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("tztext", data_type_t::e_string, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("type", data_type_t::e_string, 1));
        airports_table_fields.emplace_back(make_unique<data_field_def_t>("source", data_type_t::e_string, 1));

        routes_table_fields.emplace_back(make_unique<data_field_def_t>("airline", data_type_t::e_string, 1));
        routes_table_fields.emplace_back(make_unique<data_field_def_t>("al_id", data_type_t::e_int32, 1));
        routes_table_fields.emplace_back(make_unique<data_field_def_t>("src_ap", data_type_t::e_string, 1));
        routes_table_fields.emplace_back(make_unique<data_field_def_t>("src_ap_id", data_type_t::e_int32, 1));
        routes_table_fields.emplace_back(make_unique<data_field_def_t>("dst_ap", data_type_t::e_string, 1));
        routes_table_fields.emplace_back(make_unique<data_field_def_t>("dst_ap_id", data_type_t::e_int32, 1));
        routes_table_fields.emplace_back(make_unique<data_field_def_t>("codeshare", data_type_t::e_string, 1));
        routes_table_fields.emplace_back(make_unique<data_field_def_t>("stops", data_type_t::e_int16, 1));
        routes_table_fields.emplace_back(make_unique<data_field_def_t>("equipment", data_type_t::e_string, 1));
    }

    static field_def_list_t airlines_table_fields;
    static field_def_list_t airports_table_fields;
    static field_def_list_t routes_table_fields;
};

field_def_list_t fdw_test::airlines_table_fields;
field_def_list_t fdw_test::airports_table_fields;
field_def_list_t fdw_test::routes_table_fields;

TEST_F(fdw_test, airport)
{
    create_table("airlines", airlines_table_fields);
    create_table("airports", airports_table_fields);
    create_table("routes", routes_table_fields);

    // Load the command string generated by the build.
    file_loader_t command_loader;
    command_loader.load_file_data("fdw_test_command.txt", true);

    char* command = reinterpret_cast<char*>(command_loader.get_data());

    cerr << "Command executed by test is:" << endl
         << command << endl;

    // Execute the command and validate its return value.
    int return_value = system(command);
    ASSERT_EQ(0, return_value);
}
