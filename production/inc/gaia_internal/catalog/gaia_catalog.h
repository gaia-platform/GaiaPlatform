/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

// Automatically generated by the Gaia Data Classes code generator.
// Do not modify.

#include <iterator>

#ifndef GAIA_GENERATED_catalog_H_
#define GAIA_GENERATED_catalog_H_

#include "gaia/direct_access/edc_object.hpp"
#include "catalog_generated.h"
#include "gaia/direct_access/edc_iterators.hpp"

namespace gaia {
namespace catalog {

// The initial size of the flatbuffer builder buffer.
constexpr int c_flatbuffer_builder_size = 128;

// Constants contained in the gaia_rule object.
constexpr uint32_t c_gaia_type_gaia_rule = 4294967293u;
constexpr int c_gaia_rule_parent_ruleset = 0;
constexpr int c_gaia_rule_next_ruleset = 1;

// Constants contained in the gaia_ruleset object.
constexpr uint32_t c_gaia_type_gaia_ruleset = 4294967292u;
constexpr int c_gaia_ruleset_first_gaia_rules = 0;

// Constants contained in the gaia_relationship object.
constexpr uint32_t c_gaia_type_gaia_relationship = 4294967290u;
constexpr int c_gaia_relationship_parent_parent = 0;
constexpr int c_gaia_relationship_next_parent = 1;
constexpr int c_gaia_relationship_parent_child = 2;
constexpr int c_gaia_relationship_next_child = 3;

// Constants contained in the gaia_field object.
constexpr uint32_t c_gaia_type_gaia_field = 4294967295u;
constexpr int c_gaia_field_parent_table = 0;
constexpr int c_gaia_field_next_table = 1;

// Constants contained in the gaia_table object.
constexpr uint32_t c_gaia_type_gaia_table = 4294967294u;
constexpr int c_gaia_table_parent_database = 0;
constexpr int c_gaia_table_next_database = 1;
constexpr int c_gaia_table_first_gaia_fields = 2;
constexpr int c_gaia_table_first_gaia_relationships_parent = 3;
constexpr int c_gaia_table_first_gaia_relationships_child = 4;

// Constants contained in the gaia_database object.
constexpr uint32_t c_gaia_type_gaia_database = 4294967291u;
constexpr int c_gaia_database_first_gaia_tables = 0;

struct gaia_rule_t;
struct gaia_ruleset_t;
struct gaia_relationship_t;
struct gaia_field_t;
struct gaia_table_t;
struct gaia_database_t;

typedef gaia::direct_access::edc_writer_t<c_gaia_type_gaia_database, gaia_database_t, internal::gaia_database, internal::gaia_databaseT> gaia_database_writer;
struct gaia_database_t : public gaia::direct_access::edc_object_t<c_gaia_type_gaia_database, gaia_database_t, internal::gaia_database, internal::gaia_databaseT> {
    typedef gaia::direct_access::reference_chain_container_t<gaia_table_t> gaia_tables_list_t;
    gaia_database_t() : edc_object_t("gaia_database_t") {}
    const char* name() const {return GET_STR(name);}
    static gaia::common::gaia_id_t insert_row(const char* name) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(internal::Creategaia_databaseDirect(b, name));
        return edc_object_t::insert_row(b);
    }
    static gaia::direct_access::edc_container_t<c_gaia_type_gaia_database, gaia_database_t>& list() {
        static gaia::direct_access::edc_container_t<c_gaia_type_gaia_database, gaia_database_t> list;
        return list;
    }
    gaia_tables_list_t gaia_tables() const {
        return gaia_tables_list_t(gaia_id(), c_gaia_database_first_gaia_tables, c_gaia_table_next_database);
    }
    struct expr {
        static inline gaia::direct_access::expression_t<gaia_database_t, gaia::common::gaia_id_t> gaia_id{&gaia_database_t::gaia_id};
        static inline gaia::direct_access::expression_t<gaia_database_t, const char*> name{&gaia_database_t::name};
        static inline gaia::direct_access::expression_t<gaia_database_t, gaia_tables_list_t> gaia_tables{&gaia_database_t::gaia_tables};
    };

private:
    friend struct edc_object_t<c_gaia_type_gaia_database, gaia_database_t, internal::gaia_database, internal::gaia_databaseT>;
    explicit gaia_database_t(gaia::common::gaia_id_t id) : edc_object_t(id, "gaia_database_t") {}
};

namespace gaia_database_expr {
    static auto& name = gaia_database_t::expr::name;
    static auto& gaia_tables = gaia_database_t::expr::gaia_tables;
};

typedef gaia::direct_access::edc_writer_t<c_gaia_type_gaia_table, gaia_table_t, internal::gaia_table, internal::gaia_tableT> gaia_table_writer;
struct gaia_table_t : public gaia::direct_access::edc_object_t<c_gaia_type_gaia_table, gaia_table_t, internal::gaia_table, internal::gaia_tableT> {
    typedef gaia::direct_access::reference_chain_container_t<gaia_field_t> gaia_fields_list_t;
    typedef gaia::direct_access::reference_chain_container_t<gaia_relationship_t> gaia_relationships_parent_list_t;
    typedef gaia::direct_access::reference_chain_container_t<gaia_relationship_t> gaia_relationships_child_list_t;
    gaia_table_t() : edc_object_t("gaia_table_t") {}
    const char* name() const {return GET_STR(name);}
    uint32_t type() const {return GET(type);}
    bool is_system() const {return GET(is_system);}
    gaia::direct_access::edc_vector_t<uint8_t> binary_schema() const {return GET_ARRAY(binary_schema);}
    gaia::direct_access::edc_vector_t<uint8_t> serialization_template() const {return GET_ARRAY(serialization_template);}
    static gaia::common::gaia_id_t insert_row(const char* name, uint32_t type, bool is_system, const std::vector<uint8_t>& binary_schema, const std::vector<uint8_t>& serialization_template) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(internal::Creategaia_tableDirect(b, name, type, is_system, &binary_schema, &serialization_template));
        return edc_object_t::insert_row(b);
    }
    static gaia::direct_access::edc_container_t<c_gaia_type_gaia_table, gaia_table_t>& list() {
        static gaia::direct_access::edc_container_t<c_gaia_type_gaia_table, gaia_table_t> list;
        return list;
    }
    gaia_database_t database() const {
        return gaia_database_t::get(this->references()[c_gaia_table_parent_database]);
    }
    gaia_fields_list_t gaia_fields() const {
        return gaia_fields_list_t(gaia_id(), c_gaia_table_first_gaia_fields, c_gaia_field_next_table);
    }
    gaia_relationships_parent_list_t gaia_relationships_parent() const {
        return gaia_relationships_parent_list_t(gaia_id(), c_gaia_table_first_gaia_relationships_parent, c_gaia_relationship_next_parent);
    }
    gaia_relationships_child_list_t gaia_relationships_child() const {
        return gaia_relationships_child_list_t(gaia_id(), c_gaia_table_first_gaia_relationships_child, c_gaia_relationship_next_child);
    }
    struct expr {
        static inline gaia::direct_access::expression_t<gaia_table_t, gaia::common::gaia_id_t> gaia_id{&gaia_table_t::gaia_id};
        static inline gaia::direct_access::expression_t<gaia_table_t, const char*> name{&gaia_table_t::name};
        static inline gaia::direct_access::expression_t<gaia_table_t, uint32_t> type{&gaia_table_t::type};
        static inline gaia::direct_access::expression_t<gaia_table_t, bool> is_system{&gaia_table_t::is_system};
        static inline gaia::direct_access::expression_t<gaia_table_t, gaia::direct_access::edc_vector_t<uint8_t>> binary_schema{&gaia_table_t::binary_schema};
        static inline gaia::direct_access::expression_t<gaia_table_t, gaia::direct_access::edc_vector_t<uint8_t>> serialization_template{&gaia_table_t::serialization_template};
        static inline gaia::direct_access::expression_t<gaia_table_t, gaia_database_t> database{&gaia_table_t::database};
        static inline gaia::direct_access::expression_t<gaia_table_t, gaia_fields_list_t> gaia_fields{&gaia_table_t::gaia_fields};
        static inline gaia::direct_access::expression_t<gaia_table_t, gaia_relationships_parent_list_t> gaia_relationships_parent{&gaia_table_t::gaia_relationships_parent};
        static inline gaia::direct_access::expression_t<gaia_table_t, gaia_relationships_child_list_t> gaia_relationships_child{&gaia_table_t::gaia_relationships_child};
    };

private:
    friend struct edc_object_t<c_gaia_type_gaia_table, gaia_table_t, internal::gaia_table, internal::gaia_tableT>;
    explicit gaia_table_t(gaia::common::gaia_id_t id) : edc_object_t(id, "gaia_table_t") {}
};

namespace gaia_table_expr {
    static auto& name = gaia_table_t::expr::name;
    static auto& type = gaia_table_t::expr::type;
    static auto& is_system = gaia_table_t::expr::is_system;
    static auto& binary_schema = gaia_table_t::expr::binary_schema;
    static auto& serialization_template = gaia_table_t::expr::serialization_template;
    static auto& database = gaia_table_t::expr::database;
    static auto& gaia_fields = gaia_table_t::expr::gaia_fields;
    static auto& gaia_relationships_parent = gaia_table_t::expr::gaia_relationships_parent;
    static auto& gaia_relationships_child = gaia_table_t::expr::gaia_relationships_child;
};

typedef gaia::direct_access::edc_writer_t<c_gaia_type_gaia_field, gaia_field_t, internal::gaia_field, internal::gaia_fieldT> gaia_field_writer;
struct gaia_field_t : public gaia::direct_access::edc_object_t<c_gaia_type_gaia_field, gaia_field_t, internal::gaia_field, internal::gaia_fieldT> {
    gaia_field_t() : edc_object_t("gaia_field_t") {}
    const char* name() const {return GET_STR(name);}
    uint8_t type() const {return GET(type);}
    uint16_t repeated_count() const {return GET(repeated_count);}
    uint16_t position() const {return GET(position);}
    bool deprecated() const {return GET(deprecated);}
    bool active() const {return GET(active);}
    static gaia::common::gaia_id_t insert_row(const char* name, uint8_t type, uint16_t repeated_count, uint16_t position, bool deprecated, bool active) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(internal::Creategaia_fieldDirect(b, name, type, repeated_count, position, deprecated, active));
        return edc_object_t::insert_row(b);
    }
    static gaia::direct_access::edc_container_t<c_gaia_type_gaia_field, gaia_field_t>& list() {
        static gaia::direct_access::edc_container_t<c_gaia_type_gaia_field, gaia_field_t> list;
        return list;
    }
    gaia_table_t table() const {
        return gaia_table_t::get(this->references()[c_gaia_field_parent_table]);
    }
    struct expr {
        static inline gaia::direct_access::expression_t<gaia_field_t, gaia::common::gaia_id_t> gaia_id{&gaia_field_t::gaia_id};
        static inline gaia::direct_access::expression_t<gaia_field_t, const char*> name{&gaia_field_t::name};
        static inline gaia::direct_access::expression_t<gaia_field_t, uint8_t> type{&gaia_field_t::type};
        static inline gaia::direct_access::expression_t<gaia_field_t, uint16_t> repeated_count{&gaia_field_t::repeated_count};
        static inline gaia::direct_access::expression_t<gaia_field_t, uint16_t> position{&gaia_field_t::position};
        static inline gaia::direct_access::expression_t<gaia_field_t, bool> deprecated{&gaia_field_t::deprecated};
        static inline gaia::direct_access::expression_t<gaia_field_t, bool> active{&gaia_field_t::active};
        static inline gaia::direct_access::expression_t<gaia_field_t, gaia_table_t> table{&gaia_field_t::table};
    };

private:
    friend struct edc_object_t<c_gaia_type_gaia_field, gaia_field_t, internal::gaia_field, internal::gaia_fieldT>;
    explicit gaia_field_t(gaia::common::gaia_id_t id) : edc_object_t(id, "gaia_field_t") {}
};

namespace gaia_field_expr {
    static auto& name = gaia_field_t::expr::name;
    static auto& type = gaia_field_t::expr::type;
    static auto& repeated_count = gaia_field_t::expr::repeated_count;
    static auto& position = gaia_field_t::expr::position;
    static auto& deprecated = gaia_field_t::expr::deprecated;
    static auto& active = gaia_field_t::expr::active;
    static auto& table = gaia_field_t::expr::table;
};

typedef gaia::direct_access::edc_writer_t<c_gaia_type_gaia_relationship, gaia_relationship_t, internal::gaia_relationship, internal::gaia_relationshipT> gaia_relationship_writer;
struct gaia_relationship_t : public gaia::direct_access::edc_object_t<c_gaia_type_gaia_relationship, gaia_relationship_t, internal::gaia_relationship, internal::gaia_relationshipT> {
    gaia_relationship_t() : edc_object_t("gaia_relationship_t") {}
    const char* to_parent_link_name() const {return GET_STR(to_parent_link_name);}
    const char* to_child_link_name() const {return GET_STR(to_child_link_name);}
    uint8_t cardinality() const {return GET(cardinality);}
    bool parent_required() const {return GET(parent_required);}
    bool deprecated() const {return GET(deprecated);}
    uint16_t first_child_offset() const {return GET(first_child_offset);}
    uint16_t next_child_offset() const {return GET(next_child_offset);}
    uint16_t parent_offset() const {return GET(parent_offset);}
    static gaia::common::gaia_id_t insert_row(const char* to_parent_link_name, const char* to_child_link_name, uint8_t cardinality, bool parent_required, bool deprecated, uint16_t first_child_offset, uint16_t next_child_offset, uint16_t parent_offset) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(internal::Creategaia_relationshipDirect(b, to_parent_link_name, to_child_link_name, cardinality, parent_required, deprecated, first_child_offset, next_child_offset, parent_offset));
        return edc_object_t::insert_row(b);
    }
    static gaia::direct_access::edc_container_t<c_gaia_type_gaia_relationship, gaia_relationship_t>& list() {
        static gaia::direct_access::edc_container_t<c_gaia_type_gaia_relationship, gaia_relationship_t> list;
        return list;
    }
    gaia_table_t parent() const {
        return gaia_table_t::get(this->references()[c_gaia_relationship_parent_parent]);
    }
    gaia_table_t child() const {
        return gaia_table_t::get(this->references()[c_gaia_relationship_parent_child]);
    }
    struct expr {
        static inline gaia::direct_access::expression_t<gaia_relationship_t, gaia::common::gaia_id_t> gaia_id{&gaia_relationship_t::gaia_id};
        static inline gaia::direct_access::expression_t<gaia_relationship_t, const char*> to_parent_link_name{&gaia_relationship_t::to_parent_link_name};
        static inline gaia::direct_access::expression_t<gaia_relationship_t, const char*> to_child_link_name{&gaia_relationship_t::to_child_link_name};
        static inline gaia::direct_access::expression_t<gaia_relationship_t, uint8_t> cardinality{&gaia_relationship_t::cardinality};
        static inline gaia::direct_access::expression_t<gaia_relationship_t, bool> parent_required{&gaia_relationship_t::parent_required};
        static inline gaia::direct_access::expression_t<gaia_relationship_t, bool> deprecated{&gaia_relationship_t::deprecated};
        static inline gaia::direct_access::expression_t<gaia_relationship_t, uint16_t> first_child_offset{&gaia_relationship_t::first_child_offset};
        static inline gaia::direct_access::expression_t<gaia_relationship_t, uint16_t> next_child_offset{&gaia_relationship_t::next_child_offset};
        static inline gaia::direct_access::expression_t<gaia_relationship_t, uint16_t> parent_offset{&gaia_relationship_t::parent_offset};
        static inline gaia::direct_access::expression_t<gaia_relationship_t, gaia_table_t> parent{&gaia_relationship_t::parent};
        static inline gaia::direct_access::expression_t<gaia_relationship_t, gaia_table_t> child{&gaia_relationship_t::child};
    };

private:
    friend struct edc_object_t<c_gaia_type_gaia_relationship, gaia_relationship_t, internal::gaia_relationship, internal::gaia_relationshipT>;
    explicit gaia_relationship_t(gaia::common::gaia_id_t id) : edc_object_t(id, "gaia_relationship_t") {}
};

namespace gaia_relationship_expr {
    static auto& to_parent_link_name = gaia_relationship_t::expr::to_parent_link_name;
    static auto& to_child_link_name = gaia_relationship_t::expr::to_child_link_name;
    static auto& cardinality = gaia_relationship_t::expr::cardinality;
    static auto& parent_required = gaia_relationship_t::expr::parent_required;
    static auto& deprecated = gaia_relationship_t::expr::deprecated;
    static auto& first_child_offset = gaia_relationship_t::expr::first_child_offset;
    static auto& next_child_offset = gaia_relationship_t::expr::next_child_offset;
    static auto& parent_offset = gaia_relationship_t::expr::parent_offset;
    static auto& parent = gaia_relationship_t::expr::parent;
    static auto& child = gaia_relationship_t::expr::child;
};

typedef gaia::direct_access::edc_writer_t<c_gaia_type_gaia_ruleset, gaia_ruleset_t, internal::gaia_ruleset, internal::gaia_rulesetT> gaia_ruleset_writer;
struct gaia_ruleset_t : public gaia::direct_access::edc_object_t<c_gaia_type_gaia_ruleset, gaia_ruleset_t, internal::gaia_ruleset, internal::gaia_rulesetT> {
    typedef gaia::direct_access::reference_chain_container_t<gaia_rule_t> gaia_rules_list_t;
    gaia_ruleset_t() : edc_object_t("gaia_ruleset_t") {}
    const char* name() const {return GET_STR(name);}
    bool active_on_startup() const {return GET(active_on_startup);}
    gaia::direct_access::edc_vector_t<uint64_t> table_ids() const {return GET_ARRAY(table_ids);}
    const char* source_location() const {return GET_STR(source_location);}
    const char* serial_stream() const {return GET_STR(serial_stream);}
    static gaia::common::gaia_id_t insert_row(const char* name, bool active_on_startup, const std::vector<uint64_t>& table_ids, const char* source_location, const char* serial_stream) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(internal::Creategaia_rulesetDirect(b, name, active_on_startup, &table_ids, source_location, serial_stream));
        return edc_object_t::insert_row(b);
    }
    static gaia::direct_access::edc_container_t<c_gaia_type_gaia_ruleset, gaia_ruleset_t>& list() {
        static gaia::direct_access::edc_container_t<c_gaia_type_gaia_ruleset, gaia_ruleset_t> list;
        return list;
    }
    gaia_rules_list_t gaia_rules() const {
        return gaia_rules_list_t(gaia_id(), c_gaia_ruleset_first_gaia_rules, c_gaia_rule_next_ruleset);
    }
    struct expr {
        static inline gaia::direct_access::expression_t<gaia_ruleset_t, gaia::common::gaia_id_t> gaia_id{&gaia_ruleset_t::gaia_id};
        static inline gaia::direct_access::expression_t<gaia_ruleset_t, const char*> name{&gaia_ruleset_t::name};
        static inline gaia::direct_access::expression_t<gaia_ruleset_t, bool> active_on_startup{&gaia_ruleset_t::active_on_startup};
        static inline gaia::direct_access::expression_t<gaia_ruleset_t, gaia::direct_access::edc_vector_t<uint64_t>> table_ids{&gaia_ruleset_t::table_ids};
        static inline gaia::direct_access::expression_t<gaia_ruleset_t, const char*> source_location{&gaia_ruleset_t::source_location};
        static inline gaia::direct_access::expression_t<gaia_ruleset_t, const char*> serial_stream{&gaia_ruleset_t::serial_stream};
        static inline gaia::direct_access::expression_t<gaia_ruleset_t, gaia_rules_list_t> gaia_rules{&gaia_ruleset_t::gaia_rules};
    };

private:
    friend struct edc_object_t<c_gaia_type_gaia_ruleset, gaia_ruleset_t, internal::gaia_ruleset, internal::gaia_rulesetT>;
    explicit gaia_ruleset_t(gaia::common::gaia_id_t id) : edc_object_t(id, "gaia_ruleset_t") {}
};

namespace gaia_ruleset_expr {
    static auto& name = gaia_ruleset_t::expr::name;
    static auto& active_on_startup = gaia_ruleset_t::expr::active_on_startup;
    static auto& table_ids = gaia_ruleset_t::expr::table_ids;
    static auto& source_location = gaia_ruleset_t::expr::source_location;
    static auto& serial_stream = gaia_ruleset_t::expr::serial_stream;
    static auto& gaia_rules = gaia_ruleset_t::expr::gaia_rules;
};

typedef gaia::direct_access::edc_writer_t<c_gaia_type_gaia_rule, gaia_rule_t, internal::gaia_rule, internal::gaia_ruleT> gaia_rule_writer;
struct gaia_rule_t : public gaia::direct_access::edc_object_t<c_gaia_type_gaia_rule, gaia_rule_t, internal::gaia_rule, internal::gaia_ruleT> {
    gaia_rule_t() : edc_object_t("gaia_rule_t") {}
    const char* name() const {return GET_STR(name);}
    static gaia::common::gaia_id_t insert_row(const char* name) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(internal::Creategaia_ruleDirect(b, name));
        return edc_object_t::insert_row(b);
    }
    static gaia::direct_access::edc_container_t<c_gaia_type_gaia_rule, gaia_rule_t>& list() {
        static gaia::direct_access::edc_container_t<c_gaia_type_gaia_rule, gaia_rule_t> list;
        return list;
    }
    gaia_ruleset_t ruleset() const {
        return gaia_ruleset_t::get(this->references()[c_gaia_rule_parent_ruleset]);
    }
    struct expr {
        static inline gaia::direct_access::expression_t<gaia_rule_t, gaia::common::gaia_id_t> gaia_id{&gaia_rule_t::gaia_id};
        static inline gaia::direct_access::expression_t<gaia_rule_t, const char*> name{&gaia_rule_t::name};
        static inline gaia::direct_access::expression_t<gaia_rule_t, gaia_ruleset_t> ruleset{&gaia_rule_t::ruleset};
    };

private:
    friend struct edc_object_t<c_gaia_type_gaia_rule, gaia_rule_t, internal::gaia_rule, internal::gaia_ruleT>;
    explicit gaia_rule_t(gaia::common::gaia_id_t id) : edc_object_t(id, "gaia_rule_t") {}
};

namespace gaia_rule_expr {
    static auto& name = gaia_rule_t::expr::name;
    static auto& ruleset = gaia_rule_t::expr::ruleset;
};

}  // namespace catalog
}  // namespace gaia

#endif  // GAIA_GENERATED_catalog_H_

