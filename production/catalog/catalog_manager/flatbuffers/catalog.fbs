namespace gaia.catalog;

enum GaiaTypeType:ubyte {
  BOOLEAN,
  BYTE,
  UBYTE,
  SHORT,
  USHORT,
  INT,
  UINT,
  LONG,
  ULONG,
  FLOAT,
  DOUBLE,
  STRING,
  TABLE
}

table gaiaType {
  name:string (required);
  type:GaiaTypeType;
}

table gaiaField {
  name:string (required);
  owner_id:uint64;
  type_id:uint64;
  length:uint16;
  position:uint16;
  required:bool;
  deprecated:bool;
}

enum GaiaTrimActionType:ubyte {
  NONE,
  DELETE,
  ARCHIVE,
}

table gaiaTable {
  name:string (required);
  type_id:uint64;
  is_struct:bool = false;
  is_log:bool = false;
  trim_action:GaiaTrimActionType;
  max_rows:uint64;
  max_size:uint64;
  max_seconds:uint64;
}

table gaiaColumn {
  table_id:uint64;
  field_id:uint64;
  active:bool;
  nullable:bool;
  has_default:bool;
  // TODO: convert the default value to [byte] once EDC supports vector
  default_value:string;
  is_foreign_key:bool;
  reference:uint64;
}

enum GaiaValueIndexType:ubyte {
  HASH,
  RANGE
}

table gaiaValueIndex {
  name:string;
  table_id:uint64;
  // TODO: convert the columns to [uint16] once EDC supports vector
  columns:string;
  index_type:GaiaValueIndexType;
  unique:bool;
}

table gaiaTrigger {
  table_id:uint64;
  function_id:uint64;
}

table gaiaRuleset {
  name:string;
  active:bool;
  table_ids:uint64;
  source_location:string (required);
  serial_stream:string;
}

table gaiaFunction {
  name:string (required);
  ruleset_id:uint64;
}
