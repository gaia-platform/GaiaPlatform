/////////////////////////////////////////////
// Copyright (c) 2021 Gaia Platform LLC
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE.txt file
// or at https://opensource.org/licenses/MIT.
/////////////////////////////////////////////

#include <algorithm>
#include <atomic>

extern std::atomic<int> g_timestamp;
static constexpr float c_fan_speed_limit = 5000.0;
static constexpr float c_fan_speed_increment = 500.0;
static constexpr float c_fan_threshold = 0.7f;

// Regular C++ function
float adjust_temperature(float min_temp, float max_temp, float sensor_value, float fan_rpm)
{
    float new_fan_rpm = fan_rpm;
    if (sensor_value >= max_temp)
    {
        new_fan_rpm = std::min(c_fan_speed_limit, fan_rpm + c_fan_speed_increment);
    }
    else if (sensor_value <= min_temp)
    {
        new_fan_rpm = std::max(0.0f, fan_rpm - (2*c_fan_speed_increment));
    }

    return new_fan_rpm;
}

ruleset incubator_ruleset
{
    // Rule 1:  Keep the temperature in range of the incubator limits.
    on_update(sensor.value)
    {
        if (!incubator.is_on)
        {
            return;
        }

        if (sensor.value < incubator.min_temp 
            || sensor.value > incubator.max_temp)
        {
            for (A:actuator)
            {
                A.value = adjust_temperature(incubator.min_temp, incubator.max_temp, sensor.value, A.value);
                A.timestamp = g_timestamp;
            }
        }
    }

    // Rule 2:  Verify the temperature is kept in range if the
    // incubator temperature limits change. 
    on_update(incubator.max_temp, incubator.min_temp)
    {
        if (!incubator.is_on)
        {
            return;
        }

        sensor_loop:
        for (S:sensor)
        {
            if (S.value < min_temp 
                || S.value > max_temp)
            {
                for (A:actuator)
                {
                    A.value = adjust_temperature(min_temp, max_temp, S.value, A.value);
                    A.timestamp = g_timestamp;
                }
                break sensor_loop;
            }
        }
    }

    // Rule 3:  Turn off all the fans if the incubator is powered down.
    {
        if (!@incubator.is_on)
        {
            for (A:actuator)
            {
                A.value = 0;
                A.timestamp = g_timestamp;
            }
        }
    }

    // Rule 4:  If the fan is at 70% of its limit and the temperature is still too hot then
    // set the fan to its maximum speed.
    on_update(actuator.value)
    {
        if (actuator.value == c_fan_speed_limit)
        {
            return;
        }

        if_loop:
        if (S:sensor.value > incubator.max_temp)
        {
            if (actuator.value > c_fan_threshold * c_fan_speed_limit)
            {
                actuator.value = c_fan_speed_limit;
                actuator.timestamp = g_timestamp;
            }
            break if_loop;
        }
    }
}
