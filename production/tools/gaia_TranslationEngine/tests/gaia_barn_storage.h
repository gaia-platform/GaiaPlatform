/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

// Automatically generated by Gaia Data Classes code generator, do not modify.

#include <iterator>

#ifndef GAIA_GENERATED_barn_storage_H_
#define GAIA_GENERATED_barn_storage_H_

#include "gaia_object.hpp"
#include "barn_storage_generated.h"
#include "gaia_iterators.hpp"

using namespace std;
using namespace gaia::direct_access;

namespace gaia {
namespace barn_storage {

// The initial size of the flatbuffer builder buffer.
constexpr int c_flatbuffer_builder_size = 128;

// Constants contained in the actuator object.
constexpr int c_next_i__actuator = 1;
constexpr int c_num_actuator_ptrs = 2;

// Constants contained in the sensor object.
constexpr int c_parent_i__incubator = 0;
constexpr int c_next_i__sensor = 1;
constexpr int c_num_sensor_ptrs = 2;

// Constants contained in the incubator object.
constexpr int c_first_i__actuator = 0;
constexpr int c_first_i__sensor = 1;
constexpr int c_num_incubator_ptrs = 2;

struct actuator_t;
struct sensor_t;
struct incubator_t;

typedef gaia_writer_t<42llu,incubator_t,incubator,incubatorT,c_num_incubator_ptrs> incubator_writer;
struct incubator_t : public gaia_object_t<42llu,incubator_t,incubator,incubatorT,c_num_incubator_ptrs> {
    const char* name() const {return GET_STR(name);}
    float min_temp() const {return GET(min_temp);}
    float max_temp() const {return GET(max_temp);}
    using gaia_object_t::insert_row;
    static gaia_id_t insert_row(const char* name, float min_temp, float max_temp) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(CreateincubatorDirect(b, name, min_temp, max_temp));
        return gaia_object_t::insert_row(b);
    }
    static gaia_container_t<42llu, incubator_t>& list() {
        static gaia_container_t<42llu, incubator_t> list;
        return list;
    }
    reference_chain_container_t<incubator_t,actuator_t,c_parent_i__incubator,c_first_i__actuator,c_next_i__actuator> m_i__actuator_list;
    reference_chain_container_t<incubator_t,actuator_t,c_parent_i__incubator,c_first_i__actuator,c_next_i__actuator>& i__actuator_list() {
        return m_i__actuator_list;
    }
    reference_chain_container_t<incubator_t,sensor_t,c_parent_i__incubator,c_first_i__sensor,c_next_i__sensor> m_i__sensor_list;
    reference_chain_container_t<incubator_t,sensor_t,c_parent_i__incubator,c_first_i__sensor,c_next_i__sensor>& i__sensor_list() {
        return m_i__sensor_list;
    }
private:
    friend struct gaia_object_t<42llu, incubator_t, incubator, incubatorT, c_num_incubator_ptrs>;
    incubator_t(gaia_id_t id) : gaia_object_t(id, "incubator_t") {
        m_i__actuator_list.set_outer(gaia_id());
        m_i__sensor_list.set_outer(gaia_id());
    }
};

typedef gaia_writer_t<46llu,sensor_t,sensor,sensorT,c_num_sensor_ptrs> sensor_writer;
struct sensor_t : public gaia_object_t<46llu,sensor_t,sensor,sensorT,c_num_sensor_ptrs> {
    uint64_t incubator_id() const {return GET(incubator_id);}
    const char* name() const {return GET_STR(name);}
    uint64_t timestamp() const {return GET(timestamp);}
    float value() const {return GET(value);}
    using gaia_object_t::insert_row;
    static gaia_id_t insert_row(uint64_t incubator_id, const char* name, uint64_t timestamp, float value) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(CreatesensorDirect(b, incubator_id, name, timestamp, value));
        return gaia_object_t::insert_row(b);
    }
    incubator_t i__incubator() {
        return incubator_t::get(this->references()[c_parent_i__incubator]);
    }
    static gaia_container_t<46llu, sensor_t>& list() {
        static gaia_container_t<46llu, sensor_t> list;
        return list;
    }
private:
    friend struct gaia_object_t<46llu, sensor_t, sensor, sensorT, c_num_sensor_ptrs>;
    sensor_t(gaia_id_t id) : gaia_object_t(id, "sensor_t") {
    }
};

typedef gaia_writer_t<52llu,actuator_t,actuator,actuatorT,c_num_actuator_ptrs> actuator_writer;
struct actuator_t : public gaia_object_t<52llu,actuator_t,actuator,actuatorT,c_num_actuator_ptrs> {
    uint64_t incubator_id() const {return GET(incubator_id);}
    const char* name() const {return GET_STR(name);}
    uint64_t timestamp() const {return GET(timestamp);}
    float value() const {return GET(value);}
    using gaia_object_t::insert_row;
    static gaia_id_t insert_row(uint64_t incubator_id, const char* name, uint64_t timestamp, float value) {
        flatbuffers::FlatBufferBuilder b(c_flatbuffer_builder_size);
        b.Finish(CreateactuatorDirect(b, incubator_id, name, timestamp, value));
        return gaia_object_t::insert_row(b);
    }
    incubator_t i__incubator() {
        return incubator_t::get(this->references()[c_parent_i__incubator]);
    }
    static gaia_container_t<52llu, actuator_t>& list() {
        static gaia_container_t<52llu, actuator_t> list;
        return list;
    }
private:
    friend struct gaia_object_t<52llu, actuator_t, actuator, actuatorT, c_num_actuator_ptrs>;
    actuator_t(gaia_id_t id) : gaia_object_t(id, "actuator_t") {
    }
};

}  // namespace barn_storage
}  // namespace gaia

#endif  // GAIA_GENERATED_barn_storage_H_

