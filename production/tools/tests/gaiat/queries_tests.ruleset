// RUN: %gaiat %s --

#include "tags_test.h"

ruleset test1
{
    on_change(actuator.value)
    {
        actuator.value += sensor.value;
    }
}

ruleset test2
{
    on_change(sensor.value)
    {
        actuator.value = sensor.value;
    }
}

ruleset test3
{
    {
        actuator.value = @sensor.value;
    }
}

ruleset test4
{
    {
        actuator.value = @sensor.value + (incubator.min_temp + incubator.max_temp) / 2;
    }
}

ruleset test5
{
    {
        // Explicit query.
        min_temp += @incubator->sensor.value;
        // Implicit query.
        min_temp += sensor.value;
    }
}

ruleset test6
{
    on_insert(sensor)
    {
        // Implicit query.
        if (incubator->actuator.value > 95.0)
        {
            actuator.value = actuator.value * 0.99;
        }
    }
}

ruleset test7
{
    on_change(min_temp)
    {
        min_temp += incubator->sensor.value;
        max_temp -= incubator->actuator.value;
    }
}

ruleset test8
{
    {
        min_temp += @incubator->sensor.value;
        max_temp -= incubator->actuator.value;
    }
}

ruleset test9
{
    {
        min_temp += @I:incubator->S:sensor.value;
        max_temp -= incubator->A:actuator.value;
    }
}

ruleset test11
{
    on_update(crop)
    {
        use_float(crop->yield->feeding->animal->raised->farmer.condos->incubator.min_temp);
    }
}

ruleset test12
{
    on_change(actuator.value)
    {
        use_float(actuator.value += sensor.value);
    }
}

ruleset test13
{
    {
        use_float(I:incubator->actuator.value + I.min_temp);
        use_float(@I:incubator->actuator.value + I.max_temp);
    }
}

ruleset test14
{
    on_change(yield.bushels)
    {
        farmer.incubators->incubator->raised->animal->feeding->yield->crop.acres = 10;
        /farmer.condos->incubator->raised->animal->feeding->yield->crop.acres = 10;
    }
}

ruleset test15
{
    on_insert(farmer)
    {
        // Note that full qualification, including link "incubators", is necessary
        // because there are multiple paths from farmer to incubator.
        farmer.incubators->I:incubator->A:actuator.value = I.min_temp;
        /I:incubator->A:actuator.value = I.min_temp;
    }
}

ruleset test16
{
    on_change(yield.bushels)
    {
        F:farmer.condos->I:incubator->R:raised->A:animal->D:feeding->Y:yield->C:crop.acres = 0;
        /F:farmer.incubators->I:incubator->R:raised->A:animal->D:feeding->Y:yield->C:crop.acres = 0;
    }
}

ruleset test17
{
    on_change(yield.bushels)
    {
        F:farmer.incubators->I:incubator->R:raised->A:animal->D:feeding->Y:yield->C:crop.acres++;
        /F:farmer.condos->I:incubator->R:raised->A:animal->D:feeding->Y:yield->C:crop.acres++;
    }
}

ruleset test18
{
    on_change(yield.bushels)
    {
        F : farmer.condos -> I : incubator -> R : raised -> A : animal -> D : feeding -> Y : yield 
            -> C : crop . acres ++;
        / F:farmer.incubators->I:incubator->R:raised->A:animal->D:feeding->Y:yield->C:crop.acres++;
    }
}

// GAIAPLAT-806 (fixed)
// fails to find path from sensor to incubator.
ruleset test19
{
    {
        if (sensor->incubator->actuator.value > 95.0)
        {
            actuator.value = @min_temp;
        }
    }
}

// GAIAPLAT-872 (fixed)
// In this test, the navigation fans out in the 1:M direction.
ruleset test20
{
    on_insert(yield)
    {
        int daily = 0;
        daily += /farmer->yield->feeding.portion;
    }
}

// GAIAPLAT-872 (fixed)
// In this test, the navigation is in the M:1 direction.
ruleset test21
{
    on_insert(farmer)
    {
        use_string(/feeding->yield->farmer.name);
    }
}

// GAIAPLAT-915 (fixed)
ruleset test22
{
    on_insert(yield)
    {
        int daily = 0;
        daily += /feeding.portion;
    }
}

// GAIAPLAT-807 (fixed)
// GAIAPLAT-892 (fixed)
ruleset test23
{
    on_insert(S:sensor)
    {
        S->incubator.min_temp += S.value;
    }
}

ruleset test24
{
    on_update(min_temp)
    {
        sensor.value += sensor->incubator.min_temp;
    }
}

// GAIAPLAT-803
// This should be identical to test1 above.
#ifdef TEST_FAILURES // GAIAPLAT-803
ruleset test25
{
    {
        @actuator.value += sensor.value;
    }
}
#endif

// GAIAPLAT-808 (fixed)
// The I.min_temp doesn't use the tag from the 'if'.
ruleset test26
{
    on_change(actuator)
    {
        if (/I:incubator.max_temp == 100.0)
        {
            use_float(I.min_temp);
        }
    }
}

ruleset test27
{
    on_change(actuator)
    {
        while (/I:incubator.max_temp == 100.0)
        {
            use_float(I.min_temp);
        }
    }
}

// GAIAPLAT-809 (fixed)
ruleset test28
{
    on_change(actuator)
    {
        for (/I:incubator)
        {
            use_float(I.min_temp);
        }
    }
}

// GAIAPLAT-825 (fixed)
ruleset test29
{
    on_insert(sensor)
    {
        use_float(/I:incubator->actuator.value + I.min_temp);
        use_float(I:incubator->actuator.value + I.max_temp);
    }
}

// GAIAPLAT-827 (fixed)
ruleset test30
{
    on_change(sensor.value)
    {
        if (S:sensor.value > 100.0)
        {
            actuator.value = 101.0;
        }
    }
}

// GAIAPLAT-828 (fixed)
ruleset test31
{
    on_change(incubator)
    {
        S:sensor.value = S.value * 1.01;
    }
}

// GAIAPLAT-839 (fixed)
ruleset test32
{
    on_change(yield.bushels)
    {
        F:farmer.incubators->I:incubator->R:raised->A:animal->D:feeding->Y:yield->C:crop.acres
            = A.age + F.acreage + Y.bushels + D.portion + C.acres;
    }
}

// GAIAPLAT-832 (fixed)
// TESTCASE: Ternary operator with implicit navigation
ruleset test33
{
    on_update(incubator)
    {
        float v = 0;
        v += S:sensor.value > 99.0 ? 99.0 : S.value;
    }
}

ruleset test34
{
    on_update(sensor)
    {
        min_temp = 99.8;
    }
}

ruleset test35
{
    {
        float total_temp = 0.0;
        total_temp += @/incubator.min_temp;
        total_temp += @incubator.max_temp;
    }
}

ruleset test36
{
    on_insert(farmer)
    {
        float some_value = 0.0;
        int some_number = 0;
        some_number += animal.age;
        some_number += acres;
        // Note: this requires full qualification from farmer to differentiate between
        // farmer.condos->incubator and farmer.incubators->incubator.
        some_value += farmer.condos->incubator->sensor.value;
        some_number += acreage;
        some_number += portion;
        some_value += yield->feeding->animal->raised->incubator->sensor.value;
    }
}

// GAIAPLAT-945 (fixed)
ruleset test37
{
    on_update(min_temp)
    {
        sensor.value += sensor.incubator->incubator.min_temp;
    }
}

// GAIAPLAT-1043 (fixed)
// GAIAPLAT-1044 (fixed)
// TESTCASE: Use a long explicit path in a for statement.
ruleset test38
{
    on_update(I:incubator)
    {
        int counter = 0;
        int acre_total = 0;
        for (incubator->raised->farmer->yield->C:crop)
        {
            acre_total += C.acres;
            counter++;
        }
    }
}

// GAIAPLAT-1045 (fixed)
// TESTCASE: No row references inside for loop
ruleset test39
{
    on_update(incubator)
    {
        int counter = 0;
        for (actuator)
        {
            counter++;
        }
    }
}

void printf(const char*, ...);

// TESTCASE: use link names together with table names
ruleset test40
{
    on_update(incubator)
    {
        for (incubator.sensors->S:sensor)
        {
            printf("%f\n", S.value);
        }
    }
}

// TESTCASE: use link names together with table names in long explicit navigation
ruleset test41
{
    on_change(yield.bushels)
    {
        /farmer.incubators->incubator.raised->raised.animal->animal->feeding->yield->crop.acres = 10;
    }
}

// TESTCASE: equal-length path from incubator to feeding, qualified to avoid multiple link issue
ruleset test42
{
    on_update(incubator)
    {
        int tot_acres = 0;
        tot_acres += animal->feeding.portion;
    }
}

// TESTCASE: observe scope of a declared variable assigned from field
// GAIAPLAT-1119 (fixed)
ruleset test43
{
    on_update(crop)
    {
        int acre = crop.acres;
        printf("%d\n", acre);
    }
}

// TESTCASE: use multiple fields from the same row in one statement
ruleset test44
{
    on_insert(farmer)
    {
        printf("%s, %s, %u\n", animal.animal_name, breed, animal.age);
        printf("%u, %u\n", portion, frequency);
    }
}

// TESTCASE: use multiple fields from the multiple rows in one statement
ruleset test45
{
    on_insert(incubator)
    {
        printf("%s, %f, %u,%s, %f, %u\n", sensor.name, sensor.value, precision, actuator.name,
            actuator.value, max_rpm);
    }
}

// TESTCASE: expect navigation from anchor
// GAIAPLAT-1191 (fixed)
ruleset test46
{
    on_update(farmer)
    {
        if (bushels > 40)
        {
            int total_portion = 0;
            int total_frequency = 0;
            total_portion += portion, total_frequency += frequency;
        }
    }
}
