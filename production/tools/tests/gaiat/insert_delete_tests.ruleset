// RUN: %gaiat %s --

// TESTCASE: Delete the anchor row.
ruleset test01
{
    on_insert(sensor)
    {
        sensor.remove();
    }
}

void use_values(int, const char*);

// TESTCASE: Insert two different row types.
ruleset test02
{
    on_insert(incubator)
    {
        auto Y = yield.insert(bushels: 12);
        auto S = sensor.insert(value: 100.0, name: "Turtles");
        use_values(Y.bushels, S.name);
    }
}

// TESTCASE: Delete a row found by implicit query.
ruleset test03
{
    on_insert(sensor)
    {
        incubator.remove();
    }
}

// TESTCASE: Delete rows found by implicit query.
ruleset test04
{
    on_insert(incubator)
    {
        sensor.remove();
    }
}

// TESTCASE: Delete rows selected by field content, through a tag.
// GAIAPLAT-1041 (fixed)
ruleset test05
{
    on_insert(I:incubator)
    {
        for(S:sensor)
        {
            if (S.value > 98.6)
            {
                // Note that this will fail in execution without disconnecting first.
                S.remove();
            }
        }
    }
}

// TESTCASE: Assign an Insert return value to a tag
ruleset test06
{
    on_insert(sensor)
    {
        auto S = sensor.insert(name: "Turtles", timestamp: 1995, value: 100.0);
    }
}

// TESTCASE: Assign an Insert value from an anchor's field
// GAIAPLAT-1113
ruleset test07
{
    OnInsert(incubator)
    {
        auto S = sensor.Insert(name: "Turtles", timestamp: 1995, value: incubator.max_temp);
    }
}

// TESTCASE: Perform Inserts in a navigational loop
// GAIAPLAT-1110
ruleset test08
{
    OnInsert(incubator)
    {
        for (incubator.landlord->farmer->Y:yield)
        {
            int y;
            y = Y.bushels;
            feeding.Insert(portion: y);
        }
    }
}

// TESTCASE: Perform Inserts containing implicit navigation
ruleset test09
{
    OnInsert(farmer)
    {
        feeding.Insert(portion: yield.bushels);
    }
}

// TESTCASE: Perform Inserts with multiple fields from implicit navigation
// GAIAPLAT-1112
ruleset test10
{
    OnInsert(farmer)
    {
        farmer.Insert(name: crop.name, acreage: crop.acres);
    }
}

// TESTCASE: Perform Inserts with multiple fields from multiple implicit navigations
// GAIAPLAT-1117
#ifdef TEST_FAILURES
ruleset test11
{
    OnInsert(raised)
    {
        farmer.Insert(name: crop.name, acreage: portion);
    }
}
#endif
