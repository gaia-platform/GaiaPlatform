// RUN: %gaiat %s --

#include "tags_test.h"

ruleset test_for_with_table_scan
{
    OnInsert(incubator)
    {
        float temp = 0;
        for (/I:incubator)
        {
            temp += I.max_temp;
        }
    }
}

ruleset test_for
{
    {
        float temp = 0;
        for (incubator)
        {
            temp += @max_temp;
        }
    }
}

ruleset test_for_if
{
    {
        float temp = 0;
        for (I:incubator) if (I.min_temp < 50.0)
        {
            temp += @max_temp;
        }
    }
}

ruleset test_if
{
    {
        float temp = 0;
        if (incubator.min_temp < 50.0)
        {
            temp += @max_temp;
        }
    }
}

ruleset test_implicit_iteration_active_field_inside_if
{
    {
        float temp = 0;
        if (incubator.min_temp < 50.0)
        {
            temp += @sensor.value;
        }
    }
}

ruleset test_implicit_iteration_inside_if_on_insert
{
    OnInsert(incubator)
    {
        float temp = 0;
        if (incubator.min_temp < 50.0)
        {
            temp += sensor.value;
        }
    }
}

ruleset test_if_else_implicit_iteration
{
    OnInsert(incubator)
    {
        float temp = 0;
        if (incubator.min_temp < 50.0)
        {
            temp += sensor.value;
        }
        else
        {
            temp -= sensor.value;
        }
    }
}

ruleset test_if_else_navigation
{
    // Questionable code generation on this one.
    OnInsert(incubator)
    {
        float temp = 0;
        if (sensor->incubator->actuator.value > 0.0)
        {
            temp += sensor.value;
        }
        else
        {
            temp -= sensor.value;
        }
    }
}

ruleset test_if_else_nomatch_navigation
{
    OnInsert(incubator)
    {
        float temp = 0;
        if (sensor->incubator->actuator.value > 0.0)
        {
            temp += sensor.value;
        }
// GAIAPLAT-947 (fixed)
        else
        {
            temp -= sensor.value;
        }
// GAIAPLAT-988
        nomatch
        {
            temp += 10.0;
        }
    }
}

ruleset test_navigation_tags
{
    OnInsert(incubator)
    {
        float temp = 0;
        if (S:sensor->I:incubator->A:actuator.value > 0.0)
        {
            temp += S.value + I.min_temp + A.value;
        }
        else
        {
            temp -= I.max_temp - A.value - S.value;
        }
    }
}

ruleset test_while_navigation
{
    OnInsert(incubator)
    {
        float temp = 0;
        while (S:sensor->I:incubator->A:actuator.value > 0.0)
        {
            temp += S.value + I.min_temp + A.value;
        }
    }
}

ruleset test_nested_while_navigation_multiple_tags
{
    OnInsert(incubator)
    {
        float temp = 0;
        while (S:sensor->I:incubator->A:actuator.value > 0.0)
        {
            while (A->II:incubator->SS:sensor.value < 100.0)
            {
                temp += S.value + II.min_temp + A.value;
            }
        }
    }
}

ruleset test_while_if_navigation_on_insert
{
    OnInsert(farmer)
    {
        float temp = 0;
        while (farmer->incubator->raised->animal->feeding->yield->crop.acres)
        {
            if (farmer->yield->feeding->animal->raised->incubator.max_temp < 100.0)
            {
                temp += 1.0;
            }
        }
    }
}

ruleset test_while_if_navigation_active_field
{
    {
        float temp = 0;
        while (@farmer->incubator->raised->animal->feeding->yield->crop.acres)
        {
            if (farmer->yield->feeding->animal->raised->incubator.max_temp < 100.0)
            {
                temp += 1.0;
            }
        }
    }
}

ruleset test_else_if_table_scans
{
    {
        int total_acres;
        if (/@F:farmer.acreage > 10)
        {
            total_acres = 10;
        }
        else if (/farmer.acreage < 5)
        {
            total_acres = 5;
        }
        else
        {
            total_acres = F.acreage;
        }
    }
}

ruleset test_else_if_implicit_iteration
{
    {
        int total_acres;
        if (/@F:farmer.acreage > 10)
        {
            total_acres = 10;
        }
        else if (F->yield->crop.acres < 5)
        {
            total_acres = 5;
        }
        else
        {
            total_acres = F.acreage;
        }
    }
}

int strcmp(const char*, const char*);

ruleset test_else_if_backward_navigation
{
    // Does this intend to test backward navigation (farmer->yield->farmer)
    // or function usage in a declarative statement (strcmp() in this test)?
    {
        int total_acres;
        if (@farmer->Y:yield->feeding.portion > 10)
        {
            total_acres = 10;
        }
        else if (strcmp(Y->farmer->raised.birthdate, "20140530") == 0)
        {
            total_acres = 5;
        }
        else
        {
            total_acres += Y->feeding.portion;
        }
    }
}

ruleset test_else_if_table_scans
{
    OnInsert(isolated)
    {
        int answer;
        if (/incubator->actuator.value > 0.5)
        {
            answer = 10;
        }
        else if (/farmer->yield.bushels > 10)
        {
            answer = 5;
        }
        else if (/raised->animal.age < 3)
        {
            answer += /feeding.portion;
        }
    }
}

ruleset test_multiple_else_if_nomatch
{
    OnInsert(isolated)
    {
        int answer;
        if (/incubator->actuator.value > 0.5)
        {
            answer = 10;
        }
        else if (/farmer->yield.bushels > 10)
        {
            answer = 5;
        }
        else if (/raised->animal.age < 3)
        {
            answer += /feeding.portion;
        }
// GAIAPLAT-988
        nomatch
        {
            answer = 15;
        }
        nomatch
        {
            answer = 30;
        }
        nomatch
        {
            answer = 20;
        }
    }
}

ruleset test_single_cardinality_for
{
    OnInsert(incubator)
    {
        // Single-cardinality reference in 'for' loop.
        for (int i = 0; i < farmer.acreage; i++)
        {
            farmer.acreage++;
        }
    }
}

ruleset test_multiple_cardinality_for_with_tag
{
    OnInsert(incubator)
    {
        // Multiple-cardinality reference in 'for' loop.
        // Reference a tag in the loop.
        for (float f = 0.0; f < S:sensor.value; f += 1.3)
        {
            S.timestamp++;
        }
    }
}

ruleset test_deep_navigation_for_while
{
    OnInsert(incubator)
    {
        // Stupidly complex rule.
        long tot_acres = 0;
        long tot_feed = 0;
        long tot_age = 0;
        for (int i = 0; i < /F:farmer->R:raised->A:animal->FE:feeding->Y:yield->C:crop.acres; i++)
        {
            tot_acres = crop.acres;
            while (A->FE2:feeding.portion > 0)
            {
                tot_feed += FE2.portion;
            }
            tot_age += Y->feeding->animal.age;
        }
    }
}

ruleset test_nested_braceless_if_nomatch
{
    OnInsert(incubator)
    {
        // Convoluted if/nomatch with no braces.
        bool here = false;
        if (incubator.max_temp > 99.0)
            if (actuator.value < 97.3)
                if (sensor.value > 82.1)
                    here = true;
// GAIAPLAT-988
                nomatch
                    here = false;
            else
                here = false;
            nomatch
                here = true;
        nomatch
            here = false;
    }
}

ruleset test_procedural_for_with_implicit_iteration
{
    OnInsert(feeding)
    {
        // Another convoluted set or queries.
        // Note that the translated code is not yet correct.
        long some_number = 0;
        long i = 0;
        for (i += farmer.acreage; i < farmer->yield->feeding.portion; i += /crop.acres)
        {
            some_number += i;
        }
    }
}

ruleset test_statement_with_navigations
{
    OnInsert(feeding)
    {
        // Note that the translated code is not yet correct.
        farmer->incubator->raised.birthdate += crop->yield->feeding.portion;
    }
}

void sprintf(char*, const char*, const char*, float, float);

ruleset test_navigations_in_function_parameters
{
    OnInsert(feeding)
    {
        char str[200];
        sprintf(str, "%ld,%f,%f", I:incubator->raised.birthdate, I->A:actuator.value, A->incubator->sensor.value);
    }
}

ruleset test_on_insert_tag_usage
{
    OnInsert(I:incubator)
    {
        if (incubator.max_temp > 99.8)
        {
            I.min_temp -= 1.0;
        }
        nomatch
        {
            I.min_temp = 97.0;
        }
    }
}

ruleset test_implicit_iteration_inside_if_else_nomatch
{
    OnInsert(incubator)
    {
        float temp = 0;
        if (incubator->raised->animal->feeding.portion > 1)
        {
            temp += sensor.value;
        }
        else
        {
            temp -= sensor.value;
        }
        nomatch
        {
            temp += 10.0;
        }
    }
}

ruleset test_braceless_while_with_tags
{
    OnInsert(incubator)
    {
        float temp = 0;
        // Braces are omitted on purpose.
        while (S:sensor->I:incubator->A:actuator.value > 0.0)
            temp += S.value + I.min_temp + A.value;
    }
}

ruleset test_procedural_while_and_if
{
    OnInsert(incubator)
    {
        const char* s = "just a string";
        int i = 0;
        while (*s++)
        {
            max_temp += 1;
        }
        if (i < 5)
        {
            i = 1;
        }
    }
}

ruleset test_nested_procedural_and_declarative_whiles
{
    OnInsert(incubator)
    {
        const char* s = "just a string";
        int i = 0;
        // Testing while/declarative-while/while/if nesting.
        while (*s++) {
            while (/incubator.max_temp > 0) {
                while(*s++) {
                    if (*s == ' ') {
                        break;
                    }
                }
            }
        }
    }
}

ruleset test_braceless_declarative_statement_in_procedural_while
{
    OnInsert(incubator)
    {
        const char* s = "just a string";
        int i = 0;
        // Testing braceless delcarative statement inside while.
        while (*s++)
            max_temp += 1;
    }
}

ruleset test_if_nomatch_tag_scope
{
    {
        int total_acres;
        if (/@F:farmer.acreage > 10)
        {
            total_acres = 10;
        }
        else if (/farmer.acreage < 5)
        {
            total_acres = 5;
        }
        else
        {
            total_acres = F.acreage;
        }
        nomatch
        {
            // This nomatch is for the inner 'if' so F is in scope
            total_acres = F.acreage;
        }
    }
}

ruleset test_do_while_implicit_iteration
{
    OnInsert(incubator)
    {
        int count = 0;
        // Declarative do-while referencing a field inside while().
        // The parent row of the sensors in the while() is the incubator row from OnInsert().
        do
        {
            count += 1;
        }
        while (sensor.value > 0.0);
    }
}

ruleset test_braceless_do_while_one_line
{
    OnInsert(incubator)
    {
        int count = 0;
        // Braceless declarative do-while in one line.
        do count += 1; while (sensor.value > 0.0);
    }
}

ruleset test_braceless_do_while_two_lines
{
    OnInsert(incubator)
    {
        int count = 0;
        // Braceless declarative do-while in two lines.
        do count += 1;
        while (sensor.value > 0.0);
    }
}

ruleset test37
{
    OnInsert(incubator)
    {
        int count = 0;
        // Procedural do-while that does not reference any rows.
        do
        {
            count += 1;
        }
        while (count < 10);
    }
}

ruleset test38
{
    OnInsert(incubator)
    {
        int count = 0;
        // Declarative do-while referencing a field inside while().
        do
        {
            count += 1;
        }
        while (sensor.value > 0.0);
    }
}

ruleset test39
{
    // The consequences of the syntax in this rule are up for discussion.
    // This may become a negative test in the future,
    // in the event that we disallow references inside a while() statement.
    {
        int count = 0;
        // Procedural do-while referencing an active field inside while().
        // There is no parent row for the row referenced inside while().
        do
        {
            count += 1;
        }
        while (@animal.age < 10);
    }
}

ruleset test40
{
    OnInsert(A:animal)
    {
        int count = 0;
        // Procedural do-while with a tag referenced in the do{} and while() closures,
        // but the tag is initialized outside the do-while.
        do
        {
            count += A.age;
        }
        while (A.age > 0);
    }
}

ruleset test41
{
    OnInsert(A:animal)
    {
        int count = 0;
        // Procedural do-while with a tag referenced inside the do{} closure
        // but not the while() closure.
        do
        {
            count += A.age;
        }
        while (count < 10);
    }
}

ruleset test42
{
    OnUpdate(incubator)
    {
        int count = 0;
        // Delcarative do-while with a tag initialized in an if() statement inside the do{} closure.
        do
        {
            if (A:actuator.value > 0.0)
            {
                count += 1;
            }
        }
        while (sensor.value > 0.0);
    }
}

ruleset test43
{
    OnInsert(incubator)
    {
        int count = 0;
        // Declarative do-while referencing a field inside while() using a full-table scan.
        // In the future, references inside a while() loop that cause iteration may be illegal.
        do
        {
            count += 1;
        }
        while (/sensor.value > 0.0);
    }
}

ruleset test44
{
    // The consequences of the syntax in this rule are up for discussion.
    {
        int count = 0;
        // Declarative (or procedural??) do-while with an active field in the while() closure, but
        // it is marked as a full-table scan.
        do
        {
            count += 1;
        }
        while (/@animal.age < 10);
    }
}

ruleset test45
{
    OnInsert(incubator)
    {
        int count = 0;
        // Declarative do-while referencing a field inside while() using a full-table scan.
        do
        {
            count += 1;
        }
        while (/sensor.value > 0.0);
    }
}

ruleset test46
{
    OnInsert(I:incubator)
    {
        int count_a = 0;
        // Nested declarative do-while loops.
        do
        {
            int count_b = 0;

            do
            {
                int count_c = 0;

                do
                {
                    count_c += 1;
                } while (strcmp(raised.birthdate, "") != 0);

                count_b += 1;
            } while (actuator.value < 10);

            count_a += 1;
        }
        while (sensor.value > 0.0);
    }
}

ruleset test47
{
    OnInsert(I:incubator)
    {
        int count = 0;
        // Nested braceless declarative do-while loops.
        do
            do
                do
                    count += 1;
                while (strcmp(raised.birthdate, "") != 0);
            while (actuator.value < 10);
        while (sensor.value > 0.0);
    }
}


ruleset test48
{
    OnInsert(farmer)
    {
        int count = 0;
        // Arbitrarily complex navigation in the while() closure of a do-while loop.
        do
        {
            count++;
        }
        while (farmer->raised->animal->feeding->yield->crop.acres < 10);
    }
}

ruleset test49
{
    OnInsert(incubator)
    {
        do
        {
            // Simple declarative for-loop inside the do{} closure.
            for (int i = 0; i < farmer.acreage; i++)
            {
                farmer.acreage++;
            }
        } while (sensor.value > 0.0);
    }
}
