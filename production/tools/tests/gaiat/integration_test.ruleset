// RUN: %gaiat %s --

ruleset test
{
}

ruleset test1
{
    OnUpdate(min_temp)
    {
        min_temp+=1;
    }
}

ruleset test2
{   OnUpdate(max_temp)
    {
        max_temp++;
    }
}

ruleset test3
{   OnUpdate(animal.age)
    {
      animal.age++;
    }
}

ruleset test4
{
    OnInsert(sensor)
    {
        sensor.delete_row();
    }
}

typedef enum
{
    undefined = 0,
    actuators = 1,
    sensors = 2,
    incubators = 3
} hardware_type;

ruleset test5
{
    {
	    if (@actuator.value < 5)
	    {
		    actuator.value = 5;
	    }
    }
}

typedef enum
{
    values = 0,
    types = 1,
    defs = 2
} testEnum;

ruleset test6 : Table (sensor)
{
  {
	  if (@value < 5)
	  {
		  value = 5;
	  }
  }
}

class test
{
public:
     void delete_row()
     {

     }
};

void testFunction()
{
    int value = 5;
}

ruleset test7
{
  OnChange(sensor)
  {
      auto t = sensor.gaia_id();
	  if (sensor.value == 5)
      {
          test t;
          t.delete_row();
      }
  }
}

ruleset test8
{
    {
        auto rule_name = rule_context.rule_name;
        auto ruleset_name = rule_context.ruleset_name;
        auto event_type = rule_context.event_type;
        auto gaia_type = rule_context.gaia_type;

	    if (@actuator.value < 5 && @sensor.value > 10)
	    {
		    actuator.value = 5;
	    }
    }
}

void OnUpdate()
{}

ruleset test9
{
  OnUpdate(sensor)
  {
      OnUpdate();
  }
}

// TAG TESTS

#include "tags_test.h"

ruleset test10
{
    OnInsert(I:incubator)
    {
        use_float(I.min_temp);
    }
}

ruleset test11
{
    OnInsert(I:incubator)
    {
        I.min_temp += sensor.value;
        actuator.value = I.max_temp;
    }
}

ruleset test12
{
    OnChange(A:actuator)
    {
        use_float(A.value);
    }
}

ruleset test13
{
    OnChange(A:actuator.value)
    {
        use_float(A.value);
    }
}

ruleset test14
{
    OnUpdate(S:sensor)
    {
        float v = S.value;
    }
}

ruleset test15
{
    OnUpdate(S:sensor, V:sensor.value, sensor.name, sensor.timestamp)
    {
        float v = S.value + V.value;
        sensor.name = "perimeter";
    }
}

ruleset test16 : Table(sensor)
{
    OnUpdate(S:sensor)
    {
        use_string(name);
    }
}

ruleset test17
{
    OnUpdate(S:sensor, T:sensor)
    {
        use_string(S.name);
        use_string(T.name);
    }
}

// This is legal? But has error.
ruleset test18 : Table(sensor)
{
    OnUpdate(name)
    {
        use_string(name);
    }
}

// ruleset test19
// {
//     OnInsert(I:incubator)
//     {
//         I.min_temp += incubator->sensor.value;
//         I.min_temp += I->sensor.value;
//     }
// }

