////////////////////////////////////////////////////
// Copyright (c) Gaia Platform Authors
//
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE.txt file
// or at https://opensource.org/licenses/MIT.
////////////////////////////////////////////////////

// RUN: %gaiat %s --

#include "tags_test.h"

// TESTCASE: basic scalar array assignment
ruleset test1
{
    on_update(farmer)
    {
        previous_years[0] = 34;
        previous_years[1] = 14;
    }
}

// TESTCASE: referencing scalar array elements
ruleset test2
{
    on_update(farmer)
    {
        int total_3_years = 0;
        total_3_years = previous_years[0] + previous_years[1] + previous_years[2];
    }
}

// Use an int field value.
int use_int(int i)
{
    return i * 2;
}

// TESTCASE: using a variable to index scalar array field
ruleset test3
{
    on_update(farmer)
    {
        for (int i=0; i<5; i++)
        {
            use_int(previous_years[i]);
        }
    }
}

// TESTCASE: using a field value to index a scalar array field
ruleset test4
{
    on_insert(farmer)
    {
        previous_years[bushels] = bushels + 1;
    }
}

// TESTCASE: using a field value to index a scalar array field
ruleset test5
{
    on_insert(farmer)
    {
        previous_years[bushels] = previous_years[bushels + 1];
    }
}

// TESTCASE: subscript scalar array with invalid number
ruleset test6
{
    on_insert(farmer)
    {
        previous_years[-1] = previous_years[-2];
    }
}

// TESTCASE: use hex constants in array subscripts
ruleset test7
{
    on_insert(farmer)
    {
        previous_years[0x1] = previous_years[0xffff];
    }
}

unsigned int update_int(unsigned int& i)
{
    return i * 3;
}

// TESTCASE: send one element of scalar array into a function
ruleset test8
{
    on_update(farmer)
    {
        for (int i=0; i<5; i++)
        {
            int sum = 0;
            sum += update_int(previous_years[i]);
        }
    }
}

// TESTCASE: send one element of scalar array into a function using iterators with unqualified reference
ruleset test9
{
    on_update(farmer)
    {
        for (auto year : previous_years)
        {
            int sum = 0;
            sum += update_int(year);
        }
    }
}

// TESTCASE: send one element of scalar array into a function using iterators with qualified reference
ruleset test10
{
    on_update(farmer)
    {
        for (auto year : yield.previous_years)
        {
            int sum = 0;
            sum += update_int(year);
        }
    }
}

// TESTCASE: regular for with fields as port of init/condition/increment missing
ruleset test11
{
    on_update(farmer)
    {
        for (; bushels < 5; bushels++)
        {}

        for (bushels = 0; ; bushels++)
        {}

        for (bushels = 0; bushels < 5; )
        {}
    }
}

// TESTCASE: send one element of scalar array into a function using iterators with explicit path reference
ruleset test12
{
    on_update(farmer)
    {
        for (auto year : farmer->yield.previous_years)
        {
            int sum = 0;
            sum += update_int(year);
        }
    }
}
