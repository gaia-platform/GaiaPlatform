////////////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
//
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE.txt file
// or at https://opensource.org/licenses/MIT.
////////////////////////////////////////////////////

// RUN: %gaiat %s --

#include "tags_test.h"

ruleset test1
{
    on_insert(I:incubator)
    {
        use_float(I.min_temp);
    }
}

ruleset test2
{
    on_insert(I:incubator)
    {
        I.min_temp += sensor.value;
        actuator.value = I.max_temp;
    }
}

ruleset test3
{
    on_insert(I:incubator)
    {
        min_temp += sensor.value;
    }
}

ruleset test4 : tables(actuator, incubator)
{
    on_insert(I:incubator)
    {
        I.min_temp += value;
    }
    on_insert(A:actuator)
    {
        A.value += incubator.max_temp;
        value += min_temp;
    }
}

ruleset test5
{
    // One table.
    on_change(A:actuator)
    {
        use_float(A.value);
    }
}

ruleset test6 : tables(actuator)
{
    // One field.
    on_change(A:actuator.value)
    {
        use_float(A.value);
    }
}

ruleset test7
{
    // One table.
    on_update(A:actuator)
    {
        use_float(A.value);
        float v;
        v = A.value;
    }
}

ruleset test8
{
    // One field.
    on_update(A:actuator.value)
    {
        use_float(A.value);
    }
}

ruleset test9
{
    // Table & fields.
    on_update(S:sensor, V:sensor.value, sensor.name, sensor.timestamp)
    {
        float v;
        v = S.value + V.value;
        sensor.name = "perimeter";
    }
}

ruleset test10 : tables(sensor)
{
    on_update(S:sensor)
    {
        use_string(name);
    }
}

ruleset test11
{
    on_update(S:sensor, T:sensor)
    {
        use_string(S.name);
        use_string(T.name);
    }
}

ruleset test12
{
    on_update(raised)
    {
        farmer->Y:yield.bushels = 0;

        int unsigned i = 0;
        if (i == 0)
        {
            Y:yield.bushels += 1;
        }
    }
}

ruleset test14
{
    on_insert(incubator)
    {
        // Ensure the label is a goto target using empty statement.
        LABEL:; sensor.value = max_temp - 1.0;
        if (actuator.value > 3.0)
        {
            goto LABEL;
        }
    }
}

ruleset test16
{
    on_update(animal)
    {
        int unsigned i = 0;
        if (i == 0)
        {
            F:farmer.acreage += 1;
        }
        else
        {
            F:farmer.acreage -= 1;
        }
    }
}

ruleset test17
{
    on_update(raised)
    {
        int unsigned i = 0;
        if (i == 0)
        {
            F:farmer.acreage += 1;
        }
        F:farmer.acreage -= 1;
    }
}

ruleset test18
{
    on_update(raised)
    {
        int unsigned i = 0;
        if (i == 0)
        {}
        else
        {
            F:farmer.acreage += 1;
        }
        F:farmer.acreage -= 1;
    }
}

ruleset test19
{
    on_update(raised)
    {
        int unsigned i = 0;
        if (i == 0)
        {
            /F:farmer.acreage += 1;
        }
        else
        {
            /F:farmer.acreage -= 1;
        }
    }
}

ruleset test20
{
    on_update(incubator)
    {
        int unsigned i = 0;
        if (i == 0)
        {
            /F:farmer.acreage += 1;
        }
        /F:farmer.acreage -= 1;
    }
}

ruleset test21
{
    on_update(incubator)
    {
        int unsigned i = 0;
        if (i == 0)
        {}
        else
        {
            /F:farmer.acreage += 1;
        }
        /F:farmer.acreage -= 1;
    }
}

ruleset test23
{
    on_change(A:actuator.value, B:actuator.name)
    {
        use_float(A.value);
        use_float(B.value);
    }
}

ruleset test24
{
    // Test that C-style comments do not confuse the translation engine.
    /*
    on_update(incubator)
    {
        F:incubator.farmer->farmer->yield.bushels = 0;

        int unsigned i = 0;
        if (i == 0)
        {
            F:incubator.landlord->farmer.acreage += 1;
        }
    }
    */

    on_update(incubator)
    {
        F:incubator.farmer->farmer->yield.bushels = 0;

        int unsigned i = 0;
        if (i == 0)
        {
            F:incubator.landlord->farmer.acreage += 1;
        }
    }
}
