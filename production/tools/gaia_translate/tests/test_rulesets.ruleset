////////////////////////////////////////////////////
// Copyright (c) Gaia Platform Authors
//
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE.txt file
// or at https://opensource.org/licenses/MIT.
////////////////////////////////////////////////////

#include <string>
#include <cstring>
#include <atomic>
#include <vector>

#include <gaia/logger.hpp>
#include "gaia_prerequisites.h"
#include "test_rulesets.hpp"

bool g_oninsert_called;
bool g_oninsert2_called;
bool g_oninsert3_called;
bool g_onchange_called;
bool g_onchange2_called;
bool g_onupdate_called;
bool g_onupdate2_called;
bool g_onupdate3_called;
bool g_onupdate4_called;
test_error_result_t g_oninsert_result;
test_error_result_t g_oninsert2_result;
test_error_result_t g_oninsert3_result;
test_error_result_t g_onchange_result;
test_error_result_t g_onchange2_result;
test_error_result_t g_onupdate_result;
test_error_result_t g_onupdate2_result;
test_error_result_t g_onupdate3_result;
test_error_result_t g_onupdate4_result;
int32_t g_oninsert_value;
int32_t g_oninsert2_value;
int32_t g_oninsert3_value;
int32_t g_onupdate3_value;
std::string g_string_value;

std::atomic<int32_t> g_onupdate_value;
std::atomic<int32_t> g_insert_count;

ruleset test_tags
{
    // test_tags_code.oninsert
    // test_tags_code.multi_inserts
    on_insert(student)
    {
        g_insert_count++;
        g_oninsert_result = test_error_result_t::e_none;
        g_oninsert_called = true;
    }

    // test_tags_code.oninsert
    on_insert(S:student)
    {
        g_oninsert2_value = S.age;
        g_oninsert2_result = test_error_result_t::e_none;
        g_oninsert2_called = true;
    }

    // test_tags_code.basic_tags
    on_insert(R:registration)
    {
        // Check value linked references.
        if (strcmp(R.reg_id, reg_id) != 0)
        {
            g_oninsert3_result = test_error_result_t::e_tag_field_mismatch;
        }
        else if (strcmp(reg_id, registration.reg_id) != 0)
        {
            g_oninsert3_result = test_error_result_t::e_tag_field_mismatch;
        }
        else {
            g_oninsert3_result = test_error_result_t::e_none;
        }
        g_oninsert3_called = true;
    }

    // test_tags_code.oninsert
    // test_tags_code.onchange
    // test_tags_code.onupdate
    on_change(student)
    {
        g_onchange_result = test_error_result_t::e_none;
        g_onchange_called = true;
    }

    // test_tags_code.oninsert
    // test_tags_code.onupdate
    on_change(student.age)
    {
        g_onchange2_result = test_error_result_t::e_none;
        g_onchange2_called = true;
    }

    // test_tags_code.onchange
    // test_tags_code.onupdate
    on_update(student)
    {
        g_onupdate_result = test_error_result_t::e_none;
        g_onupdate_called = true;
    }

    // test_tags_code.onchange
    on_update(student.surname)
    {
        g_onupdate2_result = test_error_result_t::e_none;
        g_onupdate2_called = true;
    }

    // test_tags_code.onupdate
    on_update(student.age)
    {
        g_onupdate3_value = age;
        g_onupdate3_result = test_error_result_t::e_none;
        g_onupdate3_called = true;
    }

    // test_tags_code.onchange
    // test_tags_code.onupdate
    on_update(student.age, student.surname)
    {
        g_onupdate4_result = test_error_result_t::e_none;
        g_onupdate4_called = true;
    }
}

ruleset test_queries
{
    // test_queries_code.new_registration
    on_insert(R:registration)
    {
        printf("on_insert(registration) = %s\n", registration.reg_id);
        printf("course name=%s\n", course.name);
        status = "Ineligible";

        // Has this student taken all prerequisites?
        for (course.requires->prereq.prereq->PC:course)
        {
            bool taken = false;
COURSE_TAKEN:
            if (student->registration->course.course_id == PC.course_id)
            {
                taken = true;
                break COURSE_TAKEN;
            }
            if (!taken)
            {
                printf("student has not taken course %s\n", PC.course_id);
                return;
            }
        }

        // Has this student passed all prerequisites with minimum grades?
        if (course.requires->P:prereq.prereq->course->R1:registration->student.student_id
            == registration->student.student_id)
        {
            if (R1.grade < P.min_grade)
            {
                printf("student has insufficient prerequisite grade: %f, needed %f\n", R1.grade, P.min_grade);
                return;
            }
        }
        status = "Eligible";

        g_insert_count++;
        g_oninsert_result = test_error_result_t::e_none;
        g_oninsert_called = true;
    }

    // test_queries_code.sum_of_ages
    on_insert(S:student)
    {
        int32_t age_sum = 0;
        age_sum += /student.age;
        g_oninsert2_value = age_sum;
        g_oninsert2_result = test_error_result_t::e_none;
        g_oninsert2_called = true;
    }

    // test_queries_code.basic_implicit_navigation
    // test_queries_code.basic_implicit_fork
    on_update(S:student)
    {
        // Implicit query from student to course.
        // Result should be the total of hours for all courses taken by student.
        int32_t hours_total = 0;
        hours_total += hours;
        g_onupdate_value = hours_total;
        g_onupdate_result = test_error_result_t::e_none;
        g_onupdate_called = true;
    }

    on_update (registration)
    {
        g_onupdate_value = total_hours + hours;
        g_onupdate_called = true;
    }
}

ruleset test_query_1
{
    // test_queries_code.sum_of_hours
    // Auto-sum of student hours.
    on_insert(registration)
    {
        total_hours = 0;
        // Both 'total_hours' and 'hours' are single-cardinality implicit test_queries
        // from the registration row.
        student.total_hours += hours;
        g_oninsert_value = student.total_hours;
        g_oninsert_result = test_error_result_t::e_none;
        g_oninsert_called = true;
    }
}

ruleset test_query_2
{
    // test_queries_code.sum_of_all_hours
    // Auto-sum of student hours.
    on_insert(registration)
    {
        student.total_hours = 0;
        // Visit all courses in which the student is registered.
        student.total_hours += student->registration->course.hours;
        g_oninsert_value = student.total_hours;
        g_oninsert_result = test_error_result_t::e_none;
        g_oninsert_called = true;
    }
}

ruleset test_query_3
{
    // test_queries_code.tag_define_use
    on_insert(registration)
    {
        // Visit all courses in which the student is registered. Use the tags.
        S:student->R:registration->C:course.hours = S.total_hours + C.hours;

        g_oninsert_value = 0;
        g_oninsert_result = test_error_result_t::e_none;
        g_oninsert_called = true;
    }

    on_update(course.hours)
    {
        // When this rule is fired, we know that the commit for the
        // insertion of a registration rule fired and can proceed with verifying
        // the course hours in the test.
        g_onupdate_called = true;
    }
}

ruleset test_query_4
{
    // test_queries_code.if_stmt
    on_insert(student)
    {
        int a = 0;
        if (student.total_hours > 10)
        {
            a += age;
        }
        g_oninsert_value = a;
        g_oninsert_result = test_error_result_t::e_none;
        g_oninsert_called = true;
    }

    // test_queries_code.if_stmt2
    // Forward chaining rule. Stops when hours are 1.
    {
        if (@hours > 1)
        {
            hours -= 1;
            student.total_hours += 1;
        }
        else
        {
            // This should only happen the last time.
            g_onupdate_result = test_error_result_t::e_none;
            g_onupdate_called = true;
        }
        g_onupdate_value++;
    }

    // test_queries_code.if_stmt3
    {
        if (@student->G:registration.grade == c_grade_c)
        {
            student.gpa *= 1.1;
        }
        else
        {
            student.gpa *= 0.9;
        }
        nomatch
        {
            student.gpa = 0.0;
        }
        g_onupdate_value = int(10*student.gpa);
        g_onupdate_result = test_error_result_t::e_none;
        g_onupdate_called = true;
    }
}

ruleset test_query_6
{
    on_update(student)
    {
        if (strcmp(surname, "Richard") == 0)
        {
            g_string_value = std::string("found Richard");
        }
        else
        {
            g_string_value = std::string("failure");
        }
        nomatch
        {
            g_string_value = std::string("nomatch failure");
        }
        g_onupdate_result = test_error_result_t::e_none;
        g_onupdate_called = true;
    }

    on_insert(student)
    {
        if (student->registration->course.hours > 0)
        {
            g_string_value = std::string("found hours > 0");
        }
        else
        {
            g_string_value = std::string("found hours <= 0");
        }
        nomatch
        {
            g_string_value = std::string("nomatch success");
        }
        g_onupdate_result = test_error_result_t::e_none;
        g_onupdate_called = true;
    }
}

ruleset test_query_7
{
    on_insert(registration)
    {
        if (student.total_hours == 0)
        {
            g_string_value = std::string("found total_hours == 0");
        }
        // Note that the registration is not connected to a course.
        else if (course.hours > 0)
        {
            g_string_value = std::string("found hours > 0");
        }
        else
        {
            g_string_value = std::string("didn't find hours > 0");
        }
        nomatch
        {
            g_string_value = std::string("correct nomatch");
        }
        nomatch
        {
            g_string_value = std::string("incorrect nomatch");
        }
        g_oninsert_result = test_error_result_t::e_none;
        g_oninsert_called = true;
    }
}

ruleset test_query_8
{
    on_insert(student)
    {
        // This student will have no registrations. The nomatch should execute.
        if (student->registration.grade == c_grade_f)
        {
            g_string_value = std::string("found grade 'F' > 0");
        }
        else
        {
            g_string_value = std::string("found grade != 'F'");
        }
        nomatch
        {
            g_string_value = std::string("nomatch success");
        }
        g_oninsert_result = test_error_result_t::e_none;
        g_oninsert_called = true;
    }
}

ruleset test_query_9
{
    on_insert(student)
    {
        char str[200];
        sprintf(str, "%d%4.1f %d ", S:student.total_hours, S->R:registration.grade, R->course.hours);
        g_string_value = std::string(str);
        g_oninsert_result = test_error_result_t::e_none;
        g_oninsert_called = true;
    }
}

ruleset test_query_10
{
    on_insert(student)
    {
        int count = 0;
        for (/parents->student)
        {
            count++;
        }
        for (/student->parents)
        {
            count++;
        }
        g_oninsert_value = count;
        g_oninsert_result = test_error_result_t::e_none;
        g_oninsert_called = true;
    }
}

// Used in rules in test_compile.
float adjustment(float, float, float)
{
    return 0.0;
}

enum class e_hours_range_t : unsigned int
{
    few      = 0,
    normal   = 1,
    too_much = 2
};

// This ruleset is not used, but its translation must compile with C++.
ruleset test_compile
{
    on_insert(student)
    {
        student.insert(surname: course.name, total_hours: course.hours);
    }

    on_update(student)
    {
    BREAK1_TARGET:
        for (R:registration)
        {
    BREAK2_TARGET:
            for (R->C:course)
            {
    BREAK3_TARGET:
                for (C.required_by->P:prereq)
                {
                    break BREAK1_TARGET;
                    for (P.prereq->course)
                    {
                        break BREAK3_TARGET;
                    }
                }
                break BREAK2_TARGET;
            }
        }
        // A goto should cause the break/continue label to exist in translated code.
        goto BREAK1_TARGET;
    }

    // TESTCASE: use field name same as a catalog field name, expect no conflict
    on_insert(course)
    {
        printf("%s\n", name);
    }

    // Same as above, but a longer navigation.
    on_insert(student)
    {
        printf("%s\n", name);
    }

    // Breaking to a label is not yet supported in the declarative while construct.
#ifdef TEST_FAILURES
    on_update(student)
    {
    BREAK_TARGET:
        while (hours < 13)
        {
            printf("hours=%d\n", hours);
            hours++;
            break BREAK_TARGET;
        }
        int i = 0;
        i++;
    }
#endif

    // TESTCASE: use declarative condition inside while statement
    on_update(student)
    {
        while (hours < 13)
        {
            printf("hours=%d\n", hours);
            hours++;
        }
    }

    // TESTCASE: use declarative condition inside do-while statement
    on_update(student)
    {
        do
        {
            printf("hours=%d\n", hours);
            hours++;
        }
        while (hours < 13);
    }

    // TESTCASE: make sure the nomatch is translated into compilable code while using explicit path
    on_insert(registration)
    {
        gaia::prerequisites::student_t studdy;
        if (/S:student.age > 12 && strcmp(S->parents.name_father, student.student_id) == 0)
        {
            studdy = S;
        }
        nomatch
        {
            fprintf(stderr, "cannot find father's name that matches student id %s\n", student.student_id);
        }
    }

    // TESTCASE: should not need qualification to access row's field value
    on_insert(registration)
    {
        student.age = 34;
        if (strcmp(student->parents.name_father, "Lawrence") == 0)
        {
            course.course_id = student.student_id;
        }
    }

    // TESTCASE: access anchor row relatoinships from inside if
    on_insert(registration)
    {
        if (strcmp(/P:parents.name_father, "Lawrence") == 0)
        {
            fprintf(stderr, "Found %s and %s\n", P.name_mother, course.course_id);
        }
    }

    // TESTCASE: table out of scope when used in if statement
    on_insert(registration)
    {
        fprintf(stderr, "student id = %s\n", student.student_id);
        if (strcmp(student->parents.name_father, "Lawrence") == 0)
        {
            fprintf(stderr, "Child of Lawrence student id = %s\n", student.student_id);
        }
    }

    // TESTCASE: verify the presence of all rows within a declarative if
    on_update(total_hours)
    {
        if (total_hours == 0)
        {
            total_hours += hours;
            fprintf(stderr, "Total class hours for %s is %d\n", surname, total_hours);
        }
    }

    // TESTCASE: reference of anchor row not found within 'if' statement
    on_insert(registration)
    {
        if (strcmp(/P:parents.name_father, "Lawrence")== 0)
        {
            student.parents.connect(P);
            student.parents.disconnect();
        }
    }

    on_update(s:student)
    {
        total_hours++;
        student.total_hours++;
        s.total_hours++;
    }

    on_update(R:registration.grade)
    {
        if (student.total_hours > 10)
        {
            if (!(registration.grade >= student.gpa && registration.grade <= student.gpa+1))
            {
                for(student->RR:registration)
                {
                    RR.grade = adjustment(student.gpa, R.grade, RR.grade);
                }
            }
        }
    }

    // TESTCASE: examine the translation of a switch statement without curly braces
    on_insert(student)
    {
        switch (e_hours_range_t(C:course.hours))
        {
            case e_hours_range_t::few      : C.hours += 1; break;
            case e_hours_range_t::normal   : C.hours += 2; break;
            case e_hours_range_t::too_much : C.hours += 3; break;
        }
    }

    // TESTCASE: examine the translation of a switch statement without curly braces, no loops
    on_insert(course)
    {
        switch (e_hours_range_t(C:course.hours))
        {
            case e_hours_range_t::few      : C.hours += 1; break;
            case e_hours_range_t::normal   : C.hours += 2; break;
            case e_hours_range_t::too_much : C.hours += 3; break;
        }
    }
}

ruleset test_insert_delete
{
    on_update(S:student)
    {
        // This is a technique for deleting members of an iteration.
        // It restarts the iterator after obtaining each first member.
        bool deleted;
        do
        {
            deleted = false;
DELETE_REG:
            for (/R:registration)
            {
                R.remove();
                deleted = true;
                g_onupdate_value++;
                break DELETE_REG;
            }
        }
        while (deleted);
        g_onupdate_called = true;
    }
}

ruleset test_insert_delete_2
{
    on_insert(E:enrollment_log)
    {
        gaia::prerequisites::student_t S
            = student.insert(student_id: E.log_student_id, surname: E.log_surname, age: E.log_age);
        gaia::prerequisites::course_t C
            = course.insert(course_id: E.log_course_id, name: E.log_name, hours: E.log_hours);
        registration.insert(reg_id: E.log_reg_id, student_id: E.log_student_id, course_id: E.log_course_id);
    }

    on_insert(student)
    {
        student.total_hours += course.hours;
    }

    /* Re-enable this rule when rule ordering is enforced. Must also update the
       code in test_insert_delete_code.build_database (as documented there).
    on_insert(course)
    {
        hours *= 2;
    }
    */

    on_insert(registration)
    {
        status = surname;
    }

    on_update(status)
    {
        grade = c_grade_d + c_grade_plus;
    }
}

ruleset test_connect_1_n
{
    on_insert(student)
    {
        auto r1 = registration.insert(reg_id: "reg001", student_id: student.student_id);

        for(/r:registration)
        {
            r.student_id = student.student_id;
        }

        gaia::prerequisites::registration_t r2 = registration.insert(reg_id: "reg002", student_id: student.student_id);

        gaia::prerequisites::registration_writer w;
        w.reg_id = "reg003";
        w.student_id = student.student_id;
        w.insert_row();

        registration.insert(reg_id: "reg004", student_id: student.student_id);
        registration.insert(reg_id: "reg005", student_id: student.student_id);
    }
};

ruleset test_connect_1_1
{
    on_insert(student)
    {
        if (strcmp(student.student_id, "stu001") == 0)
        {
            auto p = parents.insert(name_father: "Claudio", name_mother: "Patrizia");
            student.connect(p);
        }
        else
        {
            gaia::prerequisites::parents_writer w;
            w.name_father = "John";
            w.name_mother = "Jane";
            auto p = gaia::prerequisites::parents_t::get(w.insert_row());
            student.parents.connect(p);
        }
    }
}

ruleset test_disconnect_1_n
{
    on_insert(student)
    {
        if (strcmp(student.student_id, "stu001") == 0)
        {
            for(/r:registration)
            {
                r.student_id = nullptr;
            }
        }
        else
        {
            // This doesn't work for the same reason as delete. You cannot
            // modify a containers membership and continue to iterate over the
            // containers member.  If stable iterators are implemented then this
            // test can be uncommented.
#ifdef TEST_FAILURES
            student.disconnect(registration);
#endif
        }
    }

    on_insert(course)
    {
        if (strcmp(course.course_id, "cou001") == 0)
        {
            for (/r:registration)
            {
                r.course_id = nullptr;
            }
        }
        else
        {
            // This doesn't work for the same reason as delete. See above comment.
#ifdef TEST_FAILURES
            course.registrations.disconnect(registration);
#endif
        }
    }
};

ruleset test_disconnect_1_1
{
    on_insert(student)
    {
        student.parents.disconnect();
    }
};

ruleset test_disconnect_delete
{
    on_insert(R:registration)
    {
        registration.student_id = nullptr;
        registration.remove();
    }
}

ruleset test_force_delete
{
    on_insert(course)
    {
        major.remove(true);
    }
}

ruleset test_connect_child_parent_1_1
{
    on_insert(parents)
    {
        auto s = student.insert(student_id: "1", surname: "test");
        parents.connect(s);
    }
};

ruleset test_disconnect_child_parent_1_1
{
    on_insert(student)
    {
        for(/p:parents)
        {
            p.disconnect(student);
        }
    }
};

ruleset test_connect_child_parent_1_n
{
    on_insert(course)
    {
        auto m = major.insert(major_name: "test1");
        course.connect(m);
    }
};

ruleset test_disconnect_child_parent_1_n
{
    on_insert(major)
    {
        course.disconnect(major);
    }
};

ruleset test_clear_child_parent_1_n
{
    on_insert(course)
    {
        course.course_major.clear();
    }
};

ruleset vlr_rules
{
    on_update(floor_num)
    {
        auto c = floor(345.235345);
        gaia_log::app().info("{} has arrived at: {}", person_name, floor.department);

        auto me = person_name;

        if (0 != strcmp(me, floor->person.person_name))
        {
            gaia_log::app().info("{} says: Hi, {}!", person_name, me);
        }
        gaia_log::app().info("---");
    }
}

ruleset pick_and_place_ruleset
{
    {
        if (@pick && !@place)
        {
            pick_action.insert();
        }
    }

    on_insert(pick_action)
    {
        move_action.insert();
    }

    on_insert(move_action)
    {
        gaia_log::app().info("Moving...");
    }
}
