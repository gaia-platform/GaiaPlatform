#include "gaia/logger.hpp"
#include "gaia/events.hpp"

int g_rule_called = 0;
int g_insert_called = 0;
int g_update_called = 0;
int g_actuator_rule_called = 0;

ruleset test
{
    OnUpdate(incubator.min_temp)
    {
        gaia_log::app().warn("[rule-1] begin {} {} {} {}", rule_context.ruleset_name, rule_context.rule_name, rule_context.event_type, rule_context.gaia_type);

        max_temp = sensor.value + min_temp;
        max_temp = sensor.value + 4;
        if (actuator.value > 0)
        {
            g_actuator_rule_called++;
        }

        if (sensor.value > 5)
        {
            actuator.value = 1000;
        }
        g_update_called++;
        g_rule_called++;
    }

    OnChange(s:sensor.value)
    {
        gaia_log::app().warn("[rule-1] begin {} {} {} {}", rule_context.ruleset_name, rule_context.rule_name, rule_context.event_type, rule_context.gaia_type);

        max_temp = s.value + min_temp;
        max_temp = s.value + 4;
        if (actuator.value > 0)
        {
            g_actuator_rule_called++;
        }

        if ((const gaia::db::triggers::event_type_t)rule_context.event_type == gaia::db::triggers::event_type_t::row_insert)
        {
            g_insert_called++;
        }

        if ((const gaia::db::triggers::event_type_t)rule_context.event_type == gaia::db::triggers::event_type_t::row_update)
        {
            if (s.value > 5)
            {
                actuator.value = 1000;
            }
            g_update_called++;
        }
        g_rule_called++;
    }
}

ruleset test2
{
}

void use_string(const char* name)
{

}

ruleset test3
{
    OnUpdate(S:sensor, T:sensor)
    {
        use_string(S.name);
        use_string(T.name);
    }
}

ruleset testE13
{
    OnInsert(sensor)
    {
        float daily = 0;
        daily += /sensor.value;
    }
}

ruleset test22
{
    OnInsert(S:sensor)
    {
        S->incubator.min_temp += S.value;
    }
}

ruleset test21
{
    OnInsert(I:incubator)
    {
        I->actuator.value += 1.0;
    }
}
