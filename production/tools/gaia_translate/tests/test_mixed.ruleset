////////////////////////////////////////////////////
// Copyright (c) Gaia Platform Authors
//
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE.txt file
// or at https://opensource.org/licenses/MIT.
////////////////////////////////////////////////////

#include "gaia_barn_storage.h"

int g_rule_called = 0;
int g_insert_called = 0;
int g_update_called = 0;
int g_actuator_rule_called = 0;

using namespace gaia::barn_storage;

extern int g_test_mixed_value;

void f(gaia::barn_storage::incubator_t i)
{
    i.sensors().insert(sensor_t::insert_row("TestSensor1", 0, 0.0));
    i.actuators().insert(actuator_t::insert_row("TestActuator1", 0, 0.0));
}

void f1(const gaia::barn_storage::incubator_t& i)
{
    i.sensors().insert(sensor_t::insert_row("TestSensor2", 0, 0.0));
    i.actuators().insert(actuator_t::insert_row("TestActuator2", 0, 0.0));
}

void f2(gaia::barn_storage::incubator_t& i)
{
    i.sensors().insert(sensor_t::insert_row("TestSensor3", 0, 0.0));
    i.actuators().insert(actuator_t::insert_row("TestActuator3", 0, 0.0));
}

ruleset test_mixed
{
    on_insert(i:incubator)
    {
        f(incubator);
        f1(incubator);
        f2(incubator);
        f(i);
        f1(i);
        f2(i);
        gaia::barn_storage::incubator_t ii = i;
        gaia::barn_storage::incubator_t iii = incubator;
    }

    // If the sensor was deleted, this rule will not be fired.
    on_insert(S:sensor)
    {
        S.value += 1.0;
        if (S.value > 1.0)
        {
            S.value = 1.0;
            g_test_mixed_value = 1;
        }
        nomatch
        {
            // This is the correct path, since there is no S.
            g_test_mixed_value = 2;
        }
    }
}
