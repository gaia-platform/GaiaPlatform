////////////////////////////////////////////////////
// Copyright (c) Gaia Platform Authors
//
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE.txt file
// or at https://opensource.org/licenses/MIT.
////////////////////////////////////////////////////

#include <atomic>
#include <stdexcept>

#include "gaia/logger.hpp"
#include "gaia/rules/rules.hpp"

std::atomic<int32_t> g_rule_called;
std::atomic<int32_t> g_insert_called;
std::atomic<int32_t> g_update_min_temp_called;
std::atomic<int32_t> g_update_max_temp_called;
std::atomic<int32_t> g_update_sensor_value_called;
std::atomic<int32_t> g_actuator_rule_called;
std::atomic<int32_t> g_rule_navigation_loop_count;

ruleset test
{
    on_update(incubator.min_temp)
    {
        gaia_log::app().warn("[rule-1] begin {} {} {} {}", rule_context.ruleset_name, rule_context.rule_name, rule_context.event_type, rule_context.gaia_type);

        max_temp = sensor.value + min_temp;
        max_temp = sensor.value + 4;
        if (actuator.value > 0)
        {
            g_actuator_rule_called++;
        }

        if (sensor.value > 5)
        {
            actuator.value = 1000;
        }
        g_update_min_temp_called++;
        g_rule_called++;
    }

    on_update(incubator.max_temp)
    {
        gaia_log::app().warn("[rule-2] begin {} {} {} {}", rule_context.ruleset_name, rule_context.rule_name, rule_context.event_type, rule_context.gaia_type);
        g_update_max_temp_called++;
        g_rule_called++;
    }

    on_update(actuator.value)
    {
        gaia_log::app().warn("[rule-3] begin {} {} {} {}", rule_context.ruleset_name, rule_context.rule_name, rule_context.event_type, rule_context.gaia_type);
        g_actuator_rule_called++;
        g_rule_called++;
    }

    on_change(s:sensor.value)
    {
        gaia_log::app().warn("[rule-4] begin {} {} {} {}", rule_context.ruleset_name, rule_context.rule_name, rule_context.event_type, rule_context.gaia_type);
        max_temp = s.value + min_temp;
        max_temp = s.value + 4;
        if (actuator.value > 0)
        {
            g_actuator_rule_called++;
        }

        if (rule_context.event_type == gaia::db::triggers::event_type_t::row_insert)
        {
            g_insert_called++;
        }

        if (rule_context.event_type == gaia::db::triggers::event_type_t::row_update)
        {
            if (s.value > 5)
            {
                actuator.value = 1000;
            }
            g_update_sensor_value_called++;
        }
        g_rule_called++;
    }
}

ruleset test2
{
}

void use_string(const char*)
{

}

ruleset test3
{
    on_update(S:sensor, T:sensor)
    {
        use_string(S.name);
        use_string(T.name);
    }
}

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused"
ruleset testE13
{
    on_insert(sensor)
    {
        float daily = 0;
        daily += /sensor.value;
    }
}
#pragma clang diagnostic pop

#if 0
// This rule interferes with 'ruleset set' rules
ruleset test21
{
    on_insert(I:incubator)
    {
        I->actuator.value += 1.0;
    }
}
#endif

void use_float(float)
{
}

ruleset testE21
{
    on_update(incubator)
    {
        if (I:incubator.max_temp == 100.0)
        {
            use_float(I.min_temp);
        }
    }
}

ruleset testE22
{
    on_update(incubator)
    {
        for (/S:sensor)
        {
            use_string(S->incubator.name);
            if (strcmp(S->incubator.name, "1") == 0)
            {
                return;
            }
        }
    }
}

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused"
ruleset testE23
{
    on_update(incubator)
    {
        if (/S:sensor.value > 5 && strcmp(S->incubator.name, "1") == 0)
        {
        }
        nomatch
        {
            int test = 0;
            test = 1;
        };
    }
}
#pragma clang diagnostic pop

void use_id(unsigned int)
{
}

ruleset testE24
{
    on_update(incubator)
    {
        auto id = incubator.gaia_id();
        use_id(id);
    }
}

ruleset testE25
{
     on_update(sensor)
     {
        if (strcmp(/S:sensor.name, "1") == 0)
        {
            incubator.connect(actuator);
        }
     }
}

ruleset testE26
{
     on_update(incubator)
     {
        for (w:sensor)
        {
            w.timestamp = 0;
        }
     }
}

ruleset testE27
{
     on_update(sensor)
     {
        if ((strcmp(S:sensor.name, "1") == 0))
        {
            incubator.connect(actuator);
        }
     }
}

ruleset testE28
{
    on_insert(incubator)
    {
        if (incubator.name != nullptr)
        {
        }
        nomatch
        {
            for (incubator->s:sensor) { use_string(s.name);}
            nomatch { use_string(incubator.name);}
        }
    }
}
namespace test_test{
    enum test_enum
    {
        test1,
        test2,
        test3,
        test4,
    };
}

ruleset testE29
{
    on_insert(sensor)
    {
        switch(sensor.timestamp)
        {
            case test_test::test1 : sensor.timestamp=1; break;
            case test_test::test2: sensor.timestamp=2; break;
            case test_test::test3:sensor.timestamp=3; break;
            case test_test::test4 :sensor.timestamp=4; break;
        }
    }
}

const char* generate_error_message(double)
{
    return "test";
}

ruleset testE30
{
    on_insert(incubator)
    {
        if (strcmp(incubator.name, "ttt") == 0)
        {
            throw std::runtime_error(generate_error_message(sensor.value));
        }
    }
}

ruleset test_comment
{
    /* COMMENT
     * COMMENT
     * COMMENT
     */
    on_insert(sensor)
    {
    }
}

ruleset test_comment_rule
{

    on_insert(sensor)
    {
    /* COMMENT
     COMMENT
     COMMENT*/
     timestamp = 5;
    }
}

ruleset testE31
{
    on_update(incubator.max_temp, incubator.min_temp)
    {
        for (S:sensor)
        {
            if (S.value > min_temp || S.value < max_temp)
            {
                g_rule_navigation_loop_count++;
            }
        }
    }
}

ruleset testE32
{
    on_update(I:incubator.max_temp)
    {
        if (sensor)
        {
        }
        if (I)
        {
        }
        for (S:sensor)
        {
            if (S)
            {
            }
        }
    }
}

// Make event_type field to be an actual event_type_t type when needed.
ruleset testE33
{
    on_insert(incubator)
    {
        gaia_log::app().info("{} {} {} {}",
            rule_context.ruleset_name,
            rule_context.rule_name,
            gaia::db::triggers::event_type_name(rule_context.event_type),
            rule_context.gaia_type);
    }
}

#define TEST 5.0
ruleset test_define
{
    on_update(actuator.timestamp)
    {
        actuator.value = TEST;
        incubator->actuator.value = TEST;
        use_float(TEST);
    }
}

ruleset test15
{
    on_update(incubator.name)
    {
        S:sensor.value = S.value * 1.01;
    }
}

ruleset test16
{
    on_update(sensor.name)
    {
        /actuator.timestamp = sensor.timestamp;
    }
}

ruleset test17
{
    on_update(sensor.name)
    {
        /actuator.timestamp++;
    }
}
