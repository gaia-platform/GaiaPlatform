[apt]
clang-format
clang-tidy
{enable_if('GaiaRelease')}debhelper
{enable_if('ubuntu:20.04')}flatbuffers-compiler
libcap-dev
{enable_if_not_any('GaiaRelease', 'GaiaLLVMTests')}libexplain-dev
{enable_if('ubuntu:18.04')}libstdc++-8-dev
{enable_if('ubuntu:20.04')}libstdc++-10-dev
openjdk-8-jdk
python3-dev
{enable_if('GaiaRelease')}rpm

[gaia]
# FIXME production/sql/src has a dependency on demos/airport_q1.
production/cmake
production/sql
third_party/production/backward
third_party/production/bison
third_party/production/cmake
third_party/production/daemonize
third_party/production/flatbuffers
third_party/production/flatcc
third_party/production/googletest
{enable_if_any('GaiaRelease','GaiaLLVMTests')}third_party/production/libexplain
third_party/production/postgresql
third_party/production/pybind11
third_party/production/rocksdb
third_party/production/cpptoml
third_party/production/fmt
third_party/production/spdlog
third_party/production/spdlog_setup
third_party/production/tabulate
{enable_if_any('GaiaRelease','GaiaLLVMTests')}third_party/production/TranslationEngineLLVM
{enable_if('GaiaRelease')}third_party/production/CPackDebHelper
demos/incubator
dev_tools/hooks

{enable_if('GaiaLLVMTests')}[pip]
psutil

[pre_run]
# Enable the Postgres FDW to run under AddressSanitizer.
# We can't put this in third_party/production/postgresql/gdev.cfg because clang-8 isn't yet available when that is run.
echo "LD_PRELOAD = '$(clang -print-file-name=libclang_rt.asan-$(uname -m).so)'" >> /etc/postgresql/12/main/environment
echo "ASAN_OPTIONS = 'detect_leaks=0'" >> /etc/postgresql/12/main/environment

# Ubuntu 18.04 still defaults python to Python2. We want to detect python as Python3.
{enable_if('ubuntu:18.04')}update-alternatives --install /usr/bin/python python /usr/bin/python3.6 10

{enable_if('ubuntu:18.04')}apt-add-repository ppa:hnakamur/flatbuffers \
    && apt-get update \
    && apt-get install -y flatbuffers-compiler

[run]
cmake \
    -DFAIL_ON_WARNINGS:BOOL=OFF \
    --log-level=VERBOSE -Wno-dev \
    {enable_if('GaiaRelease')}-DCMAKE_MODULE_PATH=/usr/local/lib/cmake/CPackDebHelper \
    {enable_if('GaiaLLVMTests')}-DBUILD_GAIA_LLVM_TESTS=ON \
    {enable_if_any('GaiaRelease','GaiaLLVMTests')}-DLLVM_ENABLE_EH=ON \
    {enable_if_any('GaiaRelease','GaiaLLVMTests')}-DLLVM_BUILD_TOOLS=OFF \
    {enable_if_any('GaiaRelease','GaiaLLVMTests')}-DCLANG_BUILD_TOOLS=OFF \
    {enable_if_any('GaiaRelease','GaiaLLVMTests')}-DLLVM_ENABLE_RTTI=ON \
    {enable_if_any('GaiaRelease','GaiaLLVMTests')}-DCMAKE_BUILD_TYPE=Release \
    {enable_if_any('GaiaRelease','GaiaLLVMTests')}-DLLVM_ENABLE_PROJECTS=clang \
    {enable_if_any('GaiaRelease','GaiaLLVMTests')}-DBUILD_GAIA_RELEASE=ON \
    {enable_if_any('GaiaRelease','GaiaLLVMTests')}-G "Unix Makefiles" \
    {source_dir('production')}

# LSAN will cause failures during docker build time since we cannot allow the
# build context to have privileged information about the host system.  Doing so
# would make it impossible to make these builds repeatable. It only needs to be
# disabled during `gdev build` (`docker build` under the hood), but the same is
# not true while inside a container built by `gdev run` (`docker run` under the
# hood) since we do enable privileged information about the host system in that
# context.
{enable_if_not('GaiaLLVMTests')}LSAN_OPTIONS=detect_leaks=0 \
    make -j$(nproc)

{enable_if('GaiaLLVMTests')}LSAN_OPTIONS=detect_leaks=0 \
    make -j$(nproc) check-all

# Database needs to be in well-known path for tests to pass.
{enable_if_not('GaiaLLVMTests')}cd {build_dir('production/db/core')}
{enable_if_not('GaiaLLVMTests')}make install
