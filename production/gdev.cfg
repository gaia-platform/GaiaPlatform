[apt]
{enable_if('GaiaRelease')}debhelper
libcap-dev
openjdk-8-jdk
python3-dev
{enable_if('GaiaRelease')}rpm

[gaia]
# FIXME production/sql/src has a dependency on demos/airport_q1.
production/cmake
production/sql
third_party/production/backward
third_party/production/bison
third_party/production/cmake
third_party/production/daemonize
third_party/production/flatbuffers
third_party/production/googletest
third_party/production/libexplain
third_party/production/json
third_party/production/postgresql
third_party/production/pybind11
third_party/production/rocksdb
third_party/production/cpptoml
third_party/production/tabulate
third_party/production/liburing

# The bundle directory contains opensource project modified by Gaia.
third_party/bundle/gaia_spdlog
third_party/bundle/gaia_spdlog_setup

# The third third_party projects build and wrap into a library
# the content of the corresponding bundle folder.
third_party/production/gaia_spdlog
third_party/production/gaia_spdlog_setup

{enable_if_any('GaiaRelease','GaiaLLVMTests')}third_party/production/TranslationEngineLLVM
{enable_if('GaiaRelease')}third_party/production/CPackDebHelper
dev_tools/hooks

{enable_if('GaiaLLVMTests')}[pip]
psutil

[pre_run]
# Enable the Postgres FDW to run under AddressSanitizer.
# We can't put this in third_party/production/postgresql/gdev.cfg because clang isn't yet available when that is run.
echo "LD_PRELOAD = '$(clang-13 -print-file-name=libclang_rt.asan-$(uname -m).so)'" >> /etc/postgresql/12/main/environment
echo "ASAN_OPTIONS = 'detect_leaks=0'" >> /etc/postgresql/12/main/environment

# Ubuntu 18.04 still defaults python to Python2. We want to detect python as Python3.
{enable_if('ubuntu:18.04')}update-alternatives --install /usr/bin/python python /usr/bin/python3.6 10

# Default persistent store location.
mkdir -p /var/lib/gaia/db

{enable_if_not('SkipBuild')}[run]
cmake \
    {enable_if_any('Debug', 'GaiaRelease','GaiaLLVMTests')}-G "Unix Makefiles" \
    --log-level=VERBOSE -Wno-dev \
    {enable_if('Coverage')}-DCMAKE_BUILD_TYPE=RelWithDebInfo \
    {enable_if('Coverage')}-DCMAKE_CXX_FLAGS="-fprofile-arcs -ftest-coverage -DCOVERAGE_RUN=1" \
    {enable_if('Coverage')}-DCMAKE_C_FLAGS="-fprofile-arcs -ftest-coverage -DCOVERAGE_RUN=1" \
    {enable_if('Debug')}-DCMAKE_BUILD_TYPE=Debug \
    {enable_if('GaiaRelease')}-DCMAKE_MODULE_PATH=/usr/local/lib/cmake/CPackDebHelper \
    {enable_if('GaiaLLVMTests')}-DBUILD_GAIA_LLVM_TESTS=ON \
    {enable_if_any('GaiaRelease','GaiaLLVMTests')}-DBUILD_GAIA_RELEASE=ON \
    {source_dir('production')}

# LSAN will cause failures during docker build time since we cannot allow the
# build context to have privileged information about the host system.  Doing so
# would make it impossible to make these builds repeatable. It only needs to be
# disabled during `gdev build` (`docker build` under the hood), but the same is
# not true while inside a container built by `gdev run` (`docker run` under the
# hood) since we do enable privileged information about the host system in that
# context.
export ASAN_OPTIONS=detect_leaks=0

{enable_if_not('GaiaLLVMTests')}cmake --build . --target all --parallel

{enable_if('GaiaLLVMTests')}cmake --build . --target check-all --parallel

# Database needs to be in well-known path for tests to pass.
{enable_if_not('GaiaLLVMTests')}cmake --install db/core
