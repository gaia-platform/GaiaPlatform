[apt]
{enable_if_not('Lint')}clang-format-13
{enable_if_not('Lint')}clang-tidy-13
{enable_if('GaiaRelease')}debhelper
{enable_if('GaiaRelease')}rpm
{enable_if('ubuntu:20.04')}flatbuffers-compiler
{enable_if_not('Lint')}libcap-dev
{enable_if_not('Lint')}openjdk-8-jdk
{enable_if_not('Lint')}python3-dev
{enable_if_not('Lint')}cppcheck

[env]
GAIA_VERSION=0.3.2
GAIA_PRE_RELEASE=beta

[gaia]
# FIXME production/sql/src has a dependency on demos/airport_q1.
{enable_if_not('Lint')}production/cmake
{enable_if_not('Lint')}production/sql
{enable_if_not('Lint')}third_party/production/backward
{enable_if_not('Lint')}third_party/production/bison
{enable_if_not('Lint')}third_party/production/cmake
{enable_if_not('Lint')}third_party/production/daemonize
{enable_if_not('Lint')}third_party/production/flatbuffers
{enable_if_not('Lint')}third_party/production/googletest
{enable_if_not('Lint')}third_party/production/libexplain
{enable_if_not('Lint')}third_party/production/json
{enable_if_not('Lint')}third_party/production/postgresql
{enable_if_none('CI_GitHub', 'Lint')}third_party/production/pybind11
{enable_if_not('Lint')}third_party/production/rocksdb
{enable_if_not('Lint')}third_party/production/cpptoml
{enable_if_not('Lint')}third_party/production/tabulate
{enable_if_not('Lint')}third_party/production/liburing

# The bundle directory contains opensource project modified by Gaia.
{enable_if_not('Lint')}third_party/bundle/gaia_spdlog
{enable_if_not('Lint')}third_party/bundle/gaia_spdlog_setup

# The third third_party projects build and wrap into a library
# the content of the corresponding bundle folder.
{enable_if_not('Lint')}third_party/production/gaia_spdlog
{enable_if_not('Lint')}third_party/production/gaia_spdlog_setup

{enable_if_any('GaiaRelease','GaiaLLVMTests')}third_party/production/TranslationEngineLLVM
{enable_if('GaiaRelease')}third_party/production/CPackDebHelper
{enable_if_not('Lint')}dev_tools/hooks

[pip]
{enable_if('GaiaLLVMTests')}psutil
{enable_if('Lint')}pre-commit

[pre_run]
# This ensures that the LLVM toolchain works as expected.
update-alternatives --install "/usr/bin/clang-format" "clang-format" "/usr/bin/clang-format-13" 10
update-alternatives --install "/usr/bin/clang-tidy" "clang-tidy" "/usr/bin/clang-tidy-13" 10
{enable_if('CI_GitHub')}update-alternatives --install "/usr/bin/python" "python" "/usr/bin/python3.8" 10
{enable_if('CI_GitHub')}update-alternatives --install "/usr/bin/python3" "python3" "/usr/bin/python3.8" 10

# Enable the Postgres FDW to run under AddressSanitizer.
# We can't put this in third_party/production/postgresql/gdev.cfg because clang-13 isn't yet available when that is run.
{enable_if('CI_GitHub')}mkdir -p /etc/postgresql/12/main
echo "LD_PRELOAD = '$(clang-10 -print-file-name=libclang_rt.asan-$(uname -m).so)'" >> /etc/postgresql/12/main/environment
echo "ASAN_OPTIONS = 'detect_leaks=0'" >> /etc/postgresql/12/main/environment

# Ubuntu 18.04 still defaults python to Python2. We want to detect python as Python3.
{enable_if('ubuntu:18.04')}update-alternatives --install /usr/bin/python python /usr/bin/python3.6 10

# Default persistent store location.
mkdir -p /var/lib/gaia/db
{enable_if('CI_GitHub')}chmod -R 666 /var/lib/gaia/db
{enable_if('CI_GitHub')}$GAIA_REPO/dev_tools/github-actions/set_product_version.py --directory "$GAIA_REPO" --version "$GAIA_VERSION" --pre-release "$GAIA_PRE_RELEASE" --build-number "${{ github.run_id }}"

{enable_if_not('SkipBuild')}[run]
{enable_if('CI_GitHub')}mkdir -p /build/production
cd /build/production
CC=$CC CPP=$CPP CXX=$CXX LDFLAGS="$LDFLAGS" \
cmake \
    --log-level=VERBOSE -Wno-dev \
    {enable_if('CI_GitHub')}-DGIT_HEAD_HASH=$GITHUB_SHA -DGIT_MASTER_HASH=not-found \
    {enable_if('CI_GitHub')}-DENABLE_CLANG_TIDY=ON \
    {enable_if('CI_GitHub')}-DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
    {enable_if('Coverage')}-DCMAKE_BUILD_TYPE=RelWithDebInfo \
    {enable_if('Coverage')}-DCMAKE_CXX_FLAGS="-fprofile-arcs -ftest-coverage -DCOVERAGE_RUN=1" \
    {enable_if('Coverage')}-DCMAKE_C_FLAGS="-fprofile-arcs -ftest-coverage -DCOVERAGE_RUN=1" \
    {enable_if('Debug')}-DCMAKE_BUILD_TYPE=Debug \
    {enable_if('GaiaRelease')}-DCMAKE_MODULE_PATH=/usr/local/lib/cmake/CPackDebHelper \
    {enable_if('GaiaLLVMTests')}-DBUILD_GAIA_LLVM_TESTS=ON \
    {enable_if_any('GaiaRelease','GaiaLLVMTests')}-DBUILD_GAIA_RELEASE=ON \
    {enable_if_any('Debug', 'GaiaRelease','GaiaLLVMTests')}-G "Unix Makefiles" \
    {source_dir('production')}

# LSAN will cause failures during docker build time since we cannot allow the
# build context to have privileged information about the host system.  Doing so
# would make it impossible to make these builds repeatable. It only needs to be
# disabled during `gdev build` (`docker build` under the hood), but the same is
# not true while inside a container built by `gdev run` (`docker run` under the
# hood) since we do enable privileged information about the host system in that
# context.
{enable_if_not('GaiaLLVMTests')}LSAN_OPTIONS=detect_leaks=0 \
    {enable_if('CI_GitHub')}VERBOSE=1 make -j$(nproc) 1> >(tee /build/production/make-out.log) 2> >(tee /build/production/make-err.log >&2)
    {enable_if_not('CI_GitHub')}make -j$(nproc)

{enable_if('GaiaLLVMTests')}LSAN_OPTIONS=detect_leaks=0 \
    VERBOSE=1 make -j$(nproc) check-all 1> >(tee /build/production/make-out.log) 2> >(tee /build/production/make-err.log >&2)

# Database needs to be in well-known path for tests to pass.
{enable_if_not('CI_GitHub')}cd /build/production/db/core
{enable_if_not('CI_GitHub')}make install

#
# Below this point is configuration that only applies to creating GitHub Actions files.
#

# Actions

[pre_lint]
# This ensures that the LLVM toolchain works as expected.
update-alternatives --install "/usr/bin/clang-format" "clang-format" "/usr/bin/clang-format-13" 10

[lint]
echo "Verifying Actions"
$GAIA_REPO/dev_tools/github-actions/verify_actions.sh

echo "Executing Clang-Format on Production Tree"
$GAIA_REPO/dev_tools/hooks/clang-format.sh

# Other stuff

[install:Integration]
:Suite Logs=${{ github.workspace }}/production/tests/suites
cd ${{ github.workspace }}/production/tests
./smoke_suites.sh

[install:Samples]
:Test Logs=${{ github.workspace }}/dev_tools/sdk/test/test.log
cd ${{ github.workspace }}/dev_tools/sdk/test
./build_sdk_samples.sh > test.log

[installs]
Integration
Samples

[copy]
{enable_if('Lint')}none
{enable_if_not('Lint')}source

[tests]
{enable_if_not('GaiaLLVMTests')}cd /build/production/db/core
{enable_if_not('GaiaLLVMTests')}make install
cd /build/production
ctest

{enable_if('GaiaRelease')}[package]
produces:/build/production/gaia-${{ env.GAIA_VERSION }}-${{ github.run_id }}_amd64.deb
cd /build/production
make preinstall
cpack -G DEB -R "${{ env.GAIA_VERSION }}-${{ github.run_id }}"
cp gaia-0.3.2_amd64.deb gaia-${{ env.GAIA_VERSION }}-${{ github.run_id }}_amd64.deb
ls -la /build/production/*.deb

{enable_if_not('Lint')}[artifacts]
CMake Logs=/build/production/CMakeFiles/CMakeOutput.log
CMake Logs=/build/production/CMakeFiles/CMakeError.log
Make Logs=/build/production/make-out.log
Make Logs=/build/production/make-err.log
CTest Logs=/build/production/Testing/Temporary/LastTest.log
compile=/build/production/compile_commands.json

