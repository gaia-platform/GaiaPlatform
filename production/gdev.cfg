[apt]
clang-format-10
clang-tidy-10
{enable_if('GaiaRelease')}debhelper
{enable_if('ubuntu:20.04')}flatbuffers-compiler
libcap-dev
openjdk-8-jdk
python3-dev
{enable_if('GaiaRelease')}rpm

[env]
GAIA_VERSION=0.3.2

[gaia]
# FIXME production/sql/src has a dependency on demos/airport_q1.
production/cmake
production/sql
third_party/production/backward
third_party/production/bison
third_party/production/cmake
third_party/production/daemonize
third_party/production/flatbuffers
third_party/production/googletest
third_party/production/libexplain
third_party/production/json
third_party/production/postgresql
{enable_if_not('CI_GitHub')}third_party/production/pybind11
third_party/production/rocksdb
third_party/production/cpptoml
third_party/production/tabulate
third_party/production/liburing

# The bundle directory contains opensource project modified by Gaia.
third_party/bundle/gaia_spdlog
third_party/bundle/gaia_spdlog_setup

# The third third_party projects build and wrap into a library
# the content of the corresponding bundle folder.
third_party/production/gaia_spdlog
third_party/production/gaia_spdlog_setup

{enable_if_any('GaiaRelease','GaiaLLVMTests')}third_party/production/TranslationEngineLLVM
{enable_if('GaiaRelease')}third_party/production/CPackDebHelper
dev_tools/hooks

{enable_if('GaiaLLVMTests')}[pip]
psutil

[pre_run]
# This ensures that the LLVM toolchain works as expected.
update-alternatives --install "/usr/bin/clang-format" "clang-format" "/usr/bin/clang-format-10" 10
update-alternatives --install "/usr/bin/clang-tidy" "clang-tidy" "/usr/bin/clang-tidy-10" 10

# Enable the Postgres FDW to run under AddressSanitizer.
# We can't put this in third_party/production/postgresql/gdev.cfg because clang-10 isn't yet available when that is run.
{enable_if('CI_GitHub')}mkdir -p /etc/postgresql/12/main
echo "LD_PRELOAD = '$(clang-10 -print-file-name=libclang_rt.asan-$(uname -m).so)'" >> /etc/postgresql/12/main/environment
echo "ASAN_OPTIONS = 'detect_leaks=0'" >> /etc/postgresql/12/main/environment

# Ubuntu 18.04 still defaults python to Python2. We want to detect python as Python3.
{enable_if('ubuntu:18.04')}update-alternatives --install /usr/bin/python python /usr/bin/python3.6 10

{enable_if('ubuntu:18.04')}apt-add-repository ppa:hnakamur/flatbuffers \
    && apt-get update \
    && apt-get install -y flatbuffers-compiler

# Default persistent store location.
mkdir -p /var/lib/gaia/db
{enable_if('CI_GitHub')}chmod -R 666 /var/lib/gaia/db

[run]
{enable_if('CI_GitHub')}mkdir -p /build/production
{enable_if('CI_GitHub')}cd /build/production
cmake \
    --log-level=VERBOSE -Wno-dev \
    {enable_if('Debug')}-DCMAKE_BUILD_TYPE=Debug \
    {enable_if('GaiaRelease')}-DCMAKE_MODULE_PATH=/usr/local/lib/cmake/CPackDebHelper \
    {enable_if('GaiaLLVMTests')}-DBUILD_GAIA_LLVM_TESTS=ON \
    {enable_if_any('GaiaRelease','GaiaLLVMTests')}-DBUILD_GAIA_RELEASE=ON \
    {enable_if_any('Debug', 'GaiaRelease','GaiaLLVMTests')}-G "Unix Makefiles" \
    {source_dir('production')}

# LSAN will cause failures during docker build time since we cannot allow the
# build context to have privileged information about the host system.  Doing so
# would make it impossible to make these builds repeatable. It only needs to be
# disabled during `gdev build` (`docker build` under the hood), but the same is
# not true while inside a container built by `gdev run` (`docker run` under the
# hood) since we do enable privileged information about the host system in that
# context.
{enable_if_not('GaiaLLVMTests')}LSAN_OPTIONS=detect_leaks=0 \
    make -j$(nproc)

{enable_if('GaiaLLVMTests')}LSAN_OPTIONS=detect_leaks=0 \
    make -j$(nproc) check-all

# Database needs to be in well-known path for tests to pass.
{enable_if_not('CI_GitHub')}cd /build/production/db/core
{enable_if_not('CI_GitHub')}make install

#
# Below this point is configuration that only applies to creating GitHub Actions files.
#

[copy]
source

[tests]
{enable_if_not('GaiaLLVMTests')}cd /build/production/db/core
{enable_if_not('GaiaLLVMTests')}make install
cd /build/production
ctest

[package]
produces:/build/production/gaia-${{ env.GAIA_VERSION }}-${{ github.run_id }}_amd64.deb
cd /build/production
make preinstall
cpack -G DEB -R "${{ env.GAIA_VERSION }}-${{ github.run_id }}"
cp gaia-0.3.2_amd64.deb gaia-${{ env.GAIA_VERSION }}-${{ github.run_id }}_amd64.deb
ls -la /build/production/*.deb

[artifacts]
CMake Logs=/build/production/CMakeFiles/CMakeOutput.log
CMake Logs=/build/production/CMakeFiles/CMakeError.log
CTest Logs=/build/production/Testing/Temporary/LastTest.log

