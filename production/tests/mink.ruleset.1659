/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

#include <atomic>
#include <algorithm>

using namespace std;

extern atomic<int> g_timestamp;

extern atomic<int> g_rule_1_tracker;
extern atomic<int> g_rule_2_tracker;
extern atomic<int> g_rule_3_tracker;
extern atomic<int> g_rule_4_tracker;

constexpr float c_fan_speed_limit = 5000.0;
constexpr float c_fan_speed_increment = 500.0;
constexpr float c_fan_threshold = 0.7f;

ruleset mink_ruleset
{
    float adjust_temperature(float min_temp, float max_temp, float sensor_value, float fan_rpm)
    {
        float new_fan_rpm = fan_rpm;
        if (sensor_value >= max_temp)
        {
            new_fan_rpm = min(c_fan_speed_limit, fan_rpm + c_fan_speed_increment);
        }
        else if (sensor_value <= min_temp)
        {
            new_fan_rpm = max(0.0f, fan_rpm - (2*c_fan_speed_increment));
        }

        return new_fan_rpm;
    }

    // Rule 1:  Verify the temperature is kept in range if the
    // incubator temperature limits change.
    OnUpdate(incubator.max_temp, incubator.min_temp)
    {
        if (!incubator.is_on)
        {
            return;
        }

        for(S:sensor)
        {
            if (S.value < incubator.min_temp ||
                S.value > incubator.max_temp)
            {
                actuator.value = adjust_temperature(incubator.min_temp, incubator.max_temp, S.value, actuator.value);
                actuator.timestamp = g_timestamp;
                break;
            }
        }
        g_rule_1_tracker++;
    }

    // Rule 2:  Keep the temperature in range of the incubator limits.
    OnUpdate(sensor.value)
    {
        if (!incubator.is_on)
        {
            return;
        }

        if (sensor.value >= incubator.min_temp &&
            sensor.value <= incubator.max_temp)
        {
            return;
        }

        actuator.value = adjust_temperature(incubator.min_temp, incubator.max_temp, sensor.value, actuator.value);
        actuator.timestamp = g_timestamp;
        g_rule_2_tracker++;
    }

    // Rule 3:  Turn off all the fans if the incubator is powered down.
    {
        if (!@incubator.is_on)
        {
            actuator.value = 0;
            actuator.timestamp = g_timestamp;
        }
        g_rule_3_tracker++;
    }

    // Rule 4:  If the fan is at 70% of its limit and the temperature is still too hot then
    // set the fan to its maximum speed.
    OnUpdate(actuator.value)
    {
        if (actuator.value == c_fan_speed_limit)
        {
            return;
        }

        if (actuator.value > c_fan_threshold * c_fan_speed_limit && sensor.value > incubator.max_temp)
        {
            actuator.value = c_fan_speed_limit;
        }
        g_rule_4_tracker++;
    }
}
