// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EVENTLOG_GAIA_RULES_H_
#define FLATBUFFERS_GENERATED_EVENTLOG_GAIA_RULES_H_

#include "flatbuffers/flatbuffers.h"

namespace gaia {
namespace rules {

struct event_log;
struct event_logBuilder;
struct event_logT;

inline const flatbuffers::TypeTable *event_logTypeTable();

struct event_logT : public flatbuffers::NativeTable {
  typedef event_log TableType;
  uint64_t id;
  uint64_t gaia_type;
  uint32_t event_type;
  uint8_t event_mode;
  uint64_t timestamp;
  bool rules_fired;
  event_logT()
      : id(0),
        gaia_type(0),
        event_type(0),
        event_mode(0),
        timestamp(0),
        rules_fired(false) {
  }
};

struct event_log FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef event_logT NativeTableType;
  typedef event_logBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return event_logTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_GAIA_TYPE = 6,
    VT_EVENT_TYPE = 8,
    VT_EVENT_MODE = 10,
    VT_TIMESTAMP = 12,
    VT_RULES_FIRED = 14
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  uint64_t gaia_type() const {
    return GetField<uint64_t>(VT_GAIA_TYPE, 0);
  }
  uint32_t event_type() const {
    return GetField<uint32_t>(VT_EVENT_TYPE, 0);
  }
  uint8_t event_mode() const {
    return GetField<uint8_t>(VT_EVENT_MODE, 0);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool rules_fired() const {
    return GetField<uint8_t>(VT_RULES_FIRED, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyField<uint64_t>(verifier, VT_GAIA_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_EVENT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_EVENT_MODE) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<uint8_t>(verifier, VT_RULES_FIRED) &&
           verifier.EndTable();
  }
  event_logT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(event_logT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<event_log> Pack(flatbuffers::FlatBufferBuilder &_fbb, const event_logT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct event_logBuilder {
  typedef event_log Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(event_log::VT_ID, id, 0);
  }
  void add_gaia_type(uint64_t gaia_type) {
    fbb_.AddElement<uint64_t>(event_log::VT_GAIA_TYPE, gaia_type, 0);
  }
  void add_event_type(uint32_t event_type) {
    fbb_.AddElement<uint32_t>(event_log::VT_EVENT_TYPE, event_type, 0);
  }
  void add_event_mode(uint8_t event_mode) {
    fbb_.AddElement<uint8_t>(event_log::VT_EVENT_MODE, event_mode, 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(event_log::VT_TIMESTAMP, timestamp, 0);
  }
  void add_rules_fired(bool rules_fired) {
    fbb_.AddElement<uint8_t>(event_log::VT_RULES_FIRED, static_cast<uint8_t>(rules_fired), 0);
  }
  explicit event_logBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  event_logBuilder &operator=(const event_logBuilder &);
  flatbuffers::Offset<event_log> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<event_log>(end);
    return o;
  }
};

inline flatbuffers::Offset<event_log> Createevent_log(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint64_t gaia_type = 0,
    uint32_t event_type = 0,
    uint8_t event_mode = 0,
    uint64_t timestamp = 0,
    bool rules_fired = false) {
  event_logBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_gaia_type(gaia_type);
  builder_.add_id(id);
  builder_.add_event_type(event_type);
  builder_.add_rules_fired(rules_fired);
  builder_.add_event_mode(event_mode);
  return builder_.Finish();
}

flatbuffers::Offset<event_log> Createevent_log(flatbuffers::FlatBufferBuilder &_fbb, const event_logT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline event_logT *event_log::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<gaia::rules::event_logT> _o = std::unique_ptr<gaia::rules::event_logT>(new event_logT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void event_log::UnPackTo(event_logT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = id(); _o->id = _e; }
  { auto _e = gaia_type(); _o->gaia_type = _e; }
  { auto _e = event_type(); _o->event_type = _e; }
  { auto _e = event_mode(); _o->event_mode = _e; }
  { auto _e = timestamp(); _o->timestamp = _e; }
  { auto _e = rules_fired(); _o->rules_fired = _e; }
}

inline flatbuffers::Offset<event_log> event_log::Pack(flatbuffers::FlatBufferBuilder &_fbb, const event_logT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return Createevent_log(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<event_log> Createevent_log(flatbuffers::FlatBufferBuilder &_fbb, const event_logT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const event_logT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _id = _o->id;
  auto _gaia_type = _o->gaia_type;
  auto _event_type = _o->event_type;
  auto _event_mode = _o->event_mode;
  auto _timestamp = _o->timestamp;
  auto _rules_fired = _o->rules_fired;
  return gaia::rules::Createevent_log(
      _fbb,
      _id,
      _gaia_type,
      _event_type,
      _event_mode,
      _timestamp,
      _rules_fired);
}

inline const flatbuffers::TypeTable *event_logTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 }
  };
  static const char * const names[] = {
    "id",
    "gaia_type",
    "event_type",
    "event_mode",
    "timestamp",
    "rules_fired"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 6, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace rules
}  // namespace gaia

#endif  // FLATBUFFERS_GENERATED_EVENTLOG_GAIA_RULES_H_
