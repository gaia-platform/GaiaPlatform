// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAIA_AIRPORTQ1_GAIA_AIRPORT_H_
#define FLATBUFFERS_GENERATED_GAIA_AIRPORTQ1_GAIA_AIRPORT_H_

#include "gaia_object_q1_demo.hpp"
#include "airport_q1_generated.h"

using namespace std;
using namespace gaia::common;

namespace gaia {
namespace airport {

static const gaia::common::gaia_type_t kAirlinesType = 1;
static const gaia::common::gaia_type_t kAirportsType = 2;
static const gaia::common::gaia_type_t kRoutesType = 3;
}  // namespace airport
}  // namespace gaia

namespace gaia {
namespace airport {

struct Airlines : public gaia_object_t<gaia::airport::kAirlinesType,Airlines,airlines,airlinesT>{
Airlines() : gaia_object_t("Airlines") {};
int64_t Gaia_id () const { return GET_CURRENT(Gaia_id);}
int64_t Gaia_id_original () const { return GET_ORIGINAL(Gaia_id);}
void set_Gaia_id(int64_t val)
{
SET(Gaia_id, val);
}
int32_t al_id () const { return GET_CURRENT(al_id);}
int32_t al_id_original () const { return GET_ORIGINAL(al_id);}
void set_al_id(int32_t val)
{
SET(al_id, val);
}
const char * name () const { return GET_STR(name);}
const char * name_original () const { return GET_STR_ORIGINAL(name);}
void set_name(const char * val)
{
SET(name, val);
}
const char * alias () const { return GET_STR(alias);}
const char * alias_original () const { return GET_STR_ORIGINAL(alias);}
void set_alias(const char * val)
{
SET(alias, val);
}
const char * iata () const { return GET_STR(iata);}
const char * iata_original () const { return GET_STR_ORIGINAL(iata);}
void set_iata(const char * val)
{
SET(iata, val);
}
const char * icao () const { return GET_STR(icao);}
const char * icao_original () const { return GET_STR_ORIGINAL(icao);}
void set_icao(const char * val)
{
SET(icao, val);
}
const char * callsign () const { return GET_STR(callsign);}
const char * callsign_original () const { return GET_STR_ORIGINAL(callsign);}
void set_callsign(const char * val)
{
SET(callsign, val);
}
const char * country () const { return GET_STR(country);}
const char * country_original () const { return GET_STR_ORIGINAL(country);}
void set_country(const char * val)
{
SET(country, val);
}
const char * active () const { return GET_STR(active);}
const char * active_original () const { return GET_STR_ORIGINAL(active);}
void set_active(const char * val)
{
SET(active, val);
}
using gaia_object_t::insert_row;
using gaia_object_t::update_row;
using gaia_object_t::delete_row;
static gaia_id_t insert_row (int64_t Gaia_id_val,int32_t al_id_val,const char * name_val,const char * alias_val,const char * iata_val,const char * icao_val,const char * callsign_val,const char * country_val,const char * active_val){
flatbuffers::FlatBufferBuilder b(128);
b.Finish(CreateairlinesDirect(b, Gaia_id_val,al_id_val,name_val,alias_val,iata_val,icao_val,callsign_val,country_val,active_val));
return gaia_object_t::insert_row(b);
}
private:
friend struct gaia_object_t<gaia::airport::kAirlinesType,Airlines,airlines,airlinesT>;
Airlines(gaia_id_t id) : gaia_object_t(id, "Airlines") {}
};

struct Airports : public gaia_object_t<gaia::airport::kAirportsType,Airports,airports,airportsT>{
Airports() : gaia_object_t("Airports") {};
int64_t Gaia_id () const { return GET_CURRENT(Gaia_id);}
int64_t Gaia_id_original () const { return GET_ORIGINAL(Gaia_id);}
void set_Gaia_id(int64_t val)
{
SET(Gaia_id, val);
}
int32_t ap_id () const { return GET_CURRENT(ap_id);}
int32_t ap_id_original () const { return GET_ORIGINAL(ap_id);}
void set_ap_id(int32_t val)
{
SET(ap_id, val);
}
const char * name () const { return GET_STR(name);}
const char * name_original () const { return GET_STR_ORIGINAL(name);}
void set_name(const char * val)
{
SET(name, val);
}
const char * city () const { return GET_STR(city);}
const char * city_original () const { return GET_STR_ORIGINAL(city);}
void set_city(const char * val)
{
SET(city, val);
}
const char * country () const { return GET_STR(country);}
const char * country_original () const { return GET_STR_ORIGINAL(country);}
void set_country(const char * val)
{
SET(country, val);
}
const char * iata () const { return GET_STR(iata);}
const char * iata_original () const { return GET_STR_ORIGINAL(iata);}
void set_iata(const char * val)
{
SET(iata, val);
}
const char * icao () const { return GET_STR(icao);}
const char * icao_original () const { return GET_STR_ORIGINAL(icao);}
void set_icao(const char * val)
{
SET(icao, val);
}
double latitude () const { return GET_CURRENT(latitude);}
double latitude_original () const { return GET_ORIGINAL(latitude);}
void set_latitude(double val)
{
SET(latitude, val);
}
double longitude () const { return GET_CURRENT(longitude);}
double longitude_original () const { return GET_ORIGINAL(longitude);}
void set_longitude(double val)
{
SET(longitude, val);
}
int32_t altitude () const { return GET_CURRENT(altitude);}
int32_t altitude_original () const { return GET_ORIGINAL(altitude);}
void set_altitude(int32_t val)
{
SET(altitude, val);
}
float timezone () const { return GET_CURRENT(timezone);}
float timezone_original () const { return GET_ORIGINAL(timezone);}
void set_timezone(float val)
{
SET(timezone, val);
}
const char * dst () const { return GET_STR(dst);}
const char * dst_original () const { return GET_STR_ORIGINAL(dst);}
void set_dst(const char * val)
{
SET(dst, val);
}
const char * tztext () const { return GET_STR(tztext);}
const char * tztext_original () const { return GET_STR_ORIGINAL(tztext);}
void set_tztext(const char * val)
{
SET(tztext, val);
}
const char * type () const { return GET_STR(type);}
const char * type_original () const { return GET_STR_ORIGINAL(type);}
void set_type(const char * val)
{
SET(type, val);
}
const char * source () const { return GET_STR(source);}
const char * source_original () const { return GET_STR_ORIGINAL(source);}
void set_source(const char * val)
{
SET(source, val);
}
using gaia_object_t::insert_row;
using gaia_object_t::update_row;
using gaia_object_t::delete_row;
static gaia_id_t insert_row (int64_t Gaia_id_val,int32_t ap_id_val,const char * name_val,const char * city_val,const char * country_val,const char * iata_val,const char * icao_val,double latitude_val,double longitude_val,int32_t altitude_val,float timezone_val,const char * dst_val,const char * tztext_val,const char * type_val,const char * source_val){
flatbuffers::FlatBufferBuilder b(128);
b.Finish(CreateairportsDirect(b, Gaia_id_val,ap_id_val,name_val,city_val,country_val,iata_val,icao_val,latitude_val,longitude_val,altitude_val,timezone_val,dst_val,tztext_val,type_val,source_val));
return gaia_object_t::insert_row(b);
}
private:
friend struct gaia_object_t<gaia::airport::kAirportsType,Airports,airports,airportsT>;
Airports(gaia_id_t id) : gaia_object_t(id, "Airports") {}
};

struct Routes : public gaia_object_t<gaia::airport::kRoutesType,Routes,routes,routesT>{
Routes() : gaia_object_t("Routes") {};
int64_t Gaia_id () const { return GET_CURRENT(Gaia_id);}
int64_t Gaia_id_original () const { return GET_ORIGINAL(Gaia_id);}
void set_Gaia_id(int64_t val)
{
SET(Gaia_id, val);
}
int64_t Gaia_Al_id () const { return GET_CURRENT(Gaia_Al_id);}
int64_t Gaia_Al_id_original () const { return GET_ORIGINAL(Gaia_Al_id);}
void set_Gaia_Al_id(int64_t val)
{
SET(Gaia_Al_id, val);
}
int64_t Gaia_Src_id () const { return GET_CURRENT(Gaia_Src_id);}
int64_t Gaia_Src_id_original () const { return GET_ORIGINAL(Gaia_Src_id);}
void set_Gaia_Src_id(int64_t val)
{
SET(Gaia_Src_id, val);
}
int64_t Gaia_Dst_id () const { return GET_CURRENT(Gaia_Dst_id);}
int64_t Gaia_Dst_id_original () const { return GET_ORIGINAL(Gaia_Dst_id);}
void set_Gaia_Dst_id(int64_t val)
{
SET(Gaia_Dst_id, val);
}
const char * airline () const { return GET_STR(airline);}
const char * airline_original () const { return GET_STR_ORIGINAL(airline);}
void set_airline(const char * val)
{
SET(airline, val);
}
int32_t al_id () const { return GET_CURRENT(al_id);}
int32_t al_id_original () const { return GET_ORIGINAL(al_id);}
void set_al_id(int32_t val)
{
SET(al_id, val);
}
const char * src_ap () const { return GET_STR(src_ap);}
const char * src_ap_original () const { return GET_STR_ORIGINAL(src_ap);}
void set_src_ap(const char * val)
{
SET(src_ap, val);
}
int32_t src_ap_id () const { return GET_CURRENT(src_ap_id);}
int32_t src_ap_id_original () const { return GET_ORIGINAL(src_ap_id);}
void set_src_ap_id(int32_t val)
{
SET(src_ap_id, val);
}
const char * dst_ap () const { return GET_STR(dst_ap);}
const char * dst_ap_original () const { return GET_STR_ORIGINAL(dst_ap);}
void set_dst_ap(const char * val)
{
SET(dst_ap, val);
}
int32_t dst_ap_id () const { return GET_CURRENT(dst_ap_id);}
int32_t dst_ap_id_original () const { return GET_ORIGINAL(dst_ap_id);}
void set_dst_ap_id(int32_t val)
{
SET(dst_ap_id, val);
}
const char * codeshare () const { return GET_STR(codeshare);}
const char * codeshare_original () const { return GET_STR_ORIGINAL(codeshare);}
void set_codeshare(const char * val)
{
SET(codeshare, val);
}
int32_t stops () const { return GET_CURRENT(stops);}
int32_t stops_original () const { return GET_ORIGINAL(stops);}
void set_stops(int32_t val)
{
SET(stops, val);
}
const char * equipment () const { return GET_STR(equipment);}
const char * equipment_original () const { return GET_STR_ORIGINAL(equipment);}
void set_equipment(const char * val)
{
SET(equipment, val);
}
using gaia_object_t::insert_row;
using gaia_object_t::update_row;
using gaia_object_t::delete_row;
static gaia_id_t insert_row (int64_t Gaia_id_val,int64_t Gaia_Al_id_val,int64_t Gaia_Src_id_val,int64_t Gaia_Dst_id_val,const char * airline_val,int32_t al_id_val,const char * src_ap_val,int32_t src_ap_id_val,const char * dst_ap_val,int32_t dst_ap_id_val,const char * codeshare_val,int32_t stops_val,const char * equipment_val){
flatbuffers::FlatBufferBuilder b(128);
b.Finish(CreateroutesDirect(b, Gaia_id_val,Gaia_Al_id_val,Gaia_Src_id_val,Gaia_Dst_id_val,airline_val,al_id_val,src_ap_val,src_ap_id_val,dst_ap_val,dst_ap_id_val,codeshare_val,stops_val,equipment_val));
return gaia_object_t::insert_row(b);
}
private:
friend struct gaia_object_t<gaia::airport::kRoutesType,Routes,routes,routesT>;
Routes(gaia_id_t id) : gaia_object_t(id, "Routes") {}
};

}  // namespace airport
}  // namespace gaia

#endif  // FLATBUFFERS_GENERATED_GAIA_AIRPORTQ1_GAIA_AIRPORT_H_
