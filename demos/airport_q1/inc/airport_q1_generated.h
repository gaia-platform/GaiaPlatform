// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AIRPORTQ1_GAIA_AIRPORT_H_
#define FLATBUFFERS_GENERATED_AIRPORTQ1_GAIA_AIRPORT_H_

#include "flatbuffers/flatbuffers.h"

namespace gaia {
namespace airport {

struct airlines;
struct airlinesBuilder;
struct airlinesT;

struct airports;
struct airportsBuilder;
struct airportsT;

struct routes;
struct routesBuilder;
struct routesT;

inline const flatbuffers::TypeTable *airlinesTypeTable();

inline const flatbuffers::TypeTable *airportsTypeTable();

inline const flatbuffers::TypeTable *routesTypeTable();

struct airlinesT : public flatbuffers::NativeTable {
  typedef airlines TableType;
  int64_t Gaia_id;
  int32_t al_id;
  gaia::common::nullable_string_t name;
  gaia::common::nullable_string_t alias;
  gaia::common::nullable_string_t iata;
  gaia::common::nullable_string_t icao;
  gaia::common::nullable_string_t callsign;
  gaia::common::nullable_string_t country;
  gaia::common::nullable_string_t active;
  airlinesT()
      : Gaia_id(0),
        al_id(0) {
  }
};

struct airlines FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef airlinesT NativeTableType;
  typedef airlinesBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return airlinesTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GAIA_ID = 4,
    VT_AL_ID = 6,
    VT_NAME = 8,
    VT_ALIAS = 10,
    VT_IATA = 12,
    VT_ICAO = 14,
    VT_CALLSIGN = 16,
    VT_COUNTRY = 18,
    VT_ACTIVE = 20
  };
  int64_t Gaia_id() const {
    return GetField<int64_t>(VT_GAIA_ID, 0);
  }
  bool mutate_Gaia_id(int64_t _Gaia_id) {
    return SetField<int64_t>(VT_GAIA_ID, _Gaia_id, 0);
  }
  int32_t al_id() const {
    return GetField<int32_t>(VT_AL_ID, 0);
  }
  bool mutate_al_id(int32_t _al_id) {
    return SetField<int32_t>(VT_AL_ID, _al_id, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *alias() const {
    return GetPointer<const flatbuffers::String *>(VT_ALIAS);
  }
  flatbuffers::String *mutable_alias() {
    return GetPointer<flatbuffers::String *>(VT_ALIAS);
  }
  const flatbuffers::String *iata() const {
    return GetPointer<const flatbuffers::String *>(VT_IATA);
  }
  flatbuffers::String *mutable_iata() {
    return GetPointer<flatbuffers::String *>(VT_IATA);
  }
  const flatbuffers::String *icao() const {
    return GetPointer<const flatbuffers::String *>(VT_ICAO);
  }
  flatbuffers::String *mutable_icao() {
    return GetPointer<flatbuffers::String *>(VT_ICAO);
  }
  const flatbuffers::String *callsign() const {
    return GetPointer<const flatbuffers::String *>(VT_CALLSIGN);
  }
  flatbuffers::String *mutable_callsign() {
    return GetPointer<flatbuffers::String *>(VT_CALLSIGN);
  }
  const flatbuffers::String *country() const {
    return GetPointer<const flatbuffers::String *>(VT_COUNTRY);
  }
  flatbuffers::String *mutable_country() {
    return GetPointer<flatbuffers::String *>(VT_COUNTRY);
  }
  const flatbuffers::String *active() const {
    return GetPointer<const flatbuffers::String *>(VT_ACTIVE);
  }
  flatbuffers::String *mutable_active() {
    return GetPointer<flatbuffers::String *>(VT_ACTIVE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_GAIA_ID) &&
           VerifyField<int32_t>(verifier, VT_AL_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ALIAS) &&
           verifier.VerifyString(alias()) &&
           VerifyOffset(verifier, VT_IATA) &&
           verifier.VerifyString(iata()) &&
           VerifyOffset(verifier, VT_ICAO) &&
           verifier.VerifyString(icao()) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callsign()) &&
           VerifyOffset(verifier, VT_COUNTRY) &&
           verifier.VerifyString(country()) &&
           VerifyOffset(verifier, VT_ACTIVE) &&
           verifier.VerifyString(active()) &&
           verifier.EndTable();
  }
  airlinesT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(airlinesT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<airlines> Pack(flatbuffers::FlatBufferBuilder &_fbb, const airlinesT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct airlinesBuilder {
  typedef airlines Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Gaia_id(int64_t Gaia_id) {
    fbb_.AddElement<int64_t>(airlines::VT_GAIA_ID, Gaia_id, 0);
  }
  void add_al_id(int32_t al_id) {
    fbb_.AddElement<int32_t>(airlines::VT_AL_ID, al_id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(airlines::VT_NAME, name);
  }
  void add_alias(flatbuffers::Offset<flatbuffers::String> alias) {
    fbb_.AddOffset(airlines::VT_ALIAS, alias);
  }
  void add_iata(flatbuffers::Offset<flatbuffers::String> iata) {
    fbb_.AddOffset(airlines::VT_IATA, iata);
  }
  void add_icao(flatbuffers::Offset<flatbuffers::String> icao) {
    fbb_.AddOffset(airlines::VT_ICAO, icao);
  }
  void add_callsign(flatbuffers::Offset<flatbuffers::String> callsign) {
    fbb_.AddOffset(airlines::VT_CALLSIGN, callsign);
  }
  void add_country(flatbuffers::Offset<flatbuffers::String> country) {
    fbb_.AddOffset(airlines::VT_COUNTRY, country);
  }
  void add_active(flatbuffers::Offset<flatbuffers::String> active) {
    fbb_.AddOffset(airlines::VT_ACTIVE, active);
  }
  explicit airlinesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  airlinesBuilder &operator=(const airlinesBuilder &);
  flatbuffers::Offset<airlines> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<airlines>(end);
    return o;
  }
};

inline flatbuffers::Offset<airlines> Createairlines(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t Gaia_id = 0,
    int32_t al_id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> alias = 0,
    flatbuffers::Offset<flatbuffers::String> iata = 0,
    flatbuffers::Offset<flatbuffers::String> icao = 0,
    flatbuffers::Offset<flatbuffers::String> callsign = 0,
    flatbuffers::Offset<flatbuffers::String> country = 0,
    flatbuffers::Offset<flatbuffers::String> active = 0) {
  airlinesBuilder builder_(_fbb);
  builder_.add_Gaia_id(Gaia_id);
  builder_.add_active(active);
  builder_.add_country(country);
  builder_.add_callsign(callsign);
  builder_.add_icao(icao);
  builder_.add_iata(iata);
  builder_.add_alias(alias);
  builder_.add_name(name);
  builder_.add_al_id(al_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<airlines> CreateairlinesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t Gaia_id = 0,
    int32_t al_id = 0,
    const char *name = nullptr,
    const char *alias = nullptr,
    const char *iata = nullptr,
    const char *icao = nullptr,
    const char *callsign = nullptr,
    const char *country = nullptr,
    const char *active = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto alias__ = alias ? _fbb.CreateString(alias) : 0;
  auto iata__ = iata ? _fbb.CreateString(iata) : 0;
  auto icao__ = icao ? _fbb.CreateString(icao) : 0;
  auto callsign__ = callsign ? _fbb.CreateString(callsign) : 0;
  auto country__ = country ? _fbb.CreateString(country) : 0;
  auto active__ = active ? _fbb.CreateString(active) : 0;
  return gaia::airport::Createairlines(
      _fbb,
      Gaia_id,
      al_id,
      name__,
      alias__,
      iata__,
      icao__,
      callsign__,
      country__,
      active__);
}

flatbuffers::Offset<airlines> Createairlines(flatbuffers::FlatBufferBuilder &_fbb, const airlinesT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct airportsT : public flatbuffers::NativeTable {
  typedef airports TableType;
  int64_t Gaia_id;
  int32_t ap_id;
  gaia::common::nullable_string_t name;
  gaia::common::nullable_string_t city;
  gaia::common::nullable_string_t country;
  gaia::common::nullable_string_t iata;
  gaia::common::nullable_string_t icao;
  double latitude;
  double longitude;
  int32_t altitude;
  float timezone;
  gaia::common::nullable_string_t dst;
  gaia::common::nullable_string_t tztext;
  gaia::common::nullable_string_t type;
  gaia::common::nullable_string_t source;
  airportsT()
      : Gaia_id(0),
        ap_id(0),
        latitude(0.0),
        longitude(0.0),
        altitude(0),
        timezone(0.0f) {
  }
};

struct airports FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef airportsT NativeTableType;
  typedef airportsBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return airportsTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GAIA_ID = 4,
    VT_AP_ID = 6,
    VT_NAME = 8,
    VT_CITY = 10,
    VT_COUNTRY = 12,
    VT_IATA = 14,
    VT_ICAO = 16,
    VT_LATITUDE = 18,
    VT_LONGITUDE = 20,
    VT_ALTITUDE = 22,
    VT_TIMEZONE = 24,
    VT_DST = 26,
    VT_TZTEXT = 28,
    VT_TYPE = 30,
    VT_SOURCE = 32
  };
  int64_t Gaia_id() const {
    return GetField<int64_t>(VT_GAIA_ID, 0);
  }
  bool mutate_Gaia_id(int64_t _Gaia_id) {
    return SetField<int64_t>(VT_GAIA_ID, _Gaia_id, 0);
  }
  int32_t ap_id() const {
    return GetField<int32_t>(VT_AP_ID, 0);
  }
  bool mutate_ap_id(int32_t _ap_id) {
    return SetField<int32_t>(VT_AP_ID, _ap_id, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *city() const {
    return GetPointer<const flatbuffers::String *>(VT_CITY);
  }
  flatbuffers::String *mutable_city() {
    return GetPointer<flatbuffers::String *>(VT_CITY);
  }
  const flatbuffers::String *country() const {
    return GetPointer<const flatbuffers::String *>(VT_COUNTRY);
  }
  flatbuffers::String *mutable_country() {
    return GetPointer<flatbuffers::String *>(VT_COUNTRY);
  }
  const flatbuffers::String *iata() const {
    return GetPointer<const flatbuffers::String *>(VT_IATA);
  }
  flatbuffers::String *mutable_iata() {
    return GetPointer<flatbuffers::String *>(VT_IATA);
  }
  const flatbuffers::String *icao() const {
    return GetPointer<const flatbuffers::String *>(VT_ICAO);
  }
  flatbuffers::String *mutable_icao() {
    return GetPointer<flatbuffers::String *>(VT_ICAO);
  }
  double latitude() const {
    return GetField<double>(VT_LATITUDE, 0.0);
  }
  bool mutate_latitude(double _latitude) {
    return SetField<double>(VT_LATITUDE, _latitude, 0.0);
  }
  double longitude() const {
    return GetField<double>(VT_LONGITUDE, 0.0);
  }
  bool mutate_longitude(double _longitude) {
    return SetField<double>(VT_LONGITUDE, _longitude, 0.0);
  }
  int32_t altitude() const {
    return GetField<int32_t>(VT_ALTITUDE, 0);
  }
  bool mutate_altitude(int32_t _altitude) {
    return SetField<int32_t>(VT_ALTITUDE, _altitude, 0);
  }
  float timezone() const {
    return GetField<float>(VT_TIMEZONE, 0.0f);
  }
  bool mutate_timezone(float _timezone) {
    return SetField<float>(VT_TIMEZONE, _timezone, 0.0f);
  }
  const flatbuffers::String *dst() const {
    return GetPointer<const flatbuffers::String *>(VT_DST);
  }
  flatbuffers::String *mutable_dst() {
    return GetPointer<flatbuffers::String *>(VT_DST);
  }
  const flatbuffers::String *tztext() const {
    return GetPointer<const flatbuffers::String *>(VT_TZTEXT);
  }
  flatbuffers::String *mutable_tztext() {
    return GetPointer<flatbuffers::String *>(VT_TZTEXT);
  }
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  flatbuffers::String *mutable_type() {
    return GetPointer<flatbuffers::String *>(VT_TYPE);
  }
  const flatbuffers::String *source() const {
    return GetPointer<const flatbuffers::String *>(VT_SOURCE);
  }
  flatbuffers::String *mutable_source() {
    return GetPointer<flatbuffers::String *>(VT_SOURCE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_GAIA_ID) &&
           VerifyField<int32_t>(verifier, VT_AP_ID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_CITY) &&
           verifier.VerifyString(city()) &&
           VerifyOffset(verifier, VT_COUNTRY) &&
           verifier.VerifyString(country()) &&
           VerifyOffset(verifier, VT_IATA) &&
           verifier.VerifyString(iata()) &&
           VerifyOffset(verifier, VT_ICAO) &&
           verifier.VerifyString(icao()) &&
           VerifyField<double>(verifier, VT_LATITUDE) &&
           VerifyField<double>(verifier, VT_LONGITUDE) &&
           VerifyField<int32_t>(verifier, VT_ALTITUDE) &&
           VerifyField<float>(verifier, VT_TIMEZONE) &&
           VerifyOffset(verifier, VT_DST) &&
           verifier.VerifyString(dst()) &&
           VerifyOffset(verifier, VT_TZTEXT) &&
           verifier.VerifyString(tztext()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           verifier.EndTable();
  }
  airportsT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(airportsT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<airports> Pack(flatbuffers::FlatBufferBuilder &_fbb, const airportsT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct airportsBuilder {
  typedef airports Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Gaia_id(int64_t Gaia_id) {
    fbb_.AddElement<int64_t>(airports::VT_GAIA_ID, Gaia_id, 0);
  }
  void add_ap_id(int32_t ap_id) {
    fbb_.AddElement<int32_t>(airports::VT_AP_ID, ap_id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(airports::VT_NAME, name);
  }
  void add_city(flatbuffers::Offset<flatbuffers::String> city) {
    fbb_.AddOffset(airports::VT_CITY, city);
  }
  void add_country(flatbuffers::Offset<flatbuffers::String> country) {
    fbb_.AddOffset(airports::VT_COUNTRY, country);
  }
  void add_iata(flatbuffers::Offset<flatbuffers::String> iata) {
    fbb_.AddOffset(airports::VT_IATA, iata);
  }
  void add_icao(flatbuffers::Offset<flatbuffers::String> icao) {
    fbb_.AddOffset(airports::VT_ICAO, icao);
  }
  void add_latitude(double latitude) {
    fbb_.AddElement<double>(airports::VT_LATITUDE, latitude, 0.0);
  }
  void add_longitude(double longitude) {
    fbb_.AddElement<double>(airports::VT_LONGITUDE, longitude, 0.0);
  }
  void add_altitude(int32_t altitude) {
    fbb_.AddElement<int32_t>(airports::VT_ALTITUDE, altitude, 0);
  }
  void add_timezone(float timezone) {
    fbb_.AddElement<float>(airports::VT_TIMEZONE, timezone, 0.0f);
  }
  void add_dst(flatbuffers::Offset<flatbuffers::String> dst) {
    fbb_.AddOffset(airports::VT_DST, dst);
  }
  void add_tztext(flatbuffers::Offset<flatbuffers::String> tztext) {
    fbb_.AddOffset(airports::VT_TZTEXT, tztext);
  }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(airports::VT_TYPE, type);
  }
  void add_source(flatbuffers::Offset<flatbuffers::String> source) {
    fbb_.AddOffset(airports::VT_SOURCE, source);
  }
  explicit airportsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  airportsBuilder &operator=(const airportsBuilder &);
  flatbuffers::Offset<airports> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<airports>(end);
    return o;
  }
};

inline flatbuffers::Offset<airports> Createairports(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t Gaia_id = 0,
    int32_t ap_id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> city = 0,
    flatbuffers::Offset<flatbuffers::String> country = 0,
    flatbuffers::Offset<flatbuffers::String> iata = 0,
    flatbuffers::Offset<flatbuffers::String> icao = 0,
    double latitude = 0.0,
    double longitude = 0.0,
    int32_t altitude = 0,
    float timezone = 0.0f,
    flatbuffers::Offset<flatbuffers::String> dst = 0,
    flatbuffers::Offset<flatbuffers::String> tztext = 0,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    flatbuffers::Offset<flatbuffers::String> source = 0) {
  airportsBuilder builder_(_fbb);
  builder_.add_longitude(longitude);
  builder_.add_latitude(latitude);
  builder_.add_Gaia_id(Gaia_id);
  builder_.add_source(source);
  builder_.add_type(type);
  builder_.add_tztext(tztext);
  builder_.add_dst(dst);
  builder_.add_timezone(timezone);
  builder_.add_altitude(altitude);
  builder_.add_icao(icao);
  builder_.add_iata(iata);
  builder_.add_country(country);
  builder_.add_city(city);
  builder_.add_name(name);
  builder_.add_ap_id(ap_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<airports> CreateairportsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t Gaia_id = 0,
    int32_t ap_id = 0,
    const char *name = nullptr,
    const char *city = nullptr,
    const char *country = nullptr,
    const char *iata = nullptr,
    const char *icao = nullptr,
    double latitude = 0.0,
    double longitude = 0.0,
    int32_t altitude = 0,
    float timezone = 0.0f,
    const char *dst = nullptr,
    const char *tztext = nullptr,
    const char *type = nullptr,
    const char *source = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto city__ = city ? _fbb.CreateString(city) : 0;
  auto country__ = country ? _fbb.CreateString(country) : 0;
  auto iata__ = iata ? _fbb.CreateString(iata) : 0;
  auto icao__ = icao ? _fbb.CreateString(icao) : 0;
  auto dst__ = dst ? _fbb.CreateString(dst) : 0;
  auto tztext__ = tztext ? _fbb.CreateString(tztext) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  return gaia::airport::Createairports(
      _fbb,
      Gaia_id,
      ap_id,
      name__,
      city__,
      country__,
      iata__,
      icao__,
      latitude,
      longitude,
      altitude,
      timezone,
      dst__,
      tztext__,
      type__,
      source__);
}

flatbuffers::Offset<airports> Createairports(flatbuffers::FlatBufferBuilder &_fbb, const airportsT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct routesT : public flatbuffers::NativeTable {
  typedef routes TableType;
  int64_t Gaia_id;
  int64_t Gaia_Al_id;
  int64_t Gaia_Src_id;
  int64_t Gaia_Dst_id;
  gaia::common::nullable_string_t airline;
  int32_t al_id;
  gaia::common::nullable_string_t src_ap;
  int32_t src_ap_id;
  gaia::common::nullable_string_t dst_ap;
  int32_t dst_ap_id;
  gaia::common::nullable_string_t codeshare;
  int32_t stops;
  gaia::common::nullable_string_t equipment;
  routesT()
      : Gaia_id(0),
        Gaia_Al_id(0),
        Gaia_Src_id(0),
        Gaia_Dst_id(0),
        al_id(0),
        src_ap_id(0),
        dst_ap_id(0),
        stops(0) {
  }
};

struct routes FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef routesT NativeTableType;
  typedef routesBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return routesTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GAIA_ID = 4,
    VT_GAIA_AL_ID = 6,
    VT_GAIA_SRC_ID = 8,
    VT_GAIA_DST_ID = 10,
    VT_AIRLINE = 12,
    VT_AL_ID = 14,
    VT_SRC_AP = 16,
    VT_SRC_AP_ID = 18,
    VT_DST_AP = 20,
    VT_DST_AP_ID = 22,
    VT_CODESHARE = 24,
    VT_STOPS = 26,
    VT_EQUIPMENT = 28
  };
  int64_t Gaia_id() const {
    return GetField<int64_t>(VT_GAIA_ID, 0);
  }
  bool mutate_Gaia_id(int64_t _Gaia_id) {
    return SetField<int64_t>(VT_GAIA_ID, _Gaia_id, 0);
  }
  int64_t Gaia_Al_id() const {
    return GetField<int64_t>(VT_GAIA_AL_ID, 0);
  }
  bool mutate_Gaia_Al_id(int64_t _Gaia_Al_id) {
    return SetField<int64_t>(VT_GAIA_AL_ID, _Gaia_Al_id, 0);
  }
  int64_t Gaia_Src_id() const {
    return GetField<int64_t>(VT_GAIA_SRC_ID, 0);
  }
  bool mutate_Gaia_Src_id(int64_t _Gaia_Src_id) {
    return SetField<int64_t>(VT_GAIA_SRC_ID, _Gaia_Src_id, 0);
  }
  int64_t Gaia_Dst_id() const {
    return GetField<int64_t>(VT_GAIA_DST_ID, 0);
  }
  bool mutate_Gaia_Dst_id(int64_t _Gaia_Dst_id) {
    return SetField<int64_t>(VT_GAIA_DST_ID, _Gaia_Dst_id, 0);
  }
  const flatbuffers::String *airline() const {
    return GetPointer<const flatbuffers::String *>(VT_AIRLINE);
  }
  flatbuffers::String *mutable_airline() {
    return GetPointer<flatbuffers::String *>(VT_AIRLINE);
  }
  int32_t al_id() const {
    return GetField<int32_t>(VT_AL_ID, 0);
  }
  bool mutate_al_id(int32_t _al_id) {
    return SetField<int32_t>(VT_AL_ID, _al_id, 0);
  }
  const flatbuffers::String *src_ap() const {
    return GetPointer<const flatbuffers::String *>(VT_SRC_AP);
  }
  flatbuffers::String *mutable_src_ap() {
    return GetPointer<flatbuffers::String *>(VT_SRC_AP);
  }
  int32_t src_ap_id() const {
    return GetField<int32_t>(VT_SRC_AP_ID, 0);
  }
  bool mutate_src_ap_id(int32_t _src_ap_id) {
    return SetField<int32_t>(VT_SRC_AP_ID, _src_ap_id, 0);
  }
  const flatbuffers::String *dst_ap() const {
    return GetPointer<const flatbuffers::String *>(VT_DST_AP);
  }
  flatbuffers::String *mutable_dst_ap() {
    return GetPointer<flatbuffers::String *>(VT_DST_AP);
  }
  int32_t dst_ap_id() const {
    return GetField<int32_t>(VT_DST_AP_ID, 0);
  }
  bool mutate_dst_ap_id(int32_t _dst_ap_id) {
    return SetField<int32_t>(VT_DST_AP_ID, _dst_ap_id, 0);
  }
  const flatbuffers::String *codeshare() const {
    return GetPointer<const flatbuffers::String *>(VT_CODESHARE);
  }
  flatbuffers::String *mutable_codeshare() {
    return GetPointer<flatbuffers::String *>(VT_CODESHARE);
  }
  int32_t stops() const {
    return GetField<int32_t>(VT_STOPS, 0);
  }
  bool mutate_stops(int32_t _stops) {
    return SetField<int32_t>(VT_STOPS, _stops, 0);
  }
  const flatbuffers::String *equipment() const {
    return GetPointer<const flatbuffers::String *>(VT_EQUIPMENT);
  }
  flatbuffers::String *mutable_equipment() {
    return GetPointer<flatbuffers::String *>(VT_EQUIPMENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_GAIA_ID) &&
           VerifyField<int64_t>(verifier, VT_GAIA_AL_ID) &&
           VerifyField<int64_t>(verifier, VT_GAIA_SRC_ID) &&
           VerifyField<int64_t>(verifier, VT_GAIA_DST_ID) &&
           VerifyOffset(verifier, VT_AIRLINE) &&
           verifier.VerifyString(airline()) &&
           VerifyField<int32_t>(verifier, VT_AL_ID) &&
           VerifyOffset(verifier, VT_SRC_AP) &&
           verifier.VerifyString(src_ap()) &&
           VerifyField<int32_t>(verifier, VT_SRC_AP_ID) &&
           VerifyOffset(verifier, VT_DST_AP) &&
           verifier.VerifyString(dst_ap()) &&
           VerifyField<int32_t>(verifier, VT_DST_AP_ID) &&
           VerifyOffset(verifier, VT_CODESHARE) &&
           verifier.VerifyString(codeshare()) &&
           VerifyField<int32_t>(verifier, VT_STOPS) &&
           VerifyOffset(verifier, VT_EQUIPMENT) &&
           verifier.VerifyString(equipment()) &&
           verifier.EndTable();
  }
  routesT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(routesT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<routes> Pack(flatbuffers::FlatBufferBuilder &_fbb, const routesT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct routesBuilder {
  typedef routes Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Gaia_id(int64_t Gaia_id) {
    fbb_.AddElement<int64_t>(routes::VT_GAIA_ID, Gaia_id, 0);
  }
  void add_Gaia_Al_id(int64_t Gaia_Al_id) {
    fbb_.AddElement<int64_t>(routes::VT_GAIA_AL_ID, Gaia_Al_id, 0);
  }
  void add_Gaia_Src_id(int64_t Gaia_Src_id) {
    fbb_.AddElement<int64_t>(routes::VT_GAIA_SRC_ID, Gaia_Src_id, 0);
  }
  void add_Gaia_Dst_id(int64_t Gaia_Dst_id) {
    fbb_.AddElement<int64_t>(routes::VT_GAIA_DST_ID, Gaia_Dst_id, 0);
  }
  void add_airline(flatbuffers::Offset<flatbuffers::String> airline) {
    fbb_.AddOffset(routes::VT_AIRLINE, airline);
  }
  void add_al_id(int32_t al_id) {
    fbb_.AddElement<int32_t>(routes::VT_AL_ID, al_id, 0);
  }
  void add_src_ap(flatbuffers::Offset<flatbuffers::String> src_ap) {
    fbb_.AddOffset(routes::VT_SRC_AP, src_ap);
  }
  void add_src_ap_id(int32_t src_ap_id) {
    fbb_.AddElement<int32_t>(routes::VT_SRC_AP_ID, src_ap_id, 0);
  }
  void add_dst_ap(flatbuffers::Offset<flatbuffers::String> dst_ap) {
    fbb_.AddOffset(routes::VT_DST_AP, dst_ap);
  }
  void add_dst_ap_id(int32_t dst_ap_id) {
    fbb_.AddElement<int32_t>(routes::VT_DST_AP_ID, dst_ap_id, 0);
  }
  void add_codeshare(flatbuffers::Offset<flatbuffers::String> codeshare) {
    fbb_.AddOffset(routes::VT_CODESHARE, codeshare);
  }
  void add_stops(int32_t stops) {
    fbb_.AddElement<int32_t>(routes::VT_STOPS, stops, 0);
  }
  void add_equipment(flatbuffers::Offset<flatbuffers::String> equipment) {
    fbb_.AddOffset(routes::VT_EQUIPMENT, equipment);
  }
  explicit routesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  routesBuilder &operator=(const routesBuilder &);
  flatbuffers::Offset<routes> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<routes>(end);
    return o;
  }
};

inline flatbuffers::Offset<routes> Createroutes(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t Gaia_id = 0,
    int64_t Gaia_Al_id = 0,
    int64_t Gaia_Src_id = 0,
    int64_t Gaia_Dst_id = 0,
    flatbuffers::Offset<flatbuffers::String> airline = 0,
    int32_t al_id = 0,
    flatbuffers::Offset<flatbuffers::String> src_ap = 0,
    int32_t src_ap_id = 0,
    flatbuffers::Offset<flatbuffers::String> dst_ap = 0,
    int32_t dst_ap_id = 0,
    flatbuffers::Offset<flatbuffers::String> codeshare = 0,
    int32_t stops = 0,
    flatbuffers::Offset<flatbuffers::String> equipment = 0) {
  routesBuilder builder_(_fbb);
  builder_.add_Gaia_Dst_id(Gaia_Dst_id);
  builder_.add_Gaia_Src_id(Gaia_Src_id);
  builder_.add_Gaia_Al_id(Gaia_Al_id);
  builder_.add_Gaia_id(Gaia_id);
  builder_.add_equipment(equipment);
  builder_.add_stops(stops);
  builder_.add_codeshare(codeshare);
  builder_.add_dst_ap_id(dst_ap_id);
  builder_.add_dst_ap(dst_ap);
  builder_.add_src_ap_id(src_ap_id);
  builder_.add_src_ap(src_ap);
  builder_.add_al_id(al_id);
  builder_.add_airline(airline);
  return builder_.Finish();
}

inline flatbuffers::Offset<routes> CreateroutesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t Gaia_id = 0,
    int64_t Gaia_Al_id = 0,
    int64_t Gaia_Src_id = 0,
    int64_t Gaia_Dst_id = 0,
    const char *airline = nullptr,
    int32_t al_id = 0,
    const char *src_ap = nullptr,
    int32_t src_ap_id = 0,
    const char *dst_ap = nullptr,
    int32_t dst_ap_id = 0,
    const char *codeshare = nullptr,
    int32_t stops = 0,
    const char *equipment = nullptr) {
  auto airline__ = airline ? _fbb.CreateString(airline) : 0;
  auto src_ap__ = src_ap ? _fbb.CreateString(src_ap) : 0;
  auto dst_ap__ = dst_ap ? _fbb.CreateString(dst_ap) : 0;
  auto codeshare__ = codeshare ? _fbb.CreateString(codeshare) : 0;
  auto equipment__ = equipment ? _fbb.CreateString(equipment) : 0;
  return gaia::airport::Createroutes(
      _fbb,
      Gaia_id,
      Gaia_Al_id,
      Gaia_Src_id,
      Gaia_Dst_id,
      airline__,
      al_id,
      src_ap__,
      src_ap_id,
      dst_ap__,
      dst_ap_id,
      codeshare__,
      stops,
      equipment__);
}

flatbuffers::Offset<routes> Createroutes(flatbuffers::FlatBufferBuilder &_fbb, const routesT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline airlinesT *airlines::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<gaia::airport::airlinesT> _o = std::unique_ptr<gaia::airport::airlinesT>(new airlinesT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void airlines::UnPackTo(airlinesT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Gaia_id(); _o->Gaia_id = _e; }
  { auto _e = al_id(); _o->al_id = _e; }
  { auto _e = name(); if (_e) _o->name = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = alias(); if (_e) _o->alias = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = iata(); if (_e) _o->iata = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = icao(); if (_e) _o->icao = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = callsign(); if (_e) _o->callsign = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = country(); if (_e) _o->country = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = active(); if (_e) _o->active = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
}

inline flatbuffers::Offset<airlines> airlines::Pack(flatbuffers::FlatBufferBuilder &_fbb, const airlinesT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return Createairlines(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<airlines> Createairlines(flatbuffers::FlatBufferBuilder &_fbb, const airlinesT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const airlinesT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Gaia_id = _o->Gaia_id;
  auto _al_id = _o->al_id;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _alias = _o->alias.empty() ? 0 : _fbb.CreateString(_o->alias);
  auto _iata = _o->iata.empty() ? 0 : _fbb.CreateString(_o->iata);
  auto _icao = _o->icao.empty() ? 0 : _fbb.CreateString(_o->icao);
  auto _callsign = _o->callsign.empty() ? 0 : _fbb.CreateString(_o->callsign);
  auto _country = _o->country.empty() ? 0 : _fbb.CreateString(_o->country);
  auto _active = _o->active.empty() ? 0 : _fbb.CreateString(_o->active);
  return gaia::airport::Createairlines(
      _fbb,
      _Gaia_id,
      _al_id,
      _name,
      _alias,
      _iata,
      _icao,
      _callsign,
      _country,
      _active);
}

inline airportsT *airports::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<gaia::airport::airportsT> _o = std::unique_ptr<gaia::airport::airportsT>(new airportsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void airports::UnPackTo(airportsT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Gaia_id(); _o->Gaia_id = _e; }
  { auto _e = ap_id(); _o->ap_id = _e; }
  { auto _e = name(); if (_e) _o->name = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = city(); if (_e) _o->city = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = country(); if (_e) _o->country = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = iata(); if (_e) _o->iata = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = icao(); if (_e) _o->icao = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = latitude(); _o->latitude = _e; }
  { auto _e = longitude(); _o->longitude = _e; }
  { auto _e = altitude(); _o->altitude = _e; }
  { auto _e = timezone(); _o->timezone = _e; }
  { auto _e = dst(); if (_e) _o->dst = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = tztext(); if (_e) _o->tztext = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = type(); if (_e) _o->type = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = source(); if (_e) _o->source = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
}

inline flatbuffers::Offset<airports> airports::Pack(flatbuffers::FlatBufferBuilder &_fbb, const airportsT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return Createairports(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<airports> Createairports(flatbuffers::FlatBufferBuilder &_fbb, const airportsT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const airportsT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Gaia_id = _o->Gaia_id;
  auto _ap_id = _o->ap_id;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _city = _o->city.empty() ? 0 : _fbb.CreateString(_o->city);
  auto _country = _o->country.empty() ? 0 : _fbb.CreateString(_o->country);
  auto _iata = _o->iata.empty() ? 0 : _fbb.CreateString(_o->iata);
  auto _icao = _o->icao.empty() ? 0 : _fbb.CreateString(_o->icao);
  auto _latitude = _o->latitude;
  auto _longitude = _o->longitude;
  auto _altitude = _o->altitude;
  auto _timezone = _o->timezone;
  auto _dst = _o->dst.empty() ? 0 : _fbb.CreateString(_o->dst);
  auto _tztext = _o->tztext.empty() ? 0 : _fbb.CreateString(_o->tztext);
  auto _type = _o->type.empty() ? 0 : _fbb.CreateString(_o->type);
  auto _source = _o->source.empty() ? 0 : _fbb.CreateString(_o->source);
  return gaia::airport::Createairports(
      _fbb,
      _Gaia_id,
      _ap_id,
      _name,
      _city,
      _country,
      _iata,
      _icao,
      _latitude,
      _longitude,
      _altitude,
      _timezone,
      _dst,
      _tztext,
      _type,
      _source);
}

inline routesT *routes::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<gaia::airport::routesT> _o = std::unique_ptr<gaia::airport::routesT>(new routesT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void routes::UnPackTo(routesT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Gaia_id(); _o->Gaia_id = _e; }
  { auto _e = Gaia_Al_id(); _o->Gaia_Al_id = _e; }
  { auto _e = Gaia_Src_id(); _o->Gaia_Src_id = _e; }
  { auto _e = Gaia_Dst_id(); _o->Gaia_Dst_id = _e; }
  { auto _e = airline(); if (_e) _o->airline = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = al_id(); _o->al_id = _e; }
  { auto _e = src_ap(); if (_e) _o->src_ap = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = src_ap_id(); _o->src_ap_id = _e; }
  { auto _e = dst_ap(); if (_e) _o->dst_ap = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = dst_ap_id(); _o->dst_ap_id = _e; }
  { auto _e = codeshare(); if (_e) _o->codeshare = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
  { auto _e = stops(); _o->stops = _e; }
  { auto _e = equipment(); if (_e) _o->equipment = gaia::common::nullable_string_t(_e->c_str(), _e->size()); }
}

inline flatbuffers::Offset<routes> routes::Pack(flatbuffers::FlatBufferBuilder &_fbb, const routesT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return Createroutes(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<routes> Createroutes(flatbuffers::FlatBufferBuilder &_fbb, const routesT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const routesT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Gaia_id = _o->Gaia_id;
  auto _Gaia_Al_id = _o->Gaia_Al_id;
  auto _Gaia_Src_id = _o->Gaia_Src_id;
  auto _Gaia_Dst_id = _o->Gaia_Dst_id;
  auto _airline = _o->airline.empty() ? 0 : _fbb.CreateString(_o->airline);
  auto _al_id = _o->al_id;
  auto _src_ap = _o->src_ap.empty() ? 0 : _fbb.CreateString(_o->src_ap);
  auto _src_ap_id = _o->src_ap_id;
  auto _dst_ap = _o->dst_ap.empty() ? 0 : _fbb.CreateString(_o->dst_ap);
  auto _dst_ap_id = _o->dst_ap_id;
  auto _codeshare = _o->codeshare.empty() ? 0 : _fbb.CreateString(_o->codeshare);
  auto _stops = _o->stops;
  auto _equipment = _o->equipment.empty() ? 0 : _fbb.CreateString(_o->equipment);
  return gaia::airport::Createroutes(
      _fbb,
      _Gaia_id,
      _Gaia_Al_id,
      _Gaia_Src_id,
      _Gaia_Dst_id,
      _airline,
      _al_id,
      _src_ap,
      _src_ap_id,
      _dst_ap,
      _dst_ap_id,
      _codeshare,
      _stops,
      _equipment);
}

inline const flatbuffers::TypeTable *airlinesTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "Gaia_id",
    "al_id",
    "name",
    "alias",
    "iata",
    "icao",
    "callsign",
    "country",
    "active"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 9, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *airportsTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "Gaia_id",
    "ap_id",
    "name",
    "city",
    "country",
    "iata",
    "icao",
    "latitude",
    "longitude",
    "altitude",
    "timezone",
    "dst",
    "tztext",
    "type",
    "source"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 15, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *routesTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "Gaia_id",
    "Gaia_Al_id",
    "Gaia_Src_id",
    "Gaia_Dst_id",
    "airline",
    "al_id",
    "src_ap",
    "src_ap_id",
    "dst_ap",
    "dst_ap_id",
    "codeshare",
    "stops",
    "equipment"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 13, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace airport
}  // namespace gaia

#endif  // FLATBUFFERS_GENERATED_AIRPORTQ1_GAIA_AIRPORT_H_
