#ifndef AIRPORT_VERIFIER_H
#define AIRPORT_VERIFIER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef AIRPORT_READER_H
#include "airport_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"

static int gaia_airport_airlines_verify_table(flatcc_table_verifier_descriptor_t *td);
static int gaia_airport_airports_verify_table(flatcc_table_verifier_descriptor_t *td);
static int gaia_airport_routes_verify_table(flatcc_table_verifier_descriptor_t *td);

static int gaia_airport_airlines_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 8, 8) /* gaia_id */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* al_id */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 3, 0) /* alias */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 4, 0) /* iata */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 5, 0) /* icao */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 6, 0) /* callsign */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 7, 0) /* country */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 8, 0) /* active */)) return ret;
    return flatcc_verify_ok;
}

static inline int gaia_airport_airlines_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, gaia_airport_airlines_identifier, &gaia_airport_airlines_verify_table);
}

static inline int gaia_airport_airlines_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, gaia_airport_airlines_type_identifier, &gaia_airport_airlines_verify_table);
}

static inline int gaia_airport_airlines_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &gaia_airport_airlines_verify_table);
}

static inline int gaia_airport_airlines_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &gaia_airport_airlines_verify_table);
}

static int gaia_airport_airports_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 8, 8) /* gaia_id */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* ap_id */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 3, 0) /* city */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 4, 0) /* country */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 5, 0) /* iata */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 6, 0) /* icao */)) return ret;
    if ((ret = flatcc_verify_field(td, 7, 8, 8) /* latitude */)) return ret;
    if ((ret = flatcc_verify_field(td, 8, 8, 8) /* longitude */)) return ret;
    if ((ret = flatcc_verify_field(td, 9, 4, 4) /* altitude */)) return ret;
    if ((ret = flatcc_verify_field(td, 10, 4, 4) /* timezone */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 11, 0) /* dst */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 12, 0) /* tztext */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 13, 0) /* type */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 14, 0) /* source */)) return ret;
    return flatcc_verify_ok;
}

static inline int gaia_airport_airports_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, gaia_airport_airports_identifier, &gaia_airport_airports_verify_table);
}

static inline int gaia_airport_airports_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, gaia_airport_airports_type_identifier, &gaia_airport_airports_verify_table);
}

static inline int gaia_airport_airports_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &gaia_airport_airports_verify_table);
}

static inline int gaia_airport_airports_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &gaia_airport_airports_verify_table);
}

static int gaia_airport_routes_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 8, 8) /* gaia_id */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 8, 8) /* gaia_al_id */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 8, 8) /* gaia_src_id */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 8, 8) /* gaia_dst_id */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 4, 0) /* airline */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 4, 4) /* al_id */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 6, 0) /* src_ap */)) return ret;
    if ((ret = flatcc_verify_field(td, 7, 4, 4) /* src_ap_id */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 8, 0) /* dst_ap */)) return ret;
    if ((ret = flatcc_verify_field(td, 9, 4, 4) /* dst_ap_id */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 10, 0) /* codeshare */)) return ret;
    if ((ret = flatcc_verify_field(td, 11, 4, 4) /* stops */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 12, 0) /* equipment */)) return ret;
    return flatcc_verify_ok;
}

static inline int gaia_airport_routes_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, gaia_airport_routes_identifier, &gaia_airport_routes_verify_table);
}

static inline int gaia_airport_routes_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, gaia_airport_routes_type_identifier, &gaia_airport_routes_verify_table);
}

static inline int gaia_airport_routes_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &gaia_airport_routes_verify_table);
}

static inline int gaia_airport_routes_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &gaia_airport_routes_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* AIRPORT_VERIFIER_H */
