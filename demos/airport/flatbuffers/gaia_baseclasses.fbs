// -*- mode: java -*- // Java mode works for emacs to edit flatbuffers.

namespace GaiaPlatform;

// The primary identifier type.
// Flatbuffers doesn't have 16 byte ints. Work around this with fixed length ubytes.
// This required wrapping them in a struct. Structs can't be modified, regular tables can.
struct ID {
    id : uint64;         // Prototype using 64bit int. Not 128bit int type. gerr.
    //  id : [ubyte:16]; // A guid, 16 bytes.
}

// Probably can't have a global list of types....
enum Types : byte { Invalid = -1 }

// Required node properties;
table NodeFields {
  id:   GaiaPlatform.ID (required); // The id of the node.
  type: long = -1;                  // The type of the node. Default to invalid -1, since can't make scaler types required.
}

// Required edge properties
table EdgeFields {
  id:     GaiaPlatform.ID (required);  // The id of the edge.
  type:   long = -1;                   // The type of the edge.
  source: GaiaPlatform.ID (required);  // The source & destination of the edge.
  dest:   GaiaPlatform.ID (required);
}

// Model node type (with nested payload message)
table Node {
  id:   GaiaPlatform.ID (required); // The id of the node.
  type: long = -1;                  // The type of the node. Default to invalid -1, since can't make scaler types required.
  msg:  [ubyte];                    // A flatbuffer message of the appropriate type.
}

// Model edge type (with nested message)
table Edge {
  id:     GaiaPlatform.ID (required);  // The id of the edge.
  type:   long = -1;                   // The type of the edge.
  source: GaiaPlatform.ID (required);  // The source & destination of the edge.
  dest:   GaiaPlatform.ID (required);
  msg:    [ubyte];                     // A flatbuffer message of the appropriate type.
}

