# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AirportDemo

import flatbuffers

class routes(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsroutes(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = routes()
        x.Init(buf, n + offset)
        return x

    # routes
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # routes
    def GaiaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # routes
    def GaiaSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # routes
    def GaiaDstId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # routes
    def Airline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # routes
    def AlId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # routes
    def SrcAp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # routes
    def SrcApId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # routes
    def DstAp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # routes
    def DstApId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # routes
    def Codeshare(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # routes
    def Stops(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # routes
    def Equipment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def routesStart(builder): builder.StartObject(12)
def routesAddGaiaId(builder, GaiaId): builder.PrependInt64Slot(0, GaiaId, 0)
def routesAddGaiaSrcId(builder, GaiaSrcId): builder.PrependInt64Slot(1, GaiaSrcId, 0)
def routesAddGaiaDstId(builder, GaiaDstId): builder.PrependInt64Slot(2, GaiaDstId, 0)
def routesAddAirline(builder, airline): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(airline), 0)
def routesAddAlId(builder, alId): builder.PrependInt32Slot(4, alId, 0)
def routesAddSrcAp(builder, srcAp): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(srcAp), 0)
def routesAddSrcApId(builder, srcApId): builder.PrependInt32Slot(6, srcApId, 0)
def routesAddDstAp(builder, dstAp): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(dstAp), 0)
def routesAddDstApId(builder, dstApId): builder.PrependInt32Slot(8, dstApId, 0)
def routesAddCodeshare(builder, codeshare): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(codeshare), 0)
def routesAddStops(builder, stops): builder.PrependInt32Slot(10, stops, 0)
def routesAddEquipment(builder, equipment): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(equipment), 0)
def routesEnd(builder): return builder.EndObject()
